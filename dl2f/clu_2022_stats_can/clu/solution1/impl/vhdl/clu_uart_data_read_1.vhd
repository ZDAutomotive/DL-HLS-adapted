-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity clu_uart_data_read_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_ps_ddr_AWVALID : OUT STD_LOGIC;
    m_axi_ps_ddr_AWREADY : IN STD_LOGIC;
    m_axi_ps_ddr_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ps_ddr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ps_ddr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ps_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ps_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ps_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ps_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ps_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ps_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ps_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ps_ddr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ps_ddr_WVALID : OUT STD_LOGIC;
    m_axi_ps_ddr_WREADY : IN STD_LOGIC;
    m_axi_ps_ddr_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ps_ddr_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ps_ddr_WLAST : OUT STD_LOGIC;
    m_axi_ps_ddr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ps_ddr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ps_ddr_ARVALID : OUT STD_LOGIC;
    m_axi_ps_ddr_ARREADY : IN STD_LOGIC;
    m_axi_ps_ddr_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ps_ddr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ps_ddr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ps_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ps_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ps_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ps_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ps_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ps_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ps_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ps_ddr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ps_ddr_RVALID : IN STD_LOGIC;
    m_axi_ps_ddr_RREADY : OUT STD_LOGIC;
    m_axi_ps_ddr_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ps_ddr_RLAST : IN STD_LOGIC;
    m_axi_ps_ddr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ps_ddr_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_ps_ddr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ps_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ps_ddr_BVALID : IN STD_LOGIC;
    m_axi_ps_ddr_BREADY : OUT STD_LOGIC;
    m_axi_ps_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ps_ddr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ps_ddr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    ddr : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_clu_addr_AWVALID : OUT STD_LOGIC;
    m_axi_clu_addr_AWREADY : IN STD_LOGIC;
    m_axi_clu_addr_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_clu_addr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_clu_addr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_clu_addr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_clu_addr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_clu_addr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_clu_addr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_clu_addr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_clu_addr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_clu_addr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_clu_addr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_clu_addr_WVALID : OUT STD_LOGIC;
    m_axi_clu_addr_WREADY : IN STD_LOGIC;
    m_axi_clu_addr_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_clu_addr_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_clu_addr_WLAST : OUT STD_LOGIC;
    m_axi_clu_addr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_clu_addr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_clu_addr_ARVALID : OUT STD_LOGIC;
    m_axi_clu_addr_ARREADY : IN STD_LOGIC;
    m_axi_clu_addr_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_clu_addr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_clu_addr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_clu_addr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_clu_addr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_clu_addr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_clu_addr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_clu_addr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_clu_addr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_clu_addr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_clu_addr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_clu_addr_RVALID : IN STD_LOGIC;
    m_axi_clu_addr_RREADY : OUT STD_LOGIC;
    m_axi_clu_addr_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_clu_addr_RLAST : IN STD_LOGIC;
    m_axi_clu_addr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_clu_addr_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_clu_addr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_clu_addr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_clu_addr_BVALID : IN STD_LOGIC;
    m_axi_clu_addr_BREADY : OUT STD_LOGIC;
    m_axi_clu_addr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_clu_addr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_clu_addr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    uartbase : IN STD_LOGIC_VECTOR (31 downto 0);
    ts_in : IN STD_LOGIC_VECTOR (63 downto 0);
    init_device_read : IN STD_LOGIC_VECTOR (7 downto 0);
    EN : IN STD_LOGIC_VECTOR (2 downto 0);
    received_uart : OUT STD_LOGIC_VECTOR (31 downto 0);
    received_uart_ap_vld : OUT STD_LOGIC );
end;


architecture behav of clu_uart_data_read_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (28 downto 0) := "00000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (28 downto 0) := "00000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (28 downto 0) := "00000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (28 downto 0) := "00000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (28 downto 0) := "00000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (28 downto 0) := "00001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (28 downto 0) := "00010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (28 downto 0) := "00100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (28 downto 0) := "01000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv11_CC : STD_LOGIC_VECTOR (10 downto 0) := "00011001100";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_const_lv11_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000000101";
    constant ap_const_lv11_6 : STD_LOGIC_VECTOR (10 downto 0) := "00000000110";
    constant ap_const_lv11_7 : STD_LOGIC_VECTOR (10 downto 0) := "00000000111";
    constant ap_const_lv11_8 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_const_lv11_9 : STD_LOGIC_VECTOR (10 downto 0) := "00000001001";
    constant ap_const_lv11_A : STD_LOGIC_VECTOR (10 downto 0) := "00000001010";
    constant ap_const_lv11_B : STD_LOGIC_VECTOR (10 downto 0) := "00000001011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv19_1014 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000010100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv19_4000 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv64_F4240 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000011110100001001000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal PL_Ctrl_fifo_index_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal PL_Ctrl_fifo_index_ce0 : STD_LOGIC;
    signal PL_Ctrl_fifo_index_we0 : STD_LOGIC;
    signal PL_Ctrl_fifo_index_d0 : STD_LOGIC_VECTOR (10 downto 0);
    signal PL_Ctrl_fifo_index_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal PL_Ctrl_first_time_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal PL_Ctrl_first_time_ce0 : STD_LOGIC;
    signal PL_Ctrl_first_time_we0 : STD_LOGIC;
    signal PL_Ctrl_first_time_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal PL_Ctrl_first_time_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal PL_Ctrl_first_timestamp_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal PL_Ctrl_first_timestamp_ce0 : STD_LOGIC;
    signal PL_Ctrl_first_timestamp_we0 : STD_LOGIC;
    signal PL_Ctrl_first_timestamp_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal PL_Ctrl_first_timestamp_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal uart_fifo_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal uart_fifo_ce0 : STD_LOGIC;
    signal uart_fifo_we0 : STD_LOGIC;
    signal uart_fifo_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal uart_fifo_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal uart_fifo_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal uart_fifo_ce1 : STD_LOGIC;
    signal uart_fifo_we1 : STD_LOGIC;
    signal uart_fifo_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal PL_Header_pkt_len_bytes_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal PL_Header_pkt_len_bytes_ce0 : STD_LOGIC;
    signal PL_Header_pkt_len_bytes_we0 : STD_LOGIC;
    signal PL_Header_pkt_len_bytes_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal PL_Header_pkt_len_bytes_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal internal_uart_counter : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal clu_addr_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal clu_addr_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal EN_cast8_fu_401_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal EN_cast8_reg_868 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln171_fu_405_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln171_reg_873 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln188_fu_413_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln188_reg_882 : STD_LOGIC_VECTOR (10 downto 0);
    signal uart_fifo_addr_reg_887 : STD_LOGIC_VECTOR (10 downto 0);
    signal uart_fifo_addr_1_reg_892 : STD_LOGIC_VECTOR (10 downto 0);
    signal uart_fifo_addr_2_reg_897 : STD_LOGIC_VECTOR (10 downto 0);
    signal uart_fifo_addr_3_reg_902 : STD_LOGIC_VECTOR (10 downto 0);
    signal uart_fifo_addr_4_reg_907 : STD_LOGIC_VECTOR (10 downto 0);
    signal uart_fifo_addr_5_reg_912 : STD_LOGIC_VECTOR (10 downto 0);
    signal uart_fifo_addr_6_reg_917 : STD_LOGIC_VECTOR (10 downto 0);
    signal uart_fifo_addr_7_reg_922 : STD_LOGIC_VECTOR (10 downto 0);
    signal uart_fifo_addr_8_reg_927 : STD_LOGIC_VECTOR (10 downto 0);
    signal uart_fifo_addr_9_reg_932 : STD_LOGIC_VECTOR (10 downto 0);
    signal uart_fifo_addr_11_reg_937 : STD_LOGIC_VECTOR (10 downto 0);
    signal uart_fifo_addr_12_reg_942 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln173_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln173_reg_947 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_563_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln_reg_951 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln_reg_956 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_reg_967 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln177_fu_615_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln177_reg_972 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln177_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln177_reg_977 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal PL_Ctrl_fifo_index_addr_reg_981 : STD_LOGIC_VECTOR (2 downto 0);
    signal PL_Ctrl_first_time_addr_reg_986 : STD_LOGIC_VECTOR (2 downto 0);
    signal single_index_reg_991 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal uart_fifo_addr_10_reg_996 : STD_LOGIC_VECTOR (10 downto 0);
    signal PL_Ctrl_first_time_load_reg_1001 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln9_reg_1005 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal rxData_fu_757_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal rxData_reg_1016 : STD_LOGIC_VECTOR (7 downto 0);
    signal PL_Header_pkt_len_bytes_addr_reg_1021 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal PL_Ctrl_first_timestamp_addr_1_gep_fu_373_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal icmp_ln210_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln210_reg_1031 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal icmp_ln210_1_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln210_1_reg_1036 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln210_2_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln210_2_reg_1041 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln210_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln210_reg_1046 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_ddr_write_1_fu_381_ap_start : STD_LOGIC;
    signal grp_ddr_write_1_fu_381_ap_done : STD_LOGIC;
    signal grp_ddr_write_1_fu_381_ap_idle : STD_LOGIC;
    signal grp_ddr_write_1_fu_381_ap_ready : STD_LOGIC;
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWVALID : STD_LOGIC;
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_WVALID : STD_LOGIC;
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_WLAST : STD_LOGIC;
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARVALID : STD_LOGIC;
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_RREADY : STD_LOGIC;
    signal grp_ddr_write_1_fu_381_m_axi_ps_ddr_BREADY : STD_LOGIC;
    signal grp_ddr_write_1_fu_381_uart_fifo_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_ddr_write_1_fu_381_uart_fifo_ce0 : STD_LOGIC;
    signal grp_ddr_write_1_fu_381_PL_Ctrl_fifo_index_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ddr_write_1_fu_381_PL_Ctrl_fifo_index_ce0 : STD_LOGIC;
    signal grp_ddr_write_1_fu_381_PL_Ctrl_fifo_index_we0 : STD_LOGIC;
    signal grp_ddr_write_1_fu_381_PL_Ctrl_fifo_index_d0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_ddr_write_1_fu_381_PL_Header_pkt_len_bytes_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ddr_write_1_fu_381_PL_Header_pkt_len_bytes_ce0 : STD_LOGIC;
    signal grp_ddr_write_1_fu_381_PL_Header_pkt_len_bytes_we0 : STD_LOGIC;
    signal grp_ddr_write_1_fu_381_PL_Header_pkt_len_bytes_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_ddr_write_1_fu_381_PL_Ctrl_first_time_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ddr_write_1_fu_381_PL_Ctrl_first_time_ce0 : STD_LOGIC;
    signal grp_ddr_write_1_fu_381_PL_Ctrl_first_time_we0 : STD_LOGIC;
    signal grp_ddr_write_1_fu_381_PL_Ctrl_first_time_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ddr_write_1_fu_381_PL_Ctrl_first_timestamp_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ddr_write_1_fu_381_PL_Ctrl_first_timestamp_ce0 : STD_LOGIC;
    signal grp_ddr_write_1_fu_381_PL_Ctrl_first_timestamp_we0 : STD_LOGIC;
    signal grp_ddr_write_1_fu_381_PL_Ctrl_first_timestamp_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_ddr_write_1_fu_381_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_predicate_op178_call_state29 : BOOLEAN;
    signal ap_block_state29_on_subcall_done : BOOLEAN;
    signal zext_ln188_1_fu_419_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln189_fu_430_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln190_fu_441_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln191_fu_452_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln192_fu_463_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln193_fu_474_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln194_fu_485_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln195_fu_496_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln196_fu_507_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln197_fu_518_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln206_fu_529_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln207_fu_540_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln203_fu_638_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln176_fu_597_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln200_fu_747_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln211_fu_826_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln204_fu_741_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal trunc_ln195_fu_713_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln207_fu_783_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln205_fu_765_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln188_fu_413_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln188_fu_413_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln189_fu_424_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln190_fu_435_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln191_fu_446_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln192_fu_457_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln193_fu_468_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln194_fu_479_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln195_fu_490_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln196_fu_501_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln197_fu_512_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln206_fu_523_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln207_1_fu_534_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal enable_fu_545_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln173_fu_551_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln176_fu_571_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln176_fu_577_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln176_fu_581_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln_fu_619_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln203_fu_633_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln200_fu_717_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln200_fu_722_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln200_fu_726_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln205_fu_761_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln209_fu_790_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln210_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal mul_ln188_fu_413_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component clu_ddr_write_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_ps_ddr_AWVALID : OUT STD_LOGIC;
        m_axi_ps_ddr_AWREADY : IN STD_LOGIC;
        m_axi_ps_ddr_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ps_ddr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ps_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ps_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ps_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_WVALID : OUT STD_LOGIC;
        m_axi_ps_ddr_WREADY : IN STD_LOGIC;
        m_axi_ps_ddr_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_ps_ddr_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_WLAST : OUT STD_LOGIC;
        m_axi_ps_ddr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_ARVALID : OUT STD_LOGIC;
        m_axi_ps_ddr_ARREADY : IN STD_LOGIC;
        m_axi_ps_ddr_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ps_ddr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ps_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ps_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ps_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_RVALID : IN STD_LOGIC;
        m_axi_ps_ddr_RREADY : OUT STD_LOGIC;
        m_axi_ps_ddr_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_ps_ddr_RLAST : IN STD_LOGIC;
        m_axi_ps_ddr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_ps_ddr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_BVALID : IN STD_LOGIC;
        m_axi_ps_ddr_BREADY : OUT STD_LOGIC;
        m_axi_ps_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        ddr_header : IN STD_LOGIC_VECTOR (31 downto 0);
        device_id : IN STD_LOGIC_VECTOR (2 downto 0);
        uart_fifo_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        uart_fifo_ce0 : OUT STD_LOGIC;
        uart_fifo_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        PL_Ctrl_fifo_index_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        PL_Ctrl_fifo_index_ce0 : OUT STD_LOGIC;
        PL_Ctrl_fifo_index_we0 : OUT STD_LOGIC;
        PL_Ctrl_fifo_index_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        PL_Header_pkt_len_bytes_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        PL_Header_pkt_len_bytes_ce0 : OUT STD_LOGIC;
        PL_Header_pkt_len_bytes_we0 : OUT STD_LOGIC;
        PL_Header_pkt_len_bytes_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        PL_Ctrl_first_time_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        PL_Ctrl_first_time_ce0 : OUT STD_LOGIC;
        PL_Ctrl_first_time_we0 : OUT STD_LOGIC;
        PL_Ctrl_first_time_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        PL_Ctrl_first_timestamp_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        PL_Ctrl_first_timestamp_ce0 : OUT STD_LOGIC;
        PL_Ctrl_first_timestamp_we0 : OUT STD_LOGIC;
        PL_Ctrl_first_timestamp_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component clu_mul_3ns_9ns_11_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component clu_uart_data_read_1_PL_Ctrl_fifo_index_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (10 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component clu_uart_data_read_1_PL_Ctrl_first_time_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component clu_uart_data_read_1_PL_Ctrl_first_timestamp_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component clu_uart_data_read_1_uart_fifo_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clu_uart_data_read_1_PL_Header_pkt_len_bytes_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    PL_Ctrl_fifo_index_U : component clu_uart_data_read_1_PL_Ctrl_fifo_index_RAM_AUTO_1R1W
    generic map (
        DataWidth => 11,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => PL_Ctrl_fifo_index_address0,
        ce0 => PL_Ctrl_fifo_index_ce0,
        we0 => PL_Ctrl_fifo_index_we0,
        d0 => PL_Ctrl_fifo_index_d0,
        q0 => PL_Ctrl_fifo_index_q0);

    PL_Ctrl_first_time_U : component clu_uart_data_read_1_PL_Ctrl_first_time_RAM_AUTO_1R1W
    generic map (
        DataWidth => 1,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => PL_Ctrl_first_time_address0,
        ce0 => PL_Ctrl_first_time_ce0,
        we0 => PL_Ctrl_first_time_we0,
        d0 => PL_Ctrl_first_time_d0,
        q0 => PL_Ctrl_first_time_q0);

    PL_Ctrl_first_timestamp_U : component clu_uart_data_read_1_PL_Ctrl_first_timestamp_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => PL_Ctrl_first_timestamp_address0,
        ce0 => PL_Ctrl_first_timestamp_ce0,
        we0 => PL_Ctrl_first_timestamp_we0,
        d0 => PL_Ctrl_first_timestamp_d0,
        q0 => PL_Ctrl_first_timestamp_q0);

    uart_fifo_U : component clu_uart_data_read_1_uart_fifo_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 1632,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => uart_fifo_address0,
        ce0 => uart_fifo_ce0,
        we0 => uart_fifo_we0,
        d0 => uart_fifo_d0,
        q0 => uart_fifo_q0,
        address1 => uart_fifo_address1,
        ce1 => uart_fifo_ce1,
        we1 => uart_fifo_we1,
        d1 => uart_fifo_d1);

    PL_Header_pkt_len_bytes_U : component clu_uart_data_read_1_PL_Header_pkt_len_bytes_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => PL_Header_pkt_len_bytes_address0,
        ce0 => PL_Header_pkt_len_bytes_ce0,
        we0 => PL_Header_pkt_len_bytes_we0,
        d0 => PL_Header_pkt_len_bytes_d0,
        q0 => PL_Header_pkt_len_bytes_q0);

    grp_ddr_write_1_fu_381 : component clu_ddr_write_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ddr_write_1_fu_381_ap_start,
        ap_done => grp_ddr_write_1_fu_381_ap_done,
        ap_idle => grp_ddr_write_1_fu_381_ap_idle,
        ap_ready => grp_ddr_write_1_fu_381_ap_ready,
        m_axi_ps_ddr_AWVALID => grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWVALID,
        m_axi_ps_ddr_AWREADY => m_axi_ps_ddr_AWREADY,
        m_axi_ps_ddr_AWADDR => grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWADDR,
        m_axi_ps_ddr_AWID => grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWID,
        m_axi_ps_ddr_AWLEN => grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWLEN,
        m_axi_ps_ddr_AWSIZE => grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWSIZE,
        m_axi_ps_ddr_AWBURST => grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWBURST,
        m_axi_ps_ddr_AWLOCK => grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWLOCK,
        m_axi_ps_ddr_AWCACHE => grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWCACHE,
        m_axi_ps_ddr_AWPROT => grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWPROT,
        m_axi_ps_ddr_AWQOS => grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWQOS,
        m_axi_ps_ddr_AWREGION => grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWREGION,
        m_axi_ps_ddr_AWUSER => grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWUSER,
        m_axi_ps_ddr_WVALID => grp_ddr_write_1_fu_381_m_axi_ps_ddr_WVALID,
        m_axi_ps_ddr_WREADY => m_axi_ps_ddr_WREADY,
        m_axi_ps_ddr_WDATA => grp_ddr_write_1_fu_381_m_axi_ps_ddr_WDATA,
        m_axi_ps_ddr_WSTRB => grp_ddr_write_1_fu_381_m_axi_ps_ddr_WSTRB,
        m_axi_ps_ddr_WLAST => grp_ddr_write_1_fu_381_m_axi_ps_ddr_WLAST,
        m_axi_ps_ddr_WID => grp_ddr_write_1_fu_381_m_axi_ps_ddr_WID,
        m_axi_ps_ddr_WUSER => grp_ddr_write_1_fu_381_m_axi_ps_ddr_WUSER,
        m_axi_ps_ddr_ARVALID => grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARVALID,
        m_axi_ps_ddr_ARREADY => m_axi_ps_ddr_ARREADY,
        m_axi_ps_ddr_ARADDR => grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARADDR,
        m_axi_ps_ddr_ARID => grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARID,
        m_axi_ps_ddr_ARLEN => grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARLEN,
        m_axi_ps_ddr_ARSIZE => grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARSIZE,
        m_axi_ps_ddr_ARBURST => grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARBURST,
        m_axi_ps_ddr_ARLOCK => grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARLOCK,
        m_axi_ps_ddr_ARCACHE => grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARCACHE,
        m_axi_ps_ddr_ARPROT => grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARPROT,
        m_axi_ps_ddr_ARQOS => grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARQOS,
        m_axi_ps_ddr_ARREGION => grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARREGION,
        m_axi_ps_ddr_ARUSER => grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARUSER,
        m_axi_ps_ddr_RVALID => m_axi_ps_ddr_RVALID,
        m_axi_ps_ddr_RREADY => grp_ddr_write_1_fu_381_m_axi_ps_ddr_RREADY,
        m_axi_ps_ddr_RDATA => m_axi_ps_ddr_RDATA,
        m_axi_ps_ddr_RLAST => m_axi_ps_ddr_RLAST,
        m_axi_ps_ddr_RID => m_axi_ps_ddr_RID,
        m_axi_ps_ddr_RFIFONUM => m_axi_ps_ddr_RFIFONUM,
        m_axi_ps_ddr_RUSER => m_axi_ps_ddr_RUSER,
        m_axi_ps_ddr_RRESP => m_axi_ps_ddr_RRESP,
        m_axi_ps_ddr_BVALID => m_axi_ps_ddr_BVALID,
        m_axi_ps_ddr_BREADY => grp_ddr_write_1_fu_381_m_axi_ps_ddr_BREADY,
        m_axi_ps_ddr_BRESP => m_axi_ps_ddr_BRESP,
        m_axi_ps_ddr_BID => m_axi_ps_ddr_BID,
        m_axi_ps_ddr_BUSER => m_axi_ps_ddr_BUSER,
        ddr_header => ddr,
        device_id => EN,
        uart_fifo_address0 => grp_ddr_write_1_fu_381_uart_fifo_address0,
        uart_fifo_ce0 => grp_ddr_write_1_fu_381_uart_fifo_ce0,
        uart_fifo_q0 => uart_fifo_q0,
        PL_Ctrl_fifo_index_address0 => grp_ddr_write_1_fu_381_PL_Ctrl_fifo_index_address0,
        PL_Ctrl_fifo_index_ce0 => grp_ddr_write_1_fu_381_PL_Ctrl_fifo_index_ce0,
        PL_Ctrl_fifo_index_we0 => grp_ddr_write_1_fu_381_PL_Ctrl_fifo_index_we0,
        PL_Ctrl_fifo_index_d0 => grp_ddr_write_1_fu_381_PL_Ctrl_fifo_index_d0,
        PL_Header_pkt_len_bytes_address0 => grp_ddr_write_1_fu_381_PL_Header_pkt_len_bytes_address0,
        PL_Header_pkt_len_bytes_ce0 => grp_ddr_write_1_fu_381_PL_Header_pkt_len_bytes_ce0,
        PL_Header_pkt_len_bytes_we0 => grp_ddr_write_1_fu_381_PL_Header_pkt_len_bytes_we0,
        PL_Header_pkt_len_bytes_d0 => grp_ddr_write_1_fu_381_PL_Header_pkt_len_bytes_d0,
        PL_Ctrl_first_time_address0 => grp_ddr_write_1_fu_381_PL_Ctrl_first_time_address0,
        PL_Ctrl_first_time_ce0 => grp_ddr_write_1_fu_381_PL_Ctrl_first_time_ce0,
        PL_Ctrl_first_time_we0 => grp_ddr_write_1_fu_381_PL_Ctrl_first_time_we0,
        PL_Ctrl_first_time_d0 => grp_ddr_write_1_fu_381_PL_Ctrl_first_time_d0,
        PL_Ctrl_first_timestamp_address0 => grp_ddr_write_1_fu_381_PL_Ctrl_first_timestamp_address0,
        PL_Ctrl_first_timestamp_ce0 => grp_ddr_write_1_fu_381_PL_Ctrl_first_timestamp_ce0,
        PL_Ctrl_first_timestamp_we0 => grp_ddr_write_1_fu_381_PL_Ctrl_first_timestamp_we0,
        PL_Ctrl_first_timestamp_d0 => grp_ddr_write_1_fu_381_PL_Ctrl_first_timestamp_d0);

    mul_3ns_9ns_11_1_1_U28 : component clu_mul_3ns_9ns_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 9,
        dout_WIDTH => 11)
    port map (
        din0 => mul_ln188_fu_413_p0,
        din1 => mul_ln188_fu_413_p1,
        dout => mul_ln188_fu_413_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_ddr_write_1_fu_381_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ddr_write_1_fu_381_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                    grp_ddr_write_1_fu_381_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ddr_write_1_fu_381_ap_ready = ap_const_logic_1)) then 
                    grp_ddr_write_1_fu_381_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    EN_cast8_reg_868(2 downto 0) <= EN_cast8_fu_401_p1(2 downto 0);
                icmp_ln173_reg_947 <= icmp_ln173_fu_557_p2;
                mul_ln188_reg_882 <= mul_ln188_fu_413_p2;
                uart_fifo_addr_11_reg_937 <= zext_ln206_fu_529_p1(11 - 1 downto 0);
                uart_fifo_addr_12_reg_942 <= zext_ln207_fu_540_p1(11 - 1 downto 0);
                    uart_fifo_addr_1_reg_892(10 downto 1) <= zext_ln189_fu_430_p1(11 - 1 downto 0)(10 downto 1);
                    uart_fifo_addr_2_reg_897(0) <= zext_ln190_fu_441_p1(11 - 1 downto 0)(0);    uart_fifo_addr_2_reg_897(10 downto 2) <= zext_ln190_fu_441_p1(11 - 1 downto 0)(10 downto 2);
                    uart_fifo_addr_3_reg_902(10 downto 2) <= zext_ln191_fu_452_p1(11 - 1 downto 0)(10 downto 2);
                uart_fifo_addr_4_reg_907 <= zext_ln192_fu_463_p1(11 - 1 downto 0);
                uart_fifo_addr_5_reg_912 <= zext_ln193_fu_474_p1(11 - 1 downto 0);
                uart_fifo_addr_6_reg_917 <= zext_ln194_fu_485_p1(11 - 1 downto 0);
                uart_fifo_addr_7_reg_922 <= zext_ln195_fu_496_p1(11 - 1 downto 0);
                uart_fifo_addr_8_reg_927 <= zext_ln196_fu_507_p1(11 - 1 downto 0);
                uart_fifo_addr_9_reg_932 <= zext_ln197_fu_518_p1(11 - 1 downto 0);
                uart_fifo_addr_reg_887 <= zext_ln188_1_fu_419_p1(11 - 1 downto 0);
                    zext_ln171_reg_873(2 downto 0) <= zext_ln171_fu_405_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                PL_Ctrl_fifo_index_addr_reg_981 <= zext_ln171_reg_873(3 - 1 downto 0);
                icmp_ln177_reg_977 <= icmp_ln177_fu_627_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln177_fu_627_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                PL_Ctrl_first_time_addr_reg_986 <= zext_ln171_reg_873(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                PL_Ctrl_first_time_load_reg_1001 <= PL_Ctrl_first_time_q0;
                single_index_reg_991 <= PL_Ctrl_fifo_index_q0;
                uart_fifo_addr_10_reg_996 <= zext_ln203_fu_638_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                PL_Header_pkt_len_bytes_addr_reg_1021 <= zext_ln171_reg_873(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                icmp_ln210_1_reg_1036 <= icmp_ln210_1_fu_801_p2;
                icmp_ln210_2_reg_1041 <= icmp_ln210_2_fu_807_p2;
                icmp_ln210_reg_1031 <= icmp_ln210_fu_795_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                internal_uart_counter <= add_ln211_fu_826_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                or_ln210_reg_1046 <= or_ln210_fu_817_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                rxData_reg_1016 <= rxData_fu_757_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln173_fu_557_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    shl_ln_reg_951(18 downto 16) <= shl_ln_fu_563_p3(18 downto 16);
                trunc_ln_reg_956 <= add_ln176_fu_581_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_reg_967 <= m_axi_clu_addr_RDATA(4 downto 4);
                trunc_ln177_reg_972 <= trunc_ln177_fu_615_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                trunc_ln9_reg_1005 <= add_ln200_fu_726_p2(31 downto 2);
            end if;
        end if;
    end process;
    EN_cast8_reg_868(7 downto 3) <= "00000";
    zext_ln171_reg_873(31 downto 3) <= "00000000000000000000000000000";
    uart_fifo_addr_1_reg_892(0) <= '1';
    uart_fifo_addr_2_reg_897(1) <= '1';
    uart_fifo_addr_3_reg_902(1 downto 0) <= "11";
    shl_ln_reg_951(15 downto 0) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_clu_addr_ARREADY, m_axi_clu_addr_RVALID, PL_Ctrl_first_time_q0, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state23, icmp_ln173_fu_557_p2, icmp_ln177_fu_627_p2, ap_CS_fsm_state10, ap_CS_fsm_state11, or_ln210_fu_817_p2, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_block_state29_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (icmp_ln173_fu_557_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                elsif (((ap_start = ap_const_logic_1) and (icmp_ln173_fu_557_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (m_axi_clu_addr_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (m_axi_clu_addr_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln177_fu_627_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_0 = PL_Ctrl_first_time_q0))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (m_axi_clu_addr_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (m_axi_clu_addr_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((or_ln210_fu_817_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((ap_const_boolean_0 = ap_block_state29_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    EN_cast8_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(EN),8));

    PL_Ctrl_fifo_index_address0_assign_proc : process(zext_ln171_reg_873, ap_CS_fsm_state10, PL_Ctrl_fifo_index_addr_reg_981, ap_CS_fsm_state15, ap_CS_fsm_state25, grp_ddr_write_1_fu_381_PL_Ctrl_fifo_index_address0, ap_CS_fsm_state29, ap_predicate_op178_call_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            PL_Ctrl_fifo_index_address0 <= PL_Ctrl_fifo_index_addr_reg_981;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            PL_Ctrl_fifo_index_address0 <= zext_ln171_reg_873(3 - 1 downto 0);
        elsif (((ap_predicate_op178_call_state29 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            PL_Ctrl_fifo_index_address0 <= grp_ddr_write_1_fu_381_PL_Ctrl_fifo_index_address0;
        else 
            PL_Ctrl_fifo_index_address0 <= "XXX";
        end if; 
    end process;


    PL_Ctrl_fifo_index_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state25, grp_ddr_write_1_fu_381_PL_Ctrl_fifo_index_ce0, ap_CS_fsm_state29, ap_predicate_op178_call_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            PL_Ctrl_fifo_index_ce0 <= ap_const_logic_1;
        elsif (((ap_predicate_op178_call_state29 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            PL_Ctrl_fifo_index_ce0 <= grp_ddr_write_1_fu_381_PL_Ctrl_fifo_index_ce0;
        else 
            PL_Ctrl_fifo_index_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    PL_Ctrl_fifo_index_d0_assign_proc : process(ap_CS_fsm_state15, grp_ddr_write_1_fu_381_PL_Ctrl_fifo_index_d0, ap_CS_fsm_state29, ap_predicate_op178_call_state29, add_ln204_fu_741_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            PL_Ctrl_fifo_index_d0 <= add_ln204_fu_741_p2;
        elsif (((ap_predicate_op178_call_state29 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            PL_Ctrl_fifo_index_d0 <= grp_ddr_write_1_fu_381_PL_Ctrl_fifo_index_d0;
        else 
            PL_Ctrl_fifo_index_d0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    PL_Ctrl_fifo_index_we0_assign_proc : process(ap_CS_fsm_state15, grp_ddr_write_1_fu_381_PL_Ctrl_fifo_index_we0, ap_CS_fsm_state29, ap_predicate_op178_call_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            PL_Ctrl_fifo_index_we0 <= ap_const_logic_1;
        elsif (((ap_predicate_op178_call_state29 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            PL_Ctrl_fifo_index_we0 <= grp_ddr_write_1_fu_381_PL_Ctrl_fifo_index_we0;
        else 
            PL_Ctrl_fifo_index_we0 <= ap_const_logic_0;
        end if; 
    end process;


    PL_Ctrl_first_time_address0_assign_proc : process(zext_ln171_reg_873, ap_CS_fsm_state10, PL_Ctrl_first_time_addr_reg_986, ap_CS_fsm_state11, grp_ddr_write_1_fu_381_PL_Ctrl_first_time_address0, ap_CS_fsm_state29, ap_predicate_op178_call_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            PL_Ctrl_first_time_address0 <= PL_Ctrl_first_time_addr_reg_986;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            PL_Ctrl_first_time_address0 <= zext_ln171_reg_873(3 - 1 downto 0);
        elsif (((ap_predicate_op178_call_state29 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            PL_Ctrl_first_time_address0 <= grp_ddr_write_1_fu_381_PL_Ctrl_first_time_address0;
        else 
            PL_Ctrl_first_time_address0 <= "XXX";
        end if; 
    end process;


    PL_Ctrl_first_time_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, grp_ddr_write_1_fu_381_PL_Ctrl_first_time_ce0, ap_CS_fsm_state29, ap_predicate_op178_call_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            PL_Ctrl_first_time_ce0 <= ap_const_logic_1;
        elsif (((ap_predicate_op178_call_state29 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            PL_Ctrl_first_time_ce0 <= grp_ddr_write_1_fu_381_PL_Ctrl_first_time_ce0;
        else 
            PL_Ctrl_first_time_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    PL_Ctrl_first_time_d0_assign_proc : process(ap_CS_fsm_state11, grp_ddr_write_1_fu_381_PL_Ctrl_first_time_d0, ap_CS_fsm_state29, ap_predicate_op178_call_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            PL_Ctrl_first_time_d0 <= ap_const_lv1_0;
        elsif (((ap_predicate_op178_call_state29 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            PL_Ctrl_first_time_d0 <= grp_ddr_write_1_fu_381_PL_Ctrl_first_time_d0;
        else 
            PL_Ctrl_first_time_d0 <= "X";
        end if; 
    end process;


    PL_Ctrl_first_time_we0_assign_proc : process(PL_Ctrl_first_time_q0, ap_CS_fsm_state11, grp_ddr_write_1_fu_381_PL_Ctrl_first_time_we0, ap_CS_fsm_state29, ap_predicate_op178_call_state29)
    begin
        if (((ap_const_lv1_1 = PL_Ctrl_first_time_q0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            PL_Ctrl_first_time_we0 <= ap_const_logic_1;
        elsif (((ap_predicate_op178_call_state29 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            PL_Ctrl_first_time_we0 <= grp_ddr_write_1_fu_381_PL_Ctrl_first_time_we0;
        else 
            PL_Ctrl_first_time_we0 <= ap_const_logic_0;
        end if; 
    end process;

    PL_Ctrl_first_timestamp_addr_1_gep_fu_373_p3 <= zext_ln171_reg_873(3 - 1 downto 0);

    PL_Ctrl_first_timestamp_address0_assign_proc : process(zext_ln171_reg_873, ap_CS_fsm_state11, PL_Ctrl_first_timestamp_addr_1_gep_fu_373_p3, ap_CS_fsm_state25, grp_ddr_write_1_fu_381_PL_Ctrl_first_timestamp_address0, ap_CS_fsm_state29, ap_predicate_op178_call_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            PL_Ctrl_first_timestamp_address0 <= PL_Ctrl_first_timestamp_addr_1_gep_fu_373_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            PL_Ctrl_first_timestamp_address0 <= zext_ln171_reg_873(3 - 1 downto 0);
        elsif (((ap_predicate_op178_call_state29 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            PL_Ctrl_first_timestamp_address0 <= grp_ddr_write_1_fu_381_PL_Ctrl_first_timestamp_address0;
        else 
            PL_Ctrl_first_timestamp_address0 <= "XXX";
        end if; 
    end process;


    PL_Ctrl_first_timestamp_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state25, grp_ddr_write_1_fu_381_PL_Ctrl_first_timestamp_ce0, ap_CS_fsm_state29, ap_predicate_op178_call_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            PL_Ctrl_first_timestamp_ce0 <= ap_const_logic_1;
        elsif (((ap_predicate_op178_call_state29 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            PL_Ctrl_first_timestamp_ce0 <= grp_ddr_write_1_fu_381_PL_Ctrl_first_timestamp_ce0;
        else 
            PL_Ctrl_first_timestamp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    PL_Ctrl_first_timestamp_d0_assign_proc : process(ts_in, ap_CS_fsm_state11, grp_ddr_write_1_fu_381_PL_Ctrl_first_timestamp_d0, ap_CS_fsm_state29, ap_predicate_op178_call_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            PL_Ctrl_first_timestamp_d0 <= ts_in;
        elsif (((ap_predicate_op178_call_state29 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            PL_Ctrl_first_timestamp_d0 <= grp_ddr_write_1_fu_381_PL_Ctrl_first_timestamp_d0;
        else 
            PL_Ctrl_first_timestamp_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    PL_Ctrl_first_timestamp_we0_assign_proc : process(PL_Ctrl_first_time_q0, ap_CS_fsm_state11, grp_ddr_write_1_fu_381_PL_Ctrl_first_timestamp_we0, ap_CS_fsm_state29, ap_predicate_op178_call_state29)
    begin
        if (((ap_const_lv1_1 = PL_Ctrl_first_time_q0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            PL_Ctrl_first_timestamp_we0 <= ap_const_logic_1;
        elsif (((ap_predicate_op178_call_state29 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            PL_Ctrl_first_timestamp_we0 <= grp_ddr_write_1_fu_381_PL_Ctrl_first_timestamp_we0;
        else 
            PL_Ctrl_first_timestamp_we0 <= ap_const_logic_0;
        end if; 
    end process;


    PL_Header_pkt_len_bytes_address0_assign_proc : process(zext_ln171_reg_873, PL_Header_pkt_len_bytes_addr_reg_1021, ap_CS_fsm_state24, ap_CS_fsm_state25, grp_ddr_write_1_fu_381_PL_Header_pkt_len_bytes_address0, ap_CS_fsm_state29, ap_predicate_op178_call_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            PL_Header_pkt_len_bytes_address0 <= PL_Header_pkt_len_bytes_addr_reg_1021;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            PL_Header_pkt_len_bytes_address0 <= zext_ln171_reg_873(3 - 1 downto 0);
        elsif (((ap_predicate_op178_call_state29 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            PL_Header_pkt_len_bytes_address0 <= grp_ddr_write_1_fu_381_PL_Header_pkt_len_bytes_address0;
        else 
            PL_Header_pkt_len_bytes_address0 <= "XXX";
        end if; 
    end process;


    PL_Header_pkt_len_bytes_ce0_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state25, grp_ddr_write_1_fu_381_PL_Header_pkt_len_bytes_ce0, ap_CS_fsm_state29, ap_predicate_op178_call_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            PL_Header_pkt_len_bytes_ce0 <= ap_const_logic_1;
        elsif (((ap_predicate_op178_call_state29 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            PL_Header_pkt_len_bytes_ce0 <= grp_ddr_write_1_fu_381_PL_Header_pkt_len_bytes_ce0;
        else 
            PL_Header_pkt_len_bytes_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    PL_Header_pkt_len_bytes_d0_assign_proc : process(ap_CS_fsm_state25, grp_ddr_write_1_fu_381_PL_Header_pkt_len_bytes_d0, ap_CS_fsm_state29, ap_predicate_op178_call_state29, add_ln205_fu_765_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            PL_Header_pkt_len_bytes_d0 <= add_ln205_fu_765_p2;
        elsif (((ap_predicate_op178_call_state29 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            PL_Header_pkt_len_bytes_d0 <= grp_ddr_write_1_fu_381_PL_Header_pkt_len_bytes_d0;
        else 
            PL_Header_pkt_len_bytes_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    PL_Header_pkt_len_bytes_we0_assign_proc : process(icmp_ln177_reg_977, ap_CS_fsm_state25, grp_ddr_write_1_fu_381_PL_Header_pkt_len_bytes_we0, ap_CS_fsm_state29, ap_predicate_op178_call_state29)
    begin
        if (((icmp_ln177_reg_977 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            PL_Header_pkt_len_bytes_we0 <= ap_const_logic_1;
        elsif (((ap_predicate_op178_call_state29 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            PL_Header_pkt_len_bytes_we0 <= grp_ddr_write_1_fu_381_PL_Header_pkt_len_bytes_we0;
        else 
            PL_Header_pkt_len_bytes_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln176_fu_581_p2 <= std_logic_vector(unsigned(zext_ln176_fu_577_p1) + unsigned(uartbase));
    add_ln192_fu_457_p2 <= std_logic_vector(unsigned(mul_ln188_fu_413_p2) + unsigned(ap_const_lv11_4));
    add_ln193_fu_468_p2 <= std_logic_vector(unsigned(mul_ln188_fu_413_p2) + unsigned(ap_const_lv11_5));
    add_ln194_fu_479_p2 <= std_logic_vector(unsigned(mul_ln188_fu_413_p2) + unsigned(ap_const_lv11_6));
    add_ln195_fu_490_p2 <= std_logic_vector(unsigned(mul_ln188_fu_413_p2) + unsigned(ap_const_lv11_7));
    add_ln196_fu_501_p2 <= std_logic_vector(unsigned(mul_ln188_fu_413_p2) + unsigned(ap_const_lv11_8));
    add_ln197_fu_512_p2 <= std_logic_vector(unsigned(mul_ln188_fu_413_p2) + unsigned(ap_const_lv11_9));
    add_ln200_fu_726_p2 <= std_logic_vector(unsigned(zext_ln200_fu_722_p1) + unsigned(uartbase));
    add_ln203_fu_633_p2 <= std_logic_vector(unsigned(mul_ln188_reg_882) + unsigned(PL_Ctrl_fifo_index_q0));
    add_ln204_fu_741_p2 <= std_logic_vector(unsigned(single_index_reg_991) + unsigned(ap_const_lv11_1));
    add_ln205_fu_765_p2 <= std_logic_vector(unsigned(PL_Header_pkt_len_bytes_q0) + unsigned(ap_const_lv16_1));
    add_ln206_fu_523_p2 <= std_logic_vector(unsigned(mul_ln188_fu_413_p2) + unsigned(ap_const_lv11_A));
    add_ln207_1_fu_534_p2 <= std_logic_vector(unsigned(mul_ln188_fu_413_p2) + unsigned(ap_const_lv11_B));
    add_ln207_fu_783_p2 <= std_logic_vector(unsigned(trunc_ln205_fu_761_p1) + unsigned(ap_const_lv8_1));
    add_ln211_fu_826_p2 <= std_logic_vector(unsigned(internal_uart_counter) + unsigned(ap_const_lv32_1));
    and_ln173_fu_551_p2 <= (init_device_read and enable_fu_545_p2);
    and_ln210_fu_813_p2 <= (icmp_ln210_2_reg_1041 and icmp_ln210_1_reg_1036);
    and_ln_fu_619_p4 <= ((tmp_reg_967 & ap_const_lv3_0) & trunc_ln177_reg_972);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;

    ap_ST_fsm_state16_blk_assign_proc : process(m_axi_clu_addr_ARREADY)
    begin
        if ((m_axi_clu_addr_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;

    ap_ST_fsm_state23_blk_assign_proc : process(m_axi_clu_addr_RVALID)
    begin
        if ((m_axi_clu_addr_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state23_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state23_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;

    ap_ST_fsm_state29_blk_assign_proc : process(ap_block_state29_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state29_on_subcall_done)) then 
            ap_ST_fsm_state29_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state29_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(m_axi_clu_addr_ARREADY)
    begin
        if ((m_axi_clu_addr_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_ST_fsm_state9_blk_assign_proc : process(m_axi_clu_addr_RVALID)
    begin
        if ((m_axi_clu_addr_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state29_on_subcall_done_assign_proc : process(grp_ddr_write_1_fu_381_ap_done, ap_predicate_op178_call_state29)
    begin
                ap_block_state29_on_subcall_done <= ((ap_predicate_op178_call_state29 = ap_const_boolean_1) and (grp_ddr_write_1_fu_381_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state29, ap_block_state29_on_subcall_done)
    begin
        if ((((ap_const_boolean_0 = ap_block_state29_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op178_call_state29_assign_proc : process(icmp_ln173_reg_947, or_ln210_reg_1046)
    begin
                ap_predicate_op178_call_state29 <= ((or_ln210_reg_1046 = ap_const_lv1_1) and (icmp_ln173_reg_947 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state29, ap_block_state29_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state29_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    clu_addr_blk_n_AR_assign_proc : process(m_axi_clu_addr_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            clu_addr_blk_n_AR <= m_axi_clu_addr_ARREADY;
        else 
            clu_addr_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    clu_addr_blk_n_R_assign_proc : process(m_axi_clu_addr_RVALID, ap_CS_fsm_state9, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            clu_addr_blk_n_R <= m_axi_clu_addr_RVALID;
        else 
            clu_addr_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    enable_fu_545_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & EN_cast8_fu_401_p1(8-1 downto 0)))));
    grp_ddr_write_1_fu_381_ap_start <= grp_ddr_write_1_fu_381_ap_start_reg;
    icmp_ln173_fu_557_p2 <= "1" when (and_ln173_fu_551_p2 = ap_const_lv8_0) else "0";
    icmp_ln177_fu_627_p2 <= "1" when (and_ln_fu_619_p4 = ap_const_lv5_0) else "0";
    icmp_ln210_1_fu_801_p2 <= "1" when (signed(sub_ln209_fu_790_p2) > signed(ap_const_lv64_F4240)) else "0";
    icmp_ln210_2_fu_807_p2 <= "0" when (PL_Ctrl_first_timestamp_q0 = ap_const_lv64_0) else "1";
    icmp_ln210_fu_795_p2 <= "1" when (PL_Ctrl_fifo_index_q0 = ap_const_lv11_CC) else "0";

    m_axi_clu_addr_ARADDR_assign_proc : process(m_axi_clu_addr_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state16, sext_ln176_fu_597_p1, sext_ln200_fu_747_p1)
    begin
        if ((m_axi_clu_addr_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                m_axi_clu_addr_ARADDR <= sext_ln200_fu_747_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                m_axi_clu_addr_ARADDR <= sext_ln176_fu_597_p1;
            else 
                m_axi_clu_addr_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_clu_addr_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_clu_addr_ARBURST <= ap_const_lv2_0;
    m_axi_clu_addr_ARCACHE <= ap_const_lv4_0;
    m_axi_clu_addr_ARID <= ap_const_lv1_0;
    m_axi_clu_addr_ARLEN <= ap_const_lv32_1;
    m_axi_clu_addr_ARLOCK <= ap_const_lv2_0;
    m_axi_clu_addr_ARPROT <= ap_const_lv3_0;
    m_axi_clu_addr_ARQOS <= ap_const_lv4_0;
    m_axi_clu_addr_ARREGION <= ap_const_lv4_0;
    m_axi_clu_addr_ARSIZE <= ap_const_lv3_0;
    m_axi_clu_addr_ARUSER <= ap_const_lv1_0;

    m_axi_clu_addr_ARVALID_assign_proc : process(m_axi_clu_addr_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state16)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state16) and (m_axi_clu_addr_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (m_axi_clu_addr_ARREADY = ap_const_logic_1)))) then 
            m_axi_clu_addr_ARVALID <= ap_const_logic_1;
        else 
            m_axi_clu_addr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_clu_addr_AWADDR <= ap_const_lv32_0;
    m_axi_clu_addr_AWBURST <= ap_const_lv2_0;
    m_axi_clu_addr_AWCACHE <= ap_const_lv4_0;
    m_axi_clu_addr_AWID <= ap_const_lv1_0;
    m_axi_clu_addr_AWLEN <= ap_const_lv32_0;
    m_axi_clu_addr_AWLOCK <= ap_const_lv2_0;
    m_axi_clu_addr_AWPROT <= ap_const_lv3_0;
    m_axi_clu_addr_AWQOS <= ap_const_lv4_0;
    m_axi_clu_addr_AWREGION <= ap_const_lv4_0;
    m_axi_clu_addr_AWSIZE <= ap_const_lv3_0;
    m_axi_clu_addr_AWUSER <= ap_const_lv1_0;
    m_axi_clu_addr_AWVALID <= ap_const_logic_0;
    m_axi_clu_addr_BREADY <= ap_const_logic_0;

    m_axi_clu_addr_RREADY_assign_proc : process(m_axi_clu_addr_RVALID, ap_CS_fsm_state9, ap_CS_fsm_state23)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state23) and (m_axi_clu_addr_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (m_axi_clu_addr_RVALID = ap_const_logic_1)))) then 
            m_axi_clu_addr_RREADY <= ap_const_logic_1;
        else 
            m_axi_clu_addr_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_clu_addr_WDATA <= ap_const_lv32_0;
    m_axi_clu_addr_WID <= ap_const_lv1_0;
    m_axi_clu_addr_WLAST <= ap_const_logic_0;
    m_axi_clu_addr_WSTRB <= ap_const_lv4_0;
    m_axi_clu_addr_WUSER <= ap_const_lv1_0;
    m_axi_clu_addr_WVALID <= ap_const_logic_0;
    m_axi_ps_ddr_ARADDR <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARADDR;
    m_axi_ps_ddr_ARBURST <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARBURST;
    m_axi_ps_ddr_ARCACHE <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARCACHE;
    m_axi_ps_ddr_ARID <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARID;
    m_axi_ps_ddr_ARLEN <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARLEN;
    m_axi_ps_ddr_ARLOCK <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARLOCK;
    m_axi_ps_ddr_ARPROT <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARPROT;
    m_axi_ps_ddr_ARQOS <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARQOS;
    m_axi_ps_ddr_ARREGION <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARREGION;
    m_axi_ps_ddr_ARSIZE <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARSIZE;
    m_axi_ps_ddr_ARUSER <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARUSER;

    m_axi_ps_ddr_ARVALID_assign_proc : process(icmp_ln173_reg_947, or_ln210_reg_1046, grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARVALID, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or ((or_ln210_reg_1046 = ap_const_lv1_1) and (icmp_ln173_reg_947 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29)))) then 
            m_axi_ps_ddr_ARVALID <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_ARVALID;
        else 
            m_axi_ps_ddr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_ps_ddr_AWADDR <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWADDR;
    m_axi_ps_ddr_AWBURST <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWBURST;
    m_axi_ps_ddr_AWCACHE <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWCACHE;
    m_axi_ps_ddr_AWID <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWID;
    m_axi_ps_ddr_AWLEN <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWLEN;
    m_axi_ps_ddr_AWLOCK <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWLOCK;
    m_axi_ps_ddr_AWPROT <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWPROT;
    m_axi_ps_ddr_AWQOS <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWQOS;
    m_axi_ps_ddr_AWREGION <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWREGION;
    m_axi_ps_ddr_AWSIZE <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWSIZE;
    m_axi_ps_ddr_AWUSER <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWUSER;

    m_axi_ps_ddr_AWVALID_assign_proc : process(icmp_ln173_reg_947, or_ln210_reg_1046, grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWVALID, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or ((or_ln210_reg_1046 = ap_const_lv1_1) and (icmp_ln173_reg_947 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29)))) then 
            m_axi_ps_ddr_AWVALID <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_AWVALID;
        else 
            m_axi_ps_ddr_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_ps_ddr_BREADY_assign_proc : process(icmp_ln173_reg_947, or_ln210_reg_1046, grp_ddr_write_1_fu_381_m_axi_ps_ddr_BREADY, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or ((or_ln210_reg_1046 = ap_const_lv1_1) and (icmp_ln173_reg_947 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29)))) then 
            m_axi_ps_ddr_BREADY <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_BREADY;
        else 
            m_axi_ps_ddr_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_ps_ddr_RREADY_assign_proc : process(icmp_ln173_reg_947, or_ln210_reg_1046, grp_ddr_write_1_fu_381_m_axi_ps_ddr_RREADY, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or ((or_ln210_reg_1046 = ap_const_lv1_1) and (icmp_ln173_reg_947 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29)))) then 
            m_axi_ps_ddr_RREADY <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_RREADY;
        else 
            m_axi_ps_ddr_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_ps_ddr_WDATA <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_WDATA;
    m_axi_ps_ddr_WID <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_WID;
    m_axi_ps_ddr_WLAST <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_WLAST;
    m_axi_ps_ddr_WSTRB <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_WSTRB;
    m_axi_ps_ddr_WUSER <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_WUSER;

    m_axi_ps_ddr_WVALID_assign_proc : process(icmp_ln173_reg_947, or_ln210_reg_1046, grp_ddr_write_1_fu_381_m_axi_ps_ddr_WVALID, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or ((or_ln210_reg_1046 = ap_const_lv1_1) and (icmp_ln173_reg_947 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29)))) then 
            m_axi_ps_ddr_WVALID <= grp_ddr_write_1_fu_381_m_axi_ps_ddr_WVALID;
        else 
            m_axi_ps_ddr_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln188_fu_413_p0 <= mul_ln188_fu_413_p00(3 - 1 downto 0);
    mul_ln188_fu_413_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(EN),11));
    mul_ln188_fu_413_p1 <= ap_const_lv11_CC(9 - 1 downto 0);
    or_ln176_fu_571_p2 <= (shl_ln_fu_563_p3 or ap_const_lv19_1014);
    or_ln189_fu_424_p2 <= (mul_ln188_fu_413_p2 or ap_const_lv11_1);
    or_ln190_fu_435_p2 <= (mul_ln188_fu_413_p2 or ap_const_lv11_2);
    or_ln191_fu_446_p2 <= (mul_ln188_fu_413_p2 or ap_const_lv11_3);
    or_ln200_fu_717_p2 <= (shl_ln_reg_951 or ap_const_lv19_4000);
    or_ln210_fu_817_p2 <= (icmp_ln210_reg_1031 or and_ln210_fu_813_p2);
    received_uart <= std_logic_vector(unsigned(internal_uart_counter) + unsigned(ap_const_lv32_1));

    received_uart_ap_vld_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            received_uart_ap_vld <= ap_const_logic_1;
        else 
            received_uart_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    rxData_fu_757_p1 <= m_axi_clu_addr_RDATA(8 - 1 downto 0);
        sext_ln176_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_956),32));

        sext_ln200_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln9_reg_1005),32));

    shl_ln_fu_563_p3 <= (EN & ap_const_lv16_0);
    sub_ln209_fu_790_p2 <= std_logic_vector(unsigned(ts_in) - unsigned(PL_Ctrl_first_timestamp_q0));
    trunc_ln177_fu_615_p1 <= m_axi_clu_addr_RDATA(1 - 1 downto 0);
    trunc_ln195_fu_713_p1 <= ts_in(8 - 1 downto 0);
    trunc_ln205_fu_761_p1 <= PL_Header_pkt_len_bytes_q0(8 - 1 downto 0);

    uart_fifo_address0_assign_proc : process(uart_fifo_addr_1_reg_892, uart_fifo_addr_3_reg_902, uart_fifo_addr_5_reg_912, uart_fifo_addr_7_reg_922, uart_fifo_addr_9_reg_932, uart_fifo_addr_11_reg_937, ap_CS_fsm_state11, uart_fifo_addr_10_reg_996, ap_CS_fsm_state15, ap_CS_fsm_state24, ap_CS_fsm_state25, grp_ddr_write_1_fu_381_uart_fifo_address0, ap_CS_fsm_state29, ap_predicate_op178_call_state29, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            uart_fifo_address0 <= uart_fifo_addr_11_reg_937;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            uart_fifo_address0 <= uart_fifo_addr_10_reg_996;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            uart_fifo_address0 <= uart_fifo_addr_9_reg_932;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            uart_fifo_address0 <= uart_fifo_addr_7_reg_922;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            uart_fifo_address0 <= uart_fifo_addr_5_reg_912;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            uart_fifo_address0 <= uart_fifo_addr_3_reg_902;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            uart_fifo_address0 <= uart_fifo_addr_1_reg_892;
        elsif (((ap_predicate_op178_call_state29 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            uart_fifo_address0 <= grp_ddr_write_1_fu_381_uart_fifo_address0;
        else 
            uart_fifo_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    uart_fifo_address1_assign_proc : process(uart_fifo_addr_reg_887, uart_fifo_addr_2_reg_897, uart_fifo_addr_4_reg_907, uart_fifo_addr_6_reg_917, uart_fifo_addr_8_reg_927, uart_fifo_addr_12_reg_942, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            uart_fifo_address1 <= uart_fifo_addr_12_reg_942;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            uart_fifo_address1 <= uart_fifo_addr_8_reg_927;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            uart_fifo_address1 <= uart_fifo_addr_6_reg_917;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            uart_fifo_address1 <= uart_fifo_addr_4_reg_907;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            uart_fifo_address1 <= uart_fifo_addr_2_reg_897;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            uart_fifo_address1 <= uart_fifo_addr_reg_887;
        else 
            uart_fifo_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    uart_fifo_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state24, ap_CS_fsm_state25, grp_ddr_write_1_fu_381_uart_fifo_ce0, ap_CS_fsm_state29, ap_predicate_op178_call_state29, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            uart_fifo_ce0 <= ap_const_logic_1;
        elsif (((ap_predicate_op178_call_state29 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            uart_fifo_ce0 <= grp_ddr_write_1_fu_381_uart_fifo_ce0;
        else 
            uart_fifo_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    uart_fifo_ce1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            uart_fifo_ce1 <= ap_const_logic_1;
        else 
            uart_fifo_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    uart_fifo_d0_assign_proc : process(ts_in, EN_cast8_reg_868, ap_CS_fsm_state11, ap_CS_fsm_state15, rxData_reg_1016, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, trunc_ln195_fu_713_p1, add_ln205_fu_765_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            uart_fifo_d0 <= add_ln205_fu_765_p2(15 downto 8);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            uart_fifo_d0 <= rxData_reg_1016;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            uart_fifo_d0 <= EN_cast8_reg_868;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            uart_fifo_d0 <= trunc_ln195_fu_713_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            uart_fifo_d0 <= ts_in(23 downto 16);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            uart_fifo_d0 <= ts_in(39 downto 32);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            uart_fifo_d0 <= ts_in(55 downto 48);
        else 
            uart_fifo_d0 <= "XXXXXXXX";
        end if; 
    end process;


    uart_fifo_d1_assign_proc : process(ts_in, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, add_ln207_fu_783_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            uart_fifo_d1 <= add_ln207_fu_783_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            uart_fifo_d1 <= ap_const_lv8_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            uart_fifo_d1 <= ts_in(15 downto 8);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            uart_fifo_d1 <= ts_in(31 downto 24);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            uart_fifo_d1 <= ts_in(47 downto 40);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            uart_fifo_d1 <= ts_in(63 downto 56);
        else 
            uart_fifo_d1 <= "XXXXXXXX";
        end if; 
    end process;


    uart_fifo_we0_assign_proc : process(PL_Ctrl_first_time_q0, icmp_ln177_reg_977, ap_CS_fsm_state11, PL_Ctrl_first_time_load_reg_1001, ap_CS_fsm_state15, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state24) or ((icmp_ln177_reg_977 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((ap_const_lv1_1 = PL_Ctrl_first_time_load_reg_1001) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = PL_Ctrl_first_time_q0) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            uart_fifo_we0 <= ap_const_logic_1;
        else 
            uart_fifo_we0 <= ap_const_logic_0;
        end if; 
    end process;


    uart_fifo_we1_assign_proc : process(PL_Ctrl_first_time_q0, icmp_ln177_reg_977, ap_CS_fsm_state11, PL_Ctrl_first_time_load_reg_1001, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln177_reg_977 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((ap_const_lv1_1 = PL_Ctrl_first_time_load_reg_1001) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = PL_Ctrl_first_time_q0) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            uart_fifo_we1 <= ap_const_logic_1;
        else 
            uart_fifo_we1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln171_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(EN),32));
    zext_ln176_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln176_fu_571_p2),32));
    zext_ln188_1_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln188_fu_413_p2),32));
    zext_ln189_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln189_fu_424_p2),32));
    zext_ln190_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln190_fu_435_p2),32));
    zext_ln191_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln191_fu_446_p2),32));
    zext_ln192_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln192_fu_457_p2),32));
    zext_ln193_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln193_fu_468_p2),32));
    zext_ln194_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln194_fu_479_p2),32));
    zext_ln195_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln195_fu_490_p2),32));
    zext_ln196_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln196_fu_501_p2),32));
    zext_ln197_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln197_fu_512_p2),32));
    zext_ln200_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln200_fu_717_p2),32));
    zext_ln203_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_fu_633_p2),32));
    zext_ln206_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln206_fu_523_p2),32));
    zext_ln207_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln207_1_fu_534_p2),32));
end behav;
