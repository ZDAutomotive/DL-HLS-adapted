// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module clu_ddr_write_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_ps_ddr_AWVALID,
        m_axi_ps_ddr_AWREADY,
        m_axi_ps_ddr_AWADDR,
        m_axi_ps_ddr_AWID,
        m_axi_ps_ddr_AWLEN,
        m_axi_ps_ddr_AWSIZE,
        m_axi_ps_ddr_AWBURST,
        m_axi_ps_ddr_AWLOCK,
        m_axi_ps_ddr_AWCACHE,
        m_axi_ps_ddr_AWPROT,
        m_axi_ps_ddr_AWQOS,
        m_axi_ps_ddr_AWREGION,
        m_axi_ps_ddr_AWUSER,
        m_axi_ps_ddr_WVALID,
        m_axi_ps_ddr_WREADY,
        m_axi_ps_ddr_WDATA,
        m_axi_ps_ddr_WSTRB,
        m_axi_ps_ddr_WLAST,
        m_axi_ps_ddr_WID,
        m_axi_ps_ddr_WUSER,
        m_axi_ps_ddr_ARVALID,
        m_axi_ps_ddr_ARREADY,
        m_axi_ps_ddr_ARADDR,
        m_axi_ps_ddr_ARID,
        m_axi_ps_ddr_ARLEN,
        m_axi_ps_ddr_ARSIZE,
        m_axi_ps_ddr_ARBURST,
        m_axi_ps_ddr_ARLOCK,
        m_axi_ps_ddr_ARCACHE,
        m_axi_ps_ddr_ARPROT,
        m_axi_ps_ddr_ARQOS,
        m_axi_ps_ddr_ARREGION,
        m_axi_ps_ddr_ARUSER,
        m_axi_ps_ddr_RVALID,
        m_axi_ps_ddr_RREADY,
        m_axi_ps_ddr_RDATA,
        m_axi_ps_ddr_RLAST,
        m_axi_ps_ddr_RID,
        m_axi_ps_ddr_RFIFONUM,
        m_axi_ps_ddr_RUSER,
        m_axi_ps_ddr_RRESP,
        m_axi_ps_ddr_BVALID,
        m_axi_ps_ddr_BREADY,
        m_axi_ps_ddr_BRESP,
        m_axi_ps_ddr_BID,
        m_axi_ps_ddr_BUSER,
        ddr_header,
        device_id,
        uart_fifo_address0,
        uart_fifo_ce0,
        uart_fifo_q0,
        PL_Ctrl_fifo_index_address0,
        PL_Ctrl_fifo_index_ce0,
        PL_Ctrl_fifo_index_we0,
        PL_Ctrl_fifo_index_d0,
        PL_Header_pkt_len_bytes_address0,
        PL_Header_pkt_len_bytes_ce0,
        PL_Header_pkt_len_bytes_we0,
        PL_Header_pkt_len_bytes_d0,
        PL_Ctrl_first_time_address0,
        PL_Ctrl_first_time_ce0,
        PL_Ctrl_first_time_we0,
        PL_Ctrl_first_time_d0,
        PL_Ctrl_first_timestamp_address0,
        PL_Ctrl_first_timestamp_ce0,
        PL_Ctrl_first_timestamp_we0,
        PL_Ctrl_first_timestamp_d0
);

parameter    ap_ST_fsm_state1 = 71'd1;
parameter    ap_ST_fsm_state2 = 71'd2;
parameter    ap_ST_fsm_state3 = 71'd4;
parameter    ap_ST_fsm_state4 = 71'd8;
parameter    ap_ST_fsm_state5 = 71'd16;
parameter    ap_ST_fsm_state6 = 71'd32;
parameter    ap_ST_fsm_state7 = 71'd64;
parameter    ap_ST_fsm_state8 = 71'd128;
parameter    ap_ST_fsm_state9 = 71'd256;
parameter    ap_ST_fsm_state10 = 71'd512;
parameter    ap_ST_fsm_state11 = 71'd1024;
parameter    ap_ST_fsm_state12 = 71'd2048;
parameter    ap_ST_fsm_state13 = 71'd4096;
parameter    ap_ST_fsm_state14 = 71'd8192;
parameter    ap_ST_fsm_state15 = 71'd16384;
parameter    ap_ST_fsm_state16 = 71'd32768;
parameter    ap_ST_fsm_state17 = 71'd65536;
parameter    ap_ST_fsm_state18 = 71'd131072;
parameter    ap_ST_fsm_state19 = 71'd262144;
parameter    ap_ST_fsm_state20 = 71'd524288;
parameter    ap_ST_fsm_state21 = 71'd1048576;
parameter    ap_ST_fsm_state22 = 71'd2097152;
parameter    ap_ST_fsm_state23 = 71'd4194304;
parameter    ap_ST_fsm_state24 = 71'd8388608;
parameter    ap_ST_fsm_state25 = 71'd16777216;
parameter    ap_ST_fsm_state26 = 71'd33554432;
parameter    ap_ST_fsm_state27 = 71'd67108864;
parameter    ap_ST_fsm_state28 = 71'd134217728;
parameter    ap_ST_fsm_state29 = 71'd268435456;
parameter    ap_ST_fsm_state30 = 71'd536870912;
parameter    ap_ST_fsm_state31 = 71'd1073741824;
parameter    ap_ST_fsm_state32 = 71'd2147483648;
parameter    ap_ST_fsm_state33 = 71'd4294967296;
parameter    ap_ST_fsm_state34 = 71'd8589934592;
parameter    ap_ST_fsm_state35 = 71'd17179869184;
parameter    ap_ST_fsm_state36 = 71'd34359738368;
parameter    ap_ST_fsm_state37 = 71'd68719476736;
parameter    ap_ST_fsm_state38 = 71'd137438953472;
parameter    ap_ST_fsm_state39 = 71'd274877906944;
parameter    ap_ST_fsm_state40 = 71'd549755813888;
parameter    ap_ST_fsm_state41 = 71'd1099511627776;
parameter    ap_ST_fsm_state42 = 71'd2199023255552;
parameter    ap_ST_fsm_state43 = 71'd4398046511104;
parameter    ap_ST_fsm_state44 = 71'd8796093022208;
parameter    ap_ST_fsm_state45 = 71'd17592186044416;
parameter    ap_ST_fsm_state46 = 71'd35184372088832;
parameter    ap_ST_fsm_state47 = 71'd70368744177664;
parameter    ap_ST_fsm_state48 = 71'd140737488355328;
parameter    ap_ST_fsm_state49 = 71'd281474976710656;
parameter    ap_ST_fsm_state50 = 71'd562949953421312;
parameter    ap_ST_fsm_state51 = 71'd1125899906842624;
parameter    ap_ST_fsm_state52 = 71'd2251799813685248;
parameter    ap_ST_fsm_state53 = 71'd4503599627370496;
parameter    ap_ST_fsm_state54 = 71'd9007199254740992;
parameter    ap_ST_fsm_state55 = 71'd18014398509481984;
parameter    ap_ST_fsm_state56 = 71'd36028797018963968;
parameter    ap_ST_fsm_state57 = 71'd72057594037927936;
parameter    ap_ST_fsm_state58 = 71'd144115188075855872;
parameter    ap_ST_fsm_state59 = 71'd288230376151711744;
parameter    ap_ST_fsm_state60 = 71'd576460752303423488;
parameter    ap_ST_fsm_state61 = 71'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 71'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 71'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 71'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 71'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 71'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 71'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 71'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 71'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 71'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 71'd1180591620717411303424;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_ps_ddr_AWVALID;
input   m_axi_ps_ddr_AWREADY;
output  [63:0] m_axi_ps_ddr_AWADDR;
output  [0:0] m_axi_ps_ddr_AWID;
output  [31:0] m_axi_ps_ddr_AWLEN;
output  [2:0] m_axi_ps_ddr_AWSIZE;
output  [1:0] m_axi_ps_ddr_AWBURST;
output  [1:0] m_axi_ps_ddr_AWLOCK;
output  [3:0] m_axi_ps_ddr_AWCACHE;
output  [2:0] m_axi_ps_ddr_AWPROT;
output  [3:0] m_axi_ps_ddr_AWQOS;
output  [3:0] m_axi_ps_ddr_AWREGION;
output  [0:0] m_axi_ps_ddr_AWUSER;
output   m_axi_ps_ddr_WVALID;
input   m_axi_ps_ddr_WREADY;
output  [7:0] m_axi_ps_ddr_WDATA;
output  [0:0] m_axi_ps_ddr_WSTRB;
output   m_axi_ps_ddr_WLAST;
output  [0:0] m_axi_ps_ddr_WID;
output  [0:0] m_axi_ps_ddr_WUSER;
output   m_axi_ps_ddr_ARVALID;
input   m_axi_ps_ddr_ARREADY;
output  [63:0] m_axi_ps_ddr_ARADDR;
output  [0:0] m_axi_ps_ddr_ARID;
output  [31:0] m_axi_ps_ddr_ARLEN;
output  [2:0] m_axi_ps_ddr_ARSIZE;
output  [1:0] m_axi_ps_ddr_ARBURST;
output  [1:0] m_axi_ps_ddr_ARLOCK;
output  [3:0] m_axi_ps_ddr_ARCACHE;
output  [2:0] m_axi_ps_ddr_ARPROT;
output  [3:0] m_axi_ps_ddr_ARQOS;
output  [3:0] m_axi_ps_ddr_ARREGION;
output  [0:0] m_axi_ps_ddr_ARUSER;
input   m_axi_ps_ddr_RVALID;
output   m_axi_ps_ddr_RREADY;
input  [7:0] m_axi_ps_ddr_RDATA;
input   m_axi_ps_ddr_RLAST;
input  [0:0] m_axi_ps_ddr_RID;
input  [10:0] m_axi_ps_ddr_RFIFONUM;
input  [0:0] m_axi_ps_ddr_RUSER;
input  [1:0] m_axi_ps_ddr_RRESP;
input   m_axi_ps_ddr_BVALID;
output   m_axi_ps_ddr_BREADY;
input  [1:0] m_axi_ps_ddr_BRESP;
input  [0:0] m_axi_ps_ddr_BID;
input  [0:0] m_axi_ps_ddr_BUSER;
input  [63:0] ddr_header;
input  [2:0] device_id;
output  [10:0] uart_fifo_address0;
output   uart_fifo_ce0;
input  [7:0] uart_fifo_q0;
output  [2:0] PL_Ctrl_fifo_index_address0;
output   PL_Ctrl_fifo_index_ce0;
output   PL_Ctrl_fifo_index_we0;
output  [31:0] PL_Ctrl_fifo_index_d0;
output  [2:0] PL_Header_pkt_len_bytes_address0;
output   PL_Header_pkt_len_bytes_ce0;
output   PL_Header_pkt_len_bytes_we0;
output  [15:0] PL_Header_pkt_len_bytes_d0;
output  [2:0] PL_Ctrl_first_time_address0;
output   PL_Ctrl_first_time_ce0;
output   PL_Ctrl_first_time_we0;
output  [0:0] PL_Ctrl_first_time_d0;
output  [2:0] PL_Ctrl_first_timestamp_address0;
output   PL_Ctrl_first_timestamp_ce0;
output   PL_Ctrl_first_timestamp_we0;
output  [63:0] PL_Ctrl_first_timestamp_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_ps_ddr_AWVALID;
reg[63:0] m_axi_ps_ddr_AWADDR;
reg[0:0] m_axi_ps_ddr_AWID;
reg[31:0] m_axi_ps_ddr_AWLEN;
reg[2:0] m_axi_ps_ddr_AWSIZE;
reg[1:0] m_axi_ps_ddr_AWBURST;
reg[1:0] m_axi_ps_ddr_AWLOCK;
reg[3:0] m_axi_ps_ddr_AWCACHE;
reg[2:0] m_axi_ps_ddr_AWPROT;
reg[3:0] m_axi_ps_ddr_AWQOS;
reg[3:0] m_axi_ps_ddr_AWREGION;
reg[0:0] m_axi_ps_ddr_AWUSER;
reg m_axi_ps_ddr_WVALID;
reg[7:0] m_axi_ps_ddr_WDATA;
reg[0:0] m_axi_ps_ddr_WSTRB;
reg m_axi_ps_ddr_WLAST;
reg[0:0] m_axi_ps_ddr_WID;
reg[0:0] m_axi_ps_ddr_WUSER;
reg m_axi_ps_ddr_ARVALID;
reg m_axi_ps_ddr_RREADY;
reg m_axi_ps_ddr_BREADY;
reg PL_Ctrl_fifo_index_ce0;
reg PL_Ctrl_fifo_index_we0;
reg PL_Header_pkt_len_bytes_ce0;
reg PL_Header_pkt_len_bytes_we0;
reg PL_Ctrl_first_time_ce0;
reg PL_Ctrl_first_time_we0;
reg PL_Ctrl_first_timestamp_ce0;
reg PL_Ctrl_first_timestamp_we0;

(* fsm_encoding = "none" *) reg   [70:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] dropped_uart_counter;
reg    ps_ddr_blk_n_AR;
reg    ps_ddr_blk_n_R;
wire    ap_CS_fsm_state9;
reg    ps_ddr_blk_n_AW;
wire    ap_CS_fsm_state65;
reg    ps_ddr_blk_n_W;
wire    ap_CS_fsm_state66;
reg    ps_ddr_blk_n_B;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state64;
reg   [0:0] icmp_ln147_reg_754;
wire   [7:0] ringbuffer_header_bytes_q1;
reg   [7:0] reg_387;
wire    ap_CS_fsm_state11;
wire   [7:0] ringbuffer_header_bytes_q0;
wire    ap_CS_fsm_state48;
reg   [7:0] reg_392;
wire   [63:0] loop_index9_cast_fu_412_p1;
reg   [63:0] loop_index9_cast_reg_638;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond116_fu_416_p2;
reg   [7:0] ps_ddr_addr_read_reg_656;
reg   [7:0] ringbuffer_header_bytes_load_24_reg_671;
wire    ap_CS_fsm_state12;
reg   [7:0] ringbuffer_header_bytes_load_25_reg_676;
reg   [7:0] ringbuffer_header_bytes_load_30_reg_691;
wire    ap_CS_fsm_state13;
reg   [7:0] ringbuffer_header_bytes_load_31_reg_696;
wire    ap_CS_fsm_state14;
wire  signed [31:0] writeUartIndex_fu_443_p5;
reg  signed [31:0] writeUartIndex_reg_716;
wire    ap_CS_fsm_state47;
wire   [31:0] grp_fu_459_p2;
reg   [31:0] nextWriteUartIndex_reg_746;
wire    ap_CS_fsm_state49;
wire   [0:0] icmp_ln147_fu_477_p2;
wire   [63:0] add_ln154_1_fu_509_p2;
reg   [63:0] add_ln154_1_reg_758;
reg   [63:0] ps_ddr_addr_7_reg_764;
wire   [10:0] empty_78_fu_534_p2;
reg   [10:0] empty_78_reg_775;
wire    ap_CS_fsm_state51;
wire   [63:0] add_ln17_fu_541_p2;
reg   [63:0] add_ln17_reg_780;
wire    ap_CS_fsm_state56;
reg   [7:0] write_index_array_0_reg_791;
wire    ap_CS_fsm_state58;
reg   [7:0] write_index_array_1_reg_796;
reg   [7:0] write_index_array_2_reg_801;
wire   [7:0] write_index_array_3_fu_582_p1;
reg   [7:0] write_index_array_3_reg_806;
wire   [7:0] add_ln149_1_fu_606_p2;
reg   [7:0] add_ln149_1_reg_811;
reg   [4:0] ringbuffer_header_bytes_address0;
reg    ringbuffer_header_bytes_ce0;
reg    ringbuffer_header_bytes_we0;
reg   [4:0] ringbuffer_header_bytes_address1;
reg    ringbuffer_header_bytes_ce1;
wire    grp_ddr_write_1_Pipeline_1_fu_366_ap_start;
wire    grp_ddr_write_1_Pipeline_1_fu_366_ap_done;
wire    grp_ddr_write_1_Pipeline_1_fu_366_ap_idle;
wire    grp_ddr_write_1_Pipeline_1_fu_366_ap_ready;
wire    grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWVALID;
wire   [63:0] grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWADDR;
wire   [0:0] grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWID;
wire   [31:0] grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWLEN;
wire   [2:0] grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWSIZE;
wire   [1:0] grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWBURST;
wire   [1:0] grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWLOCK;
wire   [3:0] grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWCACHE;
wire   [2:0] grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWPROT;
wire   [3:0] grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWQOS;
wire   [3:0] grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWREGION;
wire   [0:0] grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWUSER;
wire    grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_WVALID;
wire   [7:0] grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_WDATA;
wire   [0:0] grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_WSTRB;
wire    grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_WLAST;
wire   [0:0] grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_WID;
wire   [0:0] grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_WUSER;
wire    grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_ARVALID;
wire   [63:0] grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_ARADDR;
wire   [0:0] grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_ARID;
wire   [31:0] grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_ARLEN;
wire   [2:0] grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_ARSIZE;
wire   [1:0] grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_ARBURST;
wire   [1:0] grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_ARLOCK;
wire   [3:0] grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_ARCACHE;
wire   [2:0] grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_ARPROT;
wire   [3:0] grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_ARQOS;
wire   [3:0] grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_ARREGION;
wire   [0:0] grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_ARUSER;
wire    grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_RREADY;
wire    grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_BREADY;
wire   [10:0] grp_ddr_write_1_Pipeline_1_fu_366_uart_fifo_address0;
wire    grp_ddr_write_1_Pipeline_1_fu_366_uart_fifo_ce0;
wire    grp_ddr_write_1_Pipeline_2_fu_376_ap_start;
wire    grp_ddr_write_1_Pipeline_2_fu_376_ap_done;
wire    grp_ddr_write_1_Pipeline_2_fu_376_ap_idle;
wire    grp_ddr_write_1_Pipeline_2_fu_376_ap_ready;
wire    grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWVALID;
wire   [63:0] grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWADDR;
wire   [0:0] grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWID;
wire   [31:0] grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWLEN;
wire   [2:0] grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWSIZE;
wire   [1:0] grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWBURST;
wire   [1:0] grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWLOCK;
wire   [3:0] grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWCACHE;
wire   [2:0] grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWPROT;
wire   [3:0] grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWQOS;
wire   [3:0] grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWREGION;
wire   [0:0] grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWUSER;
wire    grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_WVALID;
wire   [7:0] grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_WDATA;
wire   [0:0] grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_WSTRB;
wire    grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_WLAST;
wire   [0:0] grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_WID;
wire   [0:0] grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_WUSER;
wire    grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_ARVALID;
wire   [63:0] grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_ARADDR;
wire   [0:0] grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_ARID;
wire   [31:0] grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_ARLEN;
wire   [2:0] grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_ARSIZE;
wire   [1:0] grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_ARBURST;
wire   [1:0] grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_ARLOCK;
wire   [3:0] grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_ARCACHE;
wire   [2:0] grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_ARPROT;
wire   [3:0] grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_ARQOS;
wire   [3:0] grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_ARREGION;
wire   [0:0] grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_ARUSER;
wire    grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_RREADY;
wire    grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_BREADY;
reg    grp_ddr_write_1_Pipeline_1_fu_366_ap_start_reg;
wire    ap_CS_fsm_state52;
reg    grp_ddr_write_1_Pipeline_2_fu_376_ap_start_reg;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln155_1_fu_492_p1;
wire   [63:0] add_ln149_fu_514_p2;
reg    ap_block_state64;
wire   [15:0] add_ln148_fu_594_p2;
reg   [4:0] loop_index9_fu_134;
wire   [4:0] empty_77_fu_422_p2;
wire   [31:0] grp_fu_459_p0;
wire   [31:0] grp_fu_459_p1;
wire   [31:0] readUartIndex_fu_465_p5;
wire   [8:0] mul_ln154_fu_483_p1;
wire   [31:0] mul_ln154_fu_483_p2;
wire   [32:0] zext_ln155_fu_488_p1;
wire   [32:0] add_ln154_fu_499_p2;
wire   [63:0] zext_ln154_fu_505_p1;
wire   [2:0] empty_78_fu_534_p0;
wire   [8:0] empty_78_fu_534_p1;
wire   [7:0] trunc_ln148_fu_590_p1;
reg    grp_fu_459_ap_start;
wire    grp_fu_459_ap_done;
reg   [70:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
reg    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
reg    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
reg    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
reg    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
reg    ap_ST_fsm_state64_blk;
reg    ap_ST_fsm_state65_blk;
reg    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
reg    ap_ST_fsm_state71_blk;
wire   [10:0] empty_78_fu_534_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 71'd1;
#0 dropped_uart_counter = 16'd0;
#0 grp_ddr_write_1_Pipeline_1_fu_366_ap_start_reg = 1'b0;
#0 grp_ddr_write_1_Pipeline_2_fu_376_ap_start_reg = 1'b0;
end

clu_ddr_write_1_ringbuffer_header_bytes_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 28 ),
    .AddressWidth( 5 ))
ringbuffer_header_bytes_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ringbuffer_header_bytes_address0),
    .ce0(ringbuffer_header_bytes_ce0),
    .we0(ringbuffer_header_bytes_we0),
    .d0(ps_ddr_addr_read_reg_656),
    .q0(ringbuffer_header_bytes_q0),
    .address1(ringbuffer_header_bytes_address1),
    .ce1(ringbuffer_header_bytes_ce1),
    .q1(ringbuffer_header_bytes_q1)
);

clu_ddr_write_1_Pipeline_1 grp_ddr_write_1_Pipeline_1_fu_366(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_ddr_write_1_Pipeline_1_fu_366_ap_start),
    .ap_done(grp_ddr_write_1_Pipeline_1_fu_366_ap_done),
    .ap_idle(grp_ddr_write_1_Pipeline_1_fu_366_ap_idle),
    .ap_ready(grp_ddr_write_1_Pipeline_1_fu_366_ap_ready),
    .m_axi_ps_ddr_AWVALID(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWVALID),
    .m_axi_ps_ddr_AWREADY(m_axi_ps_ddr_AWREADY),
    .m_axi_ps_ddr_AWADDR(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWADDR),
    .m_axi_ps_ddr_AWID(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWID),
    .m_axi_ps_ddr_AWLEN(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWLEN),
    .m_axi_ps_ddr_AWSIZE(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWSIZE),
    .m_axi_ps_ddr_AWBURST(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWBURST),
    .m_axi_ps_ddr_AWLOCK(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWLOCK),
    .m_axi_ps_ddr_AWCACHE(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWCACHE),
    .m_axi_ps_ddr_AWPROT(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWPROT),
    .m_axi_ps_ddr_AWQOS(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWQOS),
    .m_axi_ps_ddr_AWREGION(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWREGION),
    .m_axi_ps_ddr_AWUSER(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWUSER),
    .m_axi_ps_ddr_WVALID(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_WVALID),
    .m_axi_ps_ddr_WREADY(m_axi_ps_ddr_WREADY),
    .m_axi_ps_ddr_WDATA(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_WDATA),
    .m_axi_ps_ddr_WSTRB(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_WSTRB),
    .m_axi_ps_ddr_WLAST(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_WLAST),
    .m_axi_ps_ddr_WID(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_WID),
    .m_axi_ps_ddr_WUSER(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_WUSER),
    .m_axi_ps_ddr_ARVALID(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_ARVALID),
    .m_axi_ps_ddr_ARREADY(1'b0),
    .m_axi_ps_ddr_ARADDR(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_ARADDR),
    .m_axi_ps_ddr_ARID(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_ARID),
    .m_axi_ps_ddr_ARLEN(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_ARLEN),
    .m_axi_ps_ddr_ARSIZE(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_ARSIZE),
    .m_axi_ps_ddr_ARBURST(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_ARBURST),
    .m_axi_ps_ddr_ARLOCK(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_ARLOCK),
    .m_axi_ps_ddr_ARCACHE(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_ARCACHE),
    .m_axi_ps_ddr_ARPROT(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_ARPROT),
    .m_axi_ps_ddr_ARQOS(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_ARQOS),
    .m_axi_ps_ddr_ARREGION(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_ARREGION),
    .m_axi_ps_ddr_ARUSER(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_ARUSER),
    .m_axi_ps_ddr_RVALID(1'b0),
    .m_axi_ps_ddr_RREADY(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_RREADY),
    .m_axi_ps_ddr_RDATA(8'd0),
    .m_axi_ps_ddr_RLAST(1'b0),
    .m_axi_ps_ddr_RID(1'd0),
    .m_axi_ps_ddr_RFIFONUM(11'd0),
    .m_axi_ps_ddr_RUSER(1'd0),
    .m_axi_ps_ddr_RRESP(2'd0),
    .m_axi_ps_ddr_BVALID(m_axi_ps_ddr_BVALID),
    .m_axi_ps_ddr_BREADY(grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_BREADY),
    .m_axi_ps_ddr_BRESP(m_axi_ps_ddr_BRESP),
    .m_axi_ps_ddr_BID(m_axi_ps_ddr_BID),
    .m_axi_ps_ddr_BUSER(m_axi_ps_ddr_BUSER),
    .add_ln154_1(add_ln154_1_reg_758),
    .empty(empty_78_reg_775),
    .uart_fifo_address0(grp_ddr_write_1_Pipeline_1_fu_366_uart_fifo_address0),
    .uart_fifo_ce0(grp_ddr_write_1_Pipeline_1_fu_366_uart_fifo_ce0),
    .uart_fifo_q0(uart_fifo_q0)
);

clu_ddr_write_1_Pipeline_2 grp_ddr_write_1_Pipeline_2_fu_376(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_ddr_write_1_Pipeline_2_fu_376_ap_start),
    .ap_done(grp_ddr_write_1_Pipeline_2_fu_376_ap_done),
    .ap_idle(grp_ddr_write_1_Pipeline_2_fu_376_ap_idle),
    .ap_ready(grp_ddr_write_1_Pipeline_2_fu_376_ap_ready),
    .m_axi_ps_ddr_AWVALID(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWVALID),
    .m_axi_ps_ddr_AWREADY(m_axi_ps_ddr_AWREADY),
    .m_axi_ps_ddr_AWADDR(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWADDR),
    .m_axi_ps_ddr_AWID(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWID),
    .m_axi_ps_ddr_AWLEN(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWLEN),
    .m_axi_ps_ddr_AWSIZE(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWSIZE),
    .m_axi_ps_ddr_AWBURST(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWBURST),
    .m_axi_ps_ddr_AWLOCK(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWLOCK),
    .m_axi_ps_ddr_AWCACHE(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWCACHE),
    .m_axi_ps_ddr_AWPROT(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWPROT),
    .m_axi_ps_ddr_AWQOS(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWQOS),
    .m_axi_ps_ddr_AWREGION(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWREGION),
    .m_axi_ps_ddr_AWUSER(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWUSER),
    .m_axi_ps_ddr_WVALID(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_WVALID),
    .m_axi_ps_ddr_WREADY(m_axi_ps_ddr_WREADY),
    .m_axi_ps_ddr_WDATA(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_WDATA),
    .m_axi_ps_ddr_WSTRB(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_WSTRB),
    .m_axi_ps_ddr_WLAST(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_WLAST),
    .m_axi_ps_ddr_WID(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_WID),
    .m_axi_ps_ddr_WUSER(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_WUSER),
    .m_axi_ps_ddr_ARVALID(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_ARVALID),
    .m_axi_ps_ddr_ARREADY(1'b0),
    .m_axi_ps_ddr_ARADDR(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_ARADDR),
    .m_axi_ps_ddr_ARID(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_ARID),
    .m_axi_ps_ddr_ARLEN(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_ARLEN),
    .m_axi_ps_ddr_ARSIZE(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_ARSIZE),
    .m_axi_ps_ddr_ARBURST(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_ARBURST),
    .m_axi_ps_ddr_ARLOCK(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_ARLOCK),
    .m_axi_ps_ddr_ARCACHE(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_ARCACHE),
    .m_axi_ps_ddr_ARPROT(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_ARPROT),
    .m_axi_ps_ddr_ARQOS(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_ARQOS),
    .m_axi_ps_ddr_ARREGION(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_ARREGION),
    .m_axi_ps_ddr_ARUSER(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_ARUSER),
    .m_axi_ps_ddr_RVALID(1'b0),
    .m_axi_ps_ddr_RREADY(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_RREADY),
    .m_axi_ps_ddr_RDATA(8'd0),
    .m_axi_ps_ddr_RLAST(1'b0),
    .m_axi_ps_ddr_RID(1'd0),
    .m_axi_ps_ddr_RFIFONUM(11'd0),
    .m_axi_ps_ddr_RUSER(1'd0),
    .m_axi_ps_ddr_RRESP(2'd0),
    .m_axi_ps_ddr_BVALID(m_axi_ps_ddr_BVALID),
    .m_axi_ps_ddr_BREADY(grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_BREADY),
    .m_axi_ps_ddr_BRESP(m_axi_ps_ddr_BRESP),
    .m_axi_ps_ddr_BID(m_axi_ps_ddr_BID),
    .m_axi_ps_ddr_BUSER(m_axi_ps_ddr_BUSER),
    .add_ln17(add_ln17_reg_780),
    .write_index_array_0(write_index_array_0_reg_791),
    .write_index_array_1(write_index_array_1_reg_796),
    .write_index_array_2(write_index_array_2_reg_801),
    .write_index_array_3(write_index_array_3_reg_806)
);

clu_urem_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
urem_32ns_32ns_32_36_seq_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_459_ap_start),
    .done(grp_fu_459_ap_done),
    .din0(grp_fu_459_p0),
    .din1(grp_fu_459_p1),
    .ce(1'b1),
    .dout(grp_fu_459_p2)
);

clu_mul_32s_9ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 32 ))
mul_32s_9ns_32_1_1_U14(
    .din0(writeUartIndex_reg_716),
    .din1(mul_ln154_fu_483_p1),
    .dout(mul_ln154_fu_483_p2)
);

clu_mul_3ns_9ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 11 ))
mul_3ns_9ns_11_1_1_U15(
    .din0(empty_78_fu_534_p0),
    .din1(empty_78_fu_534_p1),
    .dout(empty_78_fu_534_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_ddr_write_1_Pipeline_1_fu_366_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state51)) begin
            grp_ddr_write_1_Pipeline_1_fu_366_ap_start_reg <= 1'b1;
        end else if ((grp_ddr_write_1_Pipeline_1_fu_366_ap_ready == 1'b1)) begin
            grp_ddr_write_1_Pipeline_1_fu_366_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_ddr_write_1_Pipeline_2_fu_376_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state58)) begin
            grp_ddr_write_1_Pipeline_2_fu_376_ap_start_reg <= 1'b1;
        end else if ((grp_ddr_write_1_Pipeline_2_fu_376_ap_ready == 1'b1)) begin
            grp_ddr_write_1_Pipeline_2_fu_376_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (m_axi_ps_ddr_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        loop_index9_fu_134 <= 5'd0;
    end else if (((exitcond116_fu_416_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        loop_index9_fu_134 <= empty_77_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        reg_387 <= ringbuffer_header_bytes_q0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        reg_387 <= ringbuffer_header_bytes_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        reg_392 <= ringbuffer_header_bytes_q1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        reg_392 <= ringbuffer_header_bytes_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        add_ln149_1_reg_811 <= add_ln149_1_fu_606_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln147_fu_477_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state49))) begin
        add_ln154_1_reg_758 <= add_ln154_1_fu_509_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        add_ln17_reg_780 <= add_ln17_fu_541_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_ps_ddr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state65))) begin
        dropped_uart_counter <= add_ln148_fu_594_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        empty_78_reg_775 <= empty_78_fu_534_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        icmp_ln147_reg_754 <= icmp_ln147_fu_477_p2;
        nextWriteUartIndex_reg_746 <= grp_fu_459_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        loop_index9_cast_reg_638[4 : 0] <= loop_index9_cast_fu_412_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln147_fu_477_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state49))) begin
        ps_ddr_addr_7_reg_764 <= add_ln149_fu_514_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ps_ddr_addr_read_reg_656 <= m_axi_ps_ddr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ringbuffer_header_bytes_load_24_reg_671 <= ringbuffer_header_bytes_q0;
        ringbuffer_header_bytes_load_25_reg_676 <= ringbuffer_header_bytes_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ringbuffer_header_bytes_load_30_reg_691 <= ringbuffer_header_bytes_q0;
        ringbuffer_header_bytes_load_31_reg_696 <= ringbuffer_header_bytes_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        writeUartIndex_reg_716 <= writeUartIndex_fu_443_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        write_index_array_0_reg_791 <= {{nextWriteUartIndex_reg_746[31:24]}};
        write_index_array_1_reg_796 <= {{nextWriteUartIndex_reg_746[23:16]}};
        write_index_array_2_reg_801 <= {{nextWriteUartIndex_reg_746[15:8]}};
        write_index_array_3_reg_806 <= write_index_array_3_fu_582_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        PL_Ctrl_fifo_index_ce0 = 1'b1;
    end else begin
        PL_Ctrl_fifo_index_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln147_fu_477_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state49))) begin
        PL_Ctrl_fifo_index_we0 = 1'b1;
    end else begin
        PL_Ctrl_fifo_index_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        PL_Ctrl_first_time_ce0 = 1'b1;
    end else begin
        PL_Ctrl_first_time_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln147_fu_477_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state49))) begin
        PL_Ctrl_first_time_we0 = 1'b1;
    end else begin
        PL_Ctrl_first_time_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        PL_Ctrl_first_timestamp_ce0 = 1'b1;
    end else begin
        PL_Ctrl_first_timestamp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln147_fu_477_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state49))) begin
        PL_Ctrl_first_timestamp_we0 = 1'b1;
    end else begin
        PL_Ctrl_first_timestamp_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        PL_Header_pkt_len_bytes_ce0 = 1'b1;
    end else begin
        PL_Header_pkt_len_bytes_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln147_fu_477_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state49))) begin
        PL_Header_pkt_len_bytes_we0 = 1'b1;
    end else begin
        PL_Header_pkt_len_bytes_we0 = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if (((ap_start == 1'b0) | (m_axi_ps_ddr_ARREADY == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((m_axi_ps_ddr_AWREADY == 1'b0)) begin
        ap_ST_fsm_state50_blk = 1'b1;
    end else begin
        ap_ST_fsm_state50_blk = 1'b0;
    end
end

assign ap_ST_fsm_state51_blk = 1'b0;

always @ (*) begin
    if ((grp_ddr_write_1_Pipeline_1_fu_366_ap_done == 1'b0)) begin
        ap_ST_fsm_state52_blk = 1'b1;
    end else begin
        ap_ST_fsm_state52_blk = 1'b0;
    end
end

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

always @ (*) begin
    if (((m_axi_ps_ddr_AWREADY == 1'b0) | (m_axi_ps_ddr_BVALID == 1'b0))) begin
        ap_ST_fsm_state57_blk = 1'b1;
    end else begin
        ap_ST_fsm_state57_blk = 1'b0;
    end
end

assign ap_ST_fsm_state58_blk = 1'b0;

always @ (*) begin
    if ((grp_ddr_write_1_Pipeline_2_fu_376_ap_done == 1'b0)) begin
        ap_ST_fsm_state59_blk = 1'b1;
    end else begin
        ap_ST_fsm_state59_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln147_reg_754 == 1'd0) & (m_axi_ps_ddr_BVALID == 1'b0))) begin
        ap_ST_fsm_state64_blk = 1'b1;
    end else begin
        ap_ST_fsm_state64_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_ps_ddr_AWREADY == 1'b0)) begin
        ap_ST_fsm_state65_blk = 1'b1;
    end else begin
        ap_ST_fsm_state65_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_ps_ddr_WREADY == 1'b0)) begin
        ap_ST_fsm_state66_blk = 1'b1;
    end else begin
        ap_ST_fsm_state66_blk = 1'b0;
    end
end

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

always @ (*) begin
    if ((m_axi_ps_ddr_BVALID == 1'b0)) begin
        ap_ST_fsm_state71_blk = 1'b1;
    end else begin
        ap_ST_fsm_state71_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((m_axi_ps_ddr_RVALID == 1'b0)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | (~((icmp_ln147_reg_754 == 1'd0) & (m_axi_ps_ddr_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state64)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln147_reg_754 == 1'd0) & (m_axi_ps_ddr_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state64))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_459_ap_start = 1'b1;
    end else begin
        grp_fu_459_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (m_axi_ps_ddr_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_ps_ddr_ARVALID = 1'b1;
    end else begin
        m_axi_ps_ddr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_ps_ddr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state65))) begin
        m_axi_ps_ddr_AWADDR = ps_ddr_addr_7_reg_764;
    end else if ((~((m_axi_ps_ddr_AWREADY == 1'b0) | (m_axi_ps_ddr_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state57))) begin
        m_axi_ps_ddr_AWADDR = add_ln17_reg_780;
    end else if (((m_axi_ps_ddr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state50))) begin
        m_axi_ps_ddr_AWADDR = add_ln154_1_reg_758;
    end else if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58))) begin
        m_axi_ps_ddr_AWADDR = grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWADDR;
    end else if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51))) begin
        m_axi_ps_ddr_AWADDR = grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWADDR;
    end else begin
        m_axi_ps_ddr_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58))) begin
        m_axi_ps_ddr_AWBURST = grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWBURST;
    end else if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51))) begin
        m_axi_ps_ddr_AWBURST = grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWBURST;
    end else begin
        m_axi_ps_ddr_AWBURST = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58))) begin
        m_axi_ps_ddr_AWCACHE = grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWCACHE;
    end else if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51))) begin
        m_axi_ps_ddr_AWCACHE = grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWCACHE;
    end else begin
        m_axi_ps_ddr_AWCACHE = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58))) begin
        m_axi_ps_ddr_AWID = grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWID;
    end else if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51))) begin
        m_axi_ps_ddr_AWID = grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWID;
    end else begin
        m_axi_ps_ddr_AWID = 1'd0;
    end
end

always @ (*) begin
    if (((m_axi_ps_ddr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state65))) begin
        m_axi_ps_ddr_AWLEN = 32'd1;
    end else if ((~((m_axi_ps_ddr_AWREADY == 1'b0) | (m_axi_ps_ddr_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state57))) begin
        m_axi_ps_ddr_AWLEN = 32'd4;
    end else if (((m_axi_ps_ddr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state50))) begin
        m_axi_ps_ddr_AWLEN = 32'd204;
    end else if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58))) begin
        m_axi_ps_ddr_AWLEN = grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWLEN;
    end else if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51))) begin
        m_axi_ps_ddr_AWLEN = grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWLEN;
    end else begin
        m_axi_ps_ddr_AWLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58))) begin
        m_axi_ps_ddr_AWLOCK = grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWLOCK;
    end else if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51))) begin
        m_axi_ps_ddr_AWLOCK = grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWLOCK;
    end else begin
        m_axi_ps_ddr_AWLOCK = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58))) begin
        m_axi_ps_ddr_AWPROT = grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWPROT;
    end else if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51))) begin
        m_axi_ps_ddr_AWPROT = grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWPROT;
    end else begin
        m_axi_ps_ddr_AWPROT = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58))) begin
        m_axi_ps_ddr_AWQOS = grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWQOS;
    end else if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51))) begin
        m_axi_ps_ddr_AWQOS = grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWQOS;
    end else begin
        m_axi_ps_ddr_AWQOS = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58))) begin
        m_axi_ps_ddr_AWREGION = grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWREGION;
    end else if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51))) begin
        m_axi_ps_ddr_AWREGION = grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWREGION;
    end else begin
        m_axi_ps_ddr_AWREGION = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58))) begin
        m_axi_ps_ddr_AWSIZE = grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWSIZE;
    end else if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51))) begin
        m_axi_ps_ddr_AWSIZE = grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWSIZE;
    end else begin
        m_axi_ps_ddr_AWSIZE = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58))) begin
        m_axi_ps_ddr_AWUSER = grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWUSER;
    end else if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51))) begin
        m_axi_ps_ddr_AWUSER = grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWUSER;
    end else begin
        m_axi_ps_ddr_AWUSER = 1'd0;
    end
end

always @ (*) begin
    if (((~((m_axi_ps_ddr_AWREADY == 1'b0) | (m_axi_ps_ddr_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state57)) | ((m_axi_ps_ddr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state50)) | ((m_axi_ps_ddr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state65)))) begin
        m_axi_ps_ddr_AWVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58))) begin
        m_axi_ps_ddr_AWVALID = grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_AWVALID;
    end else if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51))) begin
        m_axi_ps_ddr_AWVALID = grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_AWVALID;
    end else begin
        m_axi_ps_ddr_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((icmp_ln147_reg_754 == 1'd0) & (m_axi_ps_ddr_BVALID == 1'b0)) & (icmp_ln147_reg_754 == 1'd0) & (1'b1 == ap_CS_fsm_state64)) | (~((m_axi_ps_ddr_AWREADY == 1'b0) | (m_axi_ps_ddr_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state57)) | ((1'b1 == ap_CS_fsm_state71) & (m_axi_ps_ddr_BVALID == 1'b1)))) begin
        m_axi_ps_ddr_BREADY = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58))) begin
        m_axi_ps_ddr_BREADY = grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_BREADY;
    end else if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51))) begin
        m_axi_ps_ddr_BREADY = grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_BREADY;
    end else begin
        m_axi_ps_ddr_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (m_axi_ps_ddr_RVALID == 1'b1))) begin
        m_axi_ps_ddr_RREADY = 1'b1;
    end else begin
        m_axi_ps_ddr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        m_axi_ps_ddr_WDATA = add_ln149_1_reg_811;
    end else if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58))) begin
        m_axi_ps_ddr_WDATA = grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_WDATA;
    end else if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51))) begin
        m_axi_ps_ddr_WDATA = grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_WDATA;
    end else begin
        m_axi_ps_ddr_WDATA = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58))) begin
        m_axi_ps_ddr_WID = grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_WID;
    end else if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51))) begin
        m_axi_ps_ddr_WID = grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_WID;
    end else begin
        m_axi_ps_ddr_WID = 1'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58))) begin
        m_axi_ps_ddr_WLAST = grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_WLAST;
    end else if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51))) begin
        m_axi_ps_ddr_WLAST = grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_WLAST;
    end else begin
        m_axi_ps_ddr_WLAST = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        m_axi_ps_ddr_WSTRB = 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58))) begin
        m_axi_ps_ddr_WSTRB = grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_WSTRB;
    end else if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51))) begin
        m_axi_ps_ddr_WSTRB = grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_WSTRB;
    end else begin
        m_axi_ps_ddr_WSTRB = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58))) begin
        m_axi_ps_ddr_WUSER = grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_WUSER;
    end else if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51))) begin
        m_axi_ps_ddr_WUSER = grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_WUSER;
    end else begin
        m_axi_ps_ddr_WUSER = 1'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state66) & (m_axi_ps_ddr_WREADY == 1'b1))) begin
        m_axi_ps_ddr_WVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58))) begin
        m_axi_ps_ddr_WVALID = grp_ddr_write_1_Pipeline_2_fu_376_m_axi_ps_ddr_WVALID;
    end else if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51))) begin
        m_axi_ps_ddr_WVALID = grp_ddr_write_1_Pipeline_1_fu_366_m_axi_ps_ddr_WVALID;
    end else begin
        m_axi_ps_ddr_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ps_ddr_blk_n_AR = m_axi_ps_ddr_ARREADY;
    end else begin
        ps_ddr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state65))) begin
        ps_ddr_blk_n_AW = m_axi_ps_ddr_AWREADY;
    end else begin
        ps_ddr_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state71) | ((icmp_ln147_reg_754 == 1'd0) & (1'b1 == ap_CS_fsm_state64)))) begin
        ps_ddr_blk_n_B = m_axi_ps_ddr_BVALID;
    end else begin
        ps_ddr_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ps_ddr_blk_n_R = m_axi_ps_ddr_RVALID;
    end else begin
        ps_ddr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        ps_ddr_blk_n_W = m_axi_ps_ddr_WREADY;
    end else begin
        ps_ddr_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        ringbuffer_header_bytes_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        ringbuffer_header_bytes_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        ringbuffer_header_bytes_address0 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        ringbuffer_header_bytes_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        ringbuffer_header_bytes_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        ringbuffer_header_bytes_address0 = loop_index9_cast_reg_638;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        ringbuffer_header_bytes_address0 = 64'd13;
    end else begin
        ringbuffer_header_bytes_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        ringbuffer_header_bytes_address1 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        ringbuffer_header_bytes_address1 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        ringbuffer_header_bytes_address1 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        ringbuffer_header_bytes_address1 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        ringbuffer_header_bytes_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        ringbuffer_header_bytes_address1 = 64'd12;
    end else begin
        ringbuffer_header_bytes_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state11))) begin
        ringbuffer_header_bytes_ce0 = 1'b1;
    end else begin
        ringbuffer_header_bytes_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state11))) begin
        ringbuffer_header_bytes_ce1 = 1'b1;
    end else begin
        ringbuffer_header_bytes_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ringbuffer_header_bytes_we0 = 1'b1;
    end else begin
        ringbuffer_header_bytes_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (m_axi_ps_ddr_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((exitcond116_fu_416_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (m_axi_ps_ddr_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            if (((icmp_ln147_fu_477_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state49))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state50 : begin
            if (((m_axi_ps_ddr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            if (((grp_ddr_write_1_Pipeline_1_fu_366_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state52))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            if ((~((m_axi_ps_ddr_AWREADY == 1'b0) | (m_axi_ps_ddr_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state57))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            if (((grp_ddr_write_1_Pipeline_2_fu_376_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            if ((~((icmp_ln147_reg_754 == 1'd0) & (m_axi_ps_ddr_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state64))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state65 : begin
            if (((m_axi_ps_ddr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state65))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        ap_ST_fsm_state66 : begin
            if (((1'b1 == ap_CS_fsm_state66) & (m_axi_ps_ddr_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            if (((1'b1 == ap_CS_fsm_state71) & (m_axi_ps_ddr_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign PL_Ctrl_fifo_index_address0 = zext_ln155_1_fu_492_p1;

assign PL_Ctrl_fifo_index_d0 = 32'd12;

assign PL_Ctrl_first_time_address0 = zext_ln155_1_fu_492_p1;

assign PL_Ctrl_first_time_d0 = 1'd1;

assign PL_Ctrl_first_timestamp_address0 = zext_ln155_1_fu_492_p1;

assign PL_Ctrl_first_timestamp_d0 = 64'd0;

assign PL_Header_pkt_len_bytes_address0 = zext_ln155_1_fu_492_p1;

assign PL_Header_pkt_len_bytes_d0 = 16'd0;

assign add_ln148_fu_594_p2 = (dropped_uart_counter + 16'd1);

assign add_ln149_1_fu_606_p2 = (trunc_ln148_fu_590_p1 + 8'd1);

assign add_ln149_fu_514_p2 = (ddr_header + 64'd4);

assign add_ln154_1_fu_509_p2 = (zext_ln154_fu_505_p1 + ddr_header);

assign add_ln154_fu_499_p2 = (zext_ln155_fu_488_p1 + 33'd28);

assign add_ln17_fu_541_p2 = (ddr_header + 64'd24);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state64 = ((icmp_ln147_reg_754 == 1'd0) & (m_axi_ps_ddr_BVALID == 1'b0));
end

assign empty_77_fu_422_p2 = (loop_index9_fu_134 + 5'd1);

assign empty_78_fu_534_p0 = empty_78_fu_534_p00;

assign empty_78_fu_534_p00 = device_id;

assign empty_78_fu_534_p1 = 11'd204;

assign exitcond116_fu_416_p2 = ((loop_index9_fu_134 == 5'd28) ? 1'b1 : 1'b0);

assign grp_ddr_write_1_Pipeline_1_fu_366_ap_start = grp_ddr_write_1_Pipeline_1_fu_366_ap_start_reg;

assign grp_ddr_write_1_Pipeline_2_fu_376_ap_start = grp_ddr_write_1_Pipeline_2_fu_376_ap_start_reg;

assign grp_fu_459_p0 = ($signed(writeUartIndex_fu_443_p5) + $signed(32'd1));

assign grp_fu_459_p1 = {{{{reg_387}, {reg_392}}, {ringbuffer_header_bytes_load_24_reg_671}}, {ringbuffer_header_bytes_load_25_reg_676}};

assign icmp_ln147_fu_477_p2 = ((grp_fu_459_p2 == readUartIndex_fu_465_p5) ? 1'b1 : 1'b0);

assign loop_index9_cast_fu_412_p1 = loop_index9_fu_134;

assign m_axi_ps_ddr_ARADDR = ddr_header;

assign m_axi_ps_ddr_ARBURST = 2'd0;

assign m_axi_ps_ddr_ARCACHE = 4'd0;

assign m_axi_ps_ddr_ARID = 1'd0;

assign m_axi_ps_ddr_ARLEN = 32'd28;

assign m_axi_ps_ddr_ARLOCK = 2'd0;

assign m_axi_ps_ddr_ARPROT = 3'd0;

assign m_axi_ps_ddr_ARQOS = 4'd0;

assign m_axi_ps_ddr_ARREGION = 4'd0;

assign m_axi_ps_ddr_ARSIZE = 3'd0;

assign m_axi_ps_ddr_ARUSER = 1'd0;

assign mul_ln154_fu_483_p1 = 32'd204;

assign readUartIndex_fu_465_p5 = {{{{reg_387}, {reg_392}}, {ringbuffer_header_bytes_q0}}, {ringbuffer_header_bytes_q1}};

assign trunc_ln148_fu_590_p1 = dropped_uart_counter[7:0];

assign uart_fifo_address0 = grp_ddr_write_1_Pipeline_1_fu_366_uart_fifo_address0;

assign uart_fifo_ce0 = grp_ddr_write_1_Pipeline_1_fu_366_uart_fifo_ce0;

assign writeUartIndex_fu_443_p5 = {{{{ringbuffer_header_bytes_load_30_reg_691}, {ringbuffer_header_bytes_load_31_reg_696}}, {ringbuffer_header_bytes_q0}}, {ringbuffer_header_bytes_q1}};

assign write_index_array_3_fu_582_p1 = nextWriteUartIndex_reg_746[7:0];

assign zext_ln154_fu_505_p1 = add_ln154_fu_499_p2;

assign zext_ln155_1_fu_492_p1 = device_id;

assign zext_ln155_fu_488_p1 = mul_ln154_fu_483_p2;

always @ (posedge ap_clk) begin
    loop_index9_cast_reg_638[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //clu_ddr_write_1
