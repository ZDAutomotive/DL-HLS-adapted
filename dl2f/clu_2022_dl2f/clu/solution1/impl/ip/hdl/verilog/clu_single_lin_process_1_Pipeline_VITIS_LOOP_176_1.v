// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module clu_single_lin_process_1_Pipeline_VITIS_LOOP_176_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_lin_addr_AWVALID,
        m_axi_lin_addr_AWREADY,
        m_axi_lin_addr_AWADDR,
        m_axi_lin_addr_AWID,
        m_axi_lin_addr_AWLEN,
        m_axi_lin_addr_AWSIZE,
        m_axi_lin_addr_AWBURST,
        m_axi_lin_addr_AWLOCK,
        m_axi_lin_addr_AWCACHE,
        m_axi_lin_addr_AWPROT,
        m_axi_lin_addr_AWQOS,
        m_axi_lin_addr_AWREGION,
        m_axi_lin_addr_AWUSER,
        m_axi_lin_addr_WVALID,
        m_axi_lin_addr_WREADY,
        m_axi_lin_addr_WDATA,
        m_axi_lin_addr_WSTRB,
        m_axi_lin_addr_WLAST,
        m_axi_lin_addr_WID,
        m_axi_lin_addr_WUSER,
        m_axi_lin_addr_ARVALID,
        m_axi_lin_addr_ARREADY,
        m_axi_lin_addr_ARADDR,
        m_axi_lin_addr_ARID,
        m_axi_lin_addr_ARLEN,
        m_axi_lin_addr_ARSIZE,
        m_axi_lin_addr_ARBURST,
        m_axi_lin_addr_ARLOCK,
        m_axi_lin_addr_ARCACHE,
        m_axi_lin_addr_ARPROT,
        m_axi_lin_addr_ARQOS,
        m_axi_lin_addr_ARREGION,
        m_axi_lin_addr_ARUSER,
        m_axi_lin_addr_RVALID,
        m_axi_lin_addr_RREADY,
        m_axi_lin_addr_RDATA,
        m_axi_lin_addr_RLAST,
        m_axi_lin_addr_RID,
        m_axi_lin_addr_RFIFONUM,
        m_axi_lin_addr_RUSER,
        m_axi_lin_addr_RRESP,
        m_axi_lin_addr_BVALID,
        m_axi_lin_addr_BREADY,
        m_axi_lin_addr_BRESP,
        m_axi_lin_addr_BID,
        m_axi_lin_addr_BUSER,
        sext_ln81_2,
        add_ln176,
        lin_frame_address0,
        lin_frame_ce0,
        lin_frame_we0,
        lin_frame_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_lin_addr_AWVALID;
input   m_axi_lin_addr_AWREADY;
output  [31:0] m_axi_lin_addr_AWADDR;
output  [0:0] m_axi_lin_addr_AWID;
output  [31:0] m_axi_lin_addr_AWLEN;
output  [2:0] m_axi_lin_addr_AWSIZE;
output  [1:0] m_axi_lin_addr_AWBURST;
output  [1:0] m_axi_lin_addr_AWLOCK;
output  [3:0] m_axi_lin_addr_AWCACHE;
output  [2:0] m_axi_lin_addr_AWPROT;
output  [3:0] m_axi_lin_addr_AWQOS;
output  [3:0] m_axi_lin_addr_AWREGION;
output  [0:0] m_axi_lin_addr_AWUSER;
output   m_axi_lin_addr_WVALID;
input   m_axi_lin_addr_WREADY;
output  [31:0] m_axi_lin_addr_WDATA;
output  [3:0] m_axi_lin_addr_WSTRB;
output   m_axi_lin_addr_WLAST;
output  [0:0] m_axi_lin_addr_WID;
output  [0:0] m_axi_lin_addr_WUSER;
output   m_axi_lin_addr_ARVALID;
input   m_axi_lin_addr_ARREADY;
output  [31:0] m_axi_lin_addr_ARADDR;
output  [0:0] m_axi_lin_addr_ARID;
output  [31:0] m_axi_lin_addr_ARLEN;
output  [2:0] m_axi_lin_addr_ARSIZE;
output  [1:0] m_axi_lin_addr_ARBURST;
output  [1:0] m_axi_lin_addr_ARLOCK;
output  [3:0] m_axi_lin_addr_ARCACHE;
output  [2:0] m_axi_lin_addr_ARPROT;
output  [3:0] m_axi_lin_addr_ARQOS;
output  [3:0] m_axi_lin_addr_ARREGION;
output  [0:0] m_axi_lin_addr_ARUSER;
input   m_axi_lin_addr_RVALID;
output   m_axi_lin_addr_RREADY;
input  [31:0] m_axi_lin_addr_RDATA;
input   m_axi_lin_addr_RLAST;
input  [0:0] m_axi_lin_addr_RID;
input  [8:0] m_axi_lin_addr_RFIFONUM;
input  [0:0] m_axi_lin_addr_RUSER;
input  [1:0] m_axi_lin_addr_RRESP;
input   m_axi_lin_addr_BVALID;
output   m_axi_lin_addr_BREADY;
input  [1:0] m_axi_lin_addr_BRESP;
input  [0:0] m_axi_lin_addr_BID;
input  [0:0] m_axi_lin_addr_BUSER;
input  [29:0] sext_ln81_2;
input  [4:0] add_ln176;
output  [4:0] lin_frame_address0;
output   lin_frame_ce0;
output   lin_frame_we0;
output  [7:0] lin_frame_d0;

reg ap_idle;
reg m_axi_lin_addr_ARVALID;
reg m_axi_lin_addr_RREADY;
reg lin_frame_ce0;
reg lin_frame_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln176_reg_166;
reg    ap_block_state2_io;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
reg    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln176_fu_111_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    lin_addr_blk_n_AR;
wire    ap_block_pp0_stage0;
reg    lin_addr_blk_n_R;
wire  signed [31:0] sext_ln81_2_cast_fu_99_p1;
reg  signed [31:0] sext_ln81_2_cast_reg_161;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] trunc_ln179_fu_123_p1;
reg   [3:0] trunc_ln179_reg_170;
reg   [3:0] trunc_ln179_reg_170_pp0_iter1_reg;
reg   [3:0] trunc_ln179_reg_170_pp0_iter2_reg;
reg   [3:0] trunc_ln179_reg_170_pp0_iter3_reg;
reg   [3:0] trunc_ln179_reg_170_pp0_iter4_reg;
reg   [3:0] trunc_ln179_reg_170_pp0_iter5_reg;
reg   [3:0] trunc_ln179_reg_170_pp0_iter6_reg;
reg   [3:0] trunc_ln179_reg_170_pp0_iter7_reg;
reg   [3:0] trunc_ln179_reg_170_pp0_iter8_reg;
wire   [7:0] reg_data_fu_138_p1;
reg   [7:0] reg_data_reg_181;
reg    ap_condition_exit_pp0_iter1_stage0;
wire   [31:0] zext_ln179_fu_149_p1;
reg   [4:0] i_fu_58;
wire   [4:0] add_ln176_1_fu_117_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i_1;
wire   [4:0] zext_ln179_cast_fu_142_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_done_reg = 1'b0;
end

clu_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter8_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln176_fu_111_p2 == 1'd0))) begin
            i_fu_58 <= add_ln176_1_fu_117_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_58 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln176_reg_166 <= icmp_ln176_fu_111_p2;
        sext_ln81_2_cast_reg_161 <= sext_ln81_2_cast_fu_99_p1;
        trunc_ln179_reg_170_pp0_iter1_reg <= trunc_ln179_reg_170;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        reg_data_reg_181 <= reg_data_fu_138_p1;
        trunc_ln179_reg_170_pp0_iter2_reg <= trunc_ln179_reg_170_pp0_iter1_reg;
        trunc_ln179_reg_170_pp0_iter3_reg <= trunc_ln179_reg_170_pp0_iter2_reg;
        trunc_ln179_reg_170_pp0_iter4_reg <= trunc_ln179_reg_170_pp0_iter3_reg;
        trunc_ln179_reg_170_pp0_iter5_reg <= trunc_ln179_reg_170_pp0_iter4_reg;
        trunc_ln179_reg_170_pp0_iter6_reg <= trunc_ln179_reg_170_pp0_iter5_reg;
        trunc_ln179_reg_170_pp0_iter7_reg <= trunc_ln179_reg_170_pp0_iter6_reg;
        trunc_ln179_reg_170_pp0_iter8_reg <= trunc_ln179_reg_170_pp0_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln176_fu_111_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln179_reg_170 <= trunc_ln179_fu_123_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln176_fu_111_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln176_reg_166 == 1'd1))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter8_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_58;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln176_reg_166 == 1'd0))) begin
        lin_addr_blk_n_AR = m_axi_lin_addr_ARREADY;
    end else begin
        lin_addr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        lin_addr_blk_n_R = m_axi_lin_addr_RVALID;
    end else begin
        lin_addr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lin_frame_ce0 = 1'b1;
    end else begin
        lin_frame_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lin_frame_we0 = 1'b1;
    end else begin
        lin_frame_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln176_reg_166 == 1'd0))) begin
        m_axi_lin_addr_ARVALID = 1'b1;
    end else begin
        m_axi_lin_addr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_lin_addr_RREADY = 1'b1;
    end else begin
        m_axi_lin_addr_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln176_1_fu_117_p2 = (ap_sig_allocacmp_i_1 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_lin_addr_RVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_lin_addr_RVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((m_axi_lin_addr_ARREADY == 1'b0) & (icmp_ln176_reg_166 == 1'd0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter8 = (m_axi_lin_addr_RVALID == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln176_fu_111_p2 = ((ap_sig_allocacmp_i_1 == add_ln176) ? 1'b1 : 1'b0);

assign lin_frame_address0 = zext_ln179_fu_149_p1;

assign lin_frame_d0 = reg_data_reg_181;

assign m_axi_lin_addr_ARADDR = sext_ln81_2_cast_reg_161;

assign m_axi_lin_addr_ARBURST = 2'd0;

assign m_axi_lin_addr_ARCACHE = 4'd0;

assign m_axi_lin_addr_ARID = 1'd0;

assign m_axi_lin_addr_ARLEN = 32'd1;

assign m_axi_lin_addr_ARLOCK = 2'd0;

assign m_axi_lin_addr_ARPROT = 3'd0;

assign m_axi_lin_addr_ARQOS = 4'd0;

assign m_axi_lin_addr_ARREGION = 4'd0;

assign m_axi_lin_addr_ARSIZE = 3'd0;

assign m_axi_lin_addr_ARUSER = 1'd0;

assign m_axi_lin_addr_AWADDR = 32'd0;

assign m_axi_lin_addr_AWBURST = 2'd0;

assign m_axi_lin_addr_AWCACHE = 4'd0;

assign m_axi_lin_addr_AWID = 1'd0;

assign m_axi_lin_addr_AWLEN = 32'd0;

assign m_axi_lin_addr_AWLOCK = 2'd0;

assign m_axi_lin_addr_AWPROT = 3'd0;

assign m_axi_lin_addr_AWQOS = 4'd0;

assign m_axi_lin_addr_AWREGION = 4'd0;

assign m_axi_lin_addr_AWSIZE = 3'd0;

assign m_axi_lin_addr_AWUSER = 1'd0;

assign m_axi_lin_addr_AWVALID = 1'b0;

assign m_axi_lin_addr_BREADY = 1'b0;

assign m_axi_lin_addr_WDATA = 32'd0;

assign m_axi_lin_addr_WID = 1'd0;

assign m_axi_lin_addr_WLAST = 1'b0;

assign m_axi_lin_addr_WSTRB = 4'd0;

assign m_axi_lin_addr_WUSER = 1'd0;

assign m_axi_lin_addr_WVALID = 1'b0;

assign reg_data_fu_138_p1 = m_axi_lin_addr_RDATA[7:0];

assign sext_ln81_2_cast_fu_99_p1 = $signed(sext_ln81_2);

assign trunc_ln179_fu_123_p1 = ap_sig_allocacmp_i_1[3:0];

assign zext_ln179_cast_fu_142_p3 = {{1'd1}, {trunc_ln179_reg_170_pp0_iter8_reg}};

assign zext_ln179_fu_149_p1 = zext_ln179_cast_fu_142_p3;

endmodule //clu_single_lin_process_1_Pipeline_VITIS_LOOP_176_1
