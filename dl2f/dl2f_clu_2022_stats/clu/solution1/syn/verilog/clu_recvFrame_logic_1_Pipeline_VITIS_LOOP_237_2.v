// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module clu_recvFrame_logic_1_Pipeline_VITIS_LOOP_237_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_can_addr_AWVALID,
        m_axi_can_addr_AWREADY,
        m_axi_can_addr_AWADDR,
        m_axi_can_addr_AWID,
        m_axi_can_addr_AWLEN,
        m_axi_can_addr_AWSIZE,
        m_axi_can_addr_AWBURST,
        m_axi_can_addr_AWLOCK,
        m_axi_can_addr_AWCACHE,
        m_axi_can_addr_AWPROT,
        m_axi_can_addr_AWQOS,
        m_axi_can_addr_AWREGION,
        m_axi_can_addr_AWUSER,
        m_axi_can_addr_WVALID,
        m_axi_can_addr_WREADY,
        m_axi_can_addr_WDATA,
        m_axi_can_addr_WSTRB,
        m_axi_can_addr_WLAST,
        m_axi_can_addr_WID,
        m_axi_can_addr_WUSER,
        m_axi_can_addr_ARVALID,
        m_axi_can_addr_ARREADY,
        m_axi_can_addr_ARADDR,
        m_axi_can_addr_ARID,
        m_axi_can_addr_ARLEN,
        m_axi_can_addr_ARSIZE,
        m_axi_can_addr_ARBURST,
        m_axi_can_addr_ARLOCK,
        m_axi_can_addr_ARCACHE,
        m_axi_can_addr_ARPROT,
        m_axi_can_addr_ARQOS,
        m_axi_can_addr_ARREGION,
        m_axi_can_addr_ARUSER,
        m_axi_can_addr_RVALID,
        m_axi_can_addr_RREADY,
        m_axi_can_addr_RDATA,
        m_axi_can_addr_RLAST,
        m_axi_can_addr_RID,
        m_axi_can_addr_RFIFONUM,
        m_axi_can_addr_RUSER,
        m_axi_can_addr_RRESP,
        m_axi_can_addr_BVALID,
        m_axi_can_addr_BREADY,
        m_axi_can_addr_BRESP,
        m_axi_can_addr_BID,
        m_axi_can_addr_BUSER,
        zext_ln27,
        zext_ln223,
        canbase,
        can_frame_address0,
        can_frame_ce0,
        can_frame_we0,
        can_frame_d0,
        can_frame_address1,
        can_frame_ce1,
        can_frame_we1,
        can_frame_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_can_addr_AWVALID;
input   m_axi_can_addr_AWREADY;
output  [31:0] m_axi_can_addr_AWADDR;
output  [0:0] m_axi_can_addr_AWID;
output  [31:0] m_axi_can_addr_AWLEN;
output  [2:0] m_axi_can_addr_AWSIZE;
output  [1:0] m_axi_can_addr_AWBURST;
output  [1:0] m_axi_can_addr_AWLOCK;
output  [3:0] m_axi_can_addr_AWCACHE;
output  [2:0] m_axi_can_addr_AWPROT;
output  [3:0] m_axi_can_addr_AWQOS;
output  [3:0] m_axi_can_addr_AWREGION;
output  [0:0] m_axi_can_addr_AWUSER;
output   m_axi_can_addr_WVALID;
input   m_axi_can_addr_WREADY;
output  [31:0] m_axi_can_addr_WDATA;
output  [3:0] m_axi_can_addr_WSTRB;
output   m_axi_can_addr_WLAST;
output  [0:0] m_axi_can_addr_WID;
output  [0:0] m_axi_can_addr_WUSER;
output   m_axi_can_addr_ARVALID;
input   m_axi_can_addr_ARREADY;
output  [31:0] m_axi_can_addr_ARADDR;
output  [0:0] m_axi_can_addr_ARID;
output  [31:0] m_axi_can_addr_ARLEN;
output  [2:0] m_axi_can_addr_ARSIZE;
output  [1:0] m_axi_can_addr_ARBURST;
output  [1:0] m_axi_can_addr_ARLOCK;
output  [3:0] m_axi_can_addr_ARCACHE;
output  [2:0] m_axi_can_addr_ARPROT;
output  [3:0] m_axi_can_addr_ARQOS;
output  [3:0] m_axi_can_addr_ARREGION;
output  [0:0] m_axi_can_addr_ARUSER;
input   m_axi_can_addr_RVALID;
output   m_axi_can_addr_RREADY;
input  [31:0] m_axi_can_addr_RDATA;
input   m_axi_can_addr_RLAST;
input  [0:0] m_axi_can_addr_RID;
input  [8:0] m_axi_can_addr_RFIFONUM;
input  [0:0] m_axi_can_addr_RUSER;
input  [1:0] m_axi_can_addr_RRESP;
input   m_axi_can_addr_BVALID;
output   m_axi_can_addr_BREADY;
input  [1:0] m_axi_can_addr_BRESP;
input  [0:0] m_axi_can_addr_BID;
input  [0:0] m_axi_can_addr_BUSER;
input  [6:0] zext_ln27;
input  [14:0] zext_ln223;
input  [31:0] canbase;
output  [6:0] can_frame_address0;
output   can_frame_ce0;
output   can_frame_we0;
output  [7:0] can_frame_d0;
output  [6:0] can_frame_address1;
output   can_frame_ce1;
output   can_frame_we1;
output  [7:0] can_frame_d1;

reg ap_idle;
reg m_axi_can_addr_ARVALID;
reg m_axi_can_addr_RREADY;
reg[6:0] can_frame_address0;
reg can_frame_ce0;
reg can_frame_we0;
reg[7:0] can_frame_d0;
reg[6:0] can_frame_address1;
reg can_frame_ce1;
reg can_frame_we1;
reg[7:0] can_frame_d1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_state8_pp0_stage1_iter3;
reg    ap_block_state10_pp0_stage1_iter4;
wire    ap_block_state12_pp0_stage1_iter5;
reg    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln237_reg_402;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    can_addr_blk_n_AR;
wire    ap_block_pp0_stage0;
reg    can_addr_blk_n_R;
wire    ap_block_pp0_stage1;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state11_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] Len_2_reg_397;
wire   [0:0] icmp_ln237_fu_184_p2;
wire   [31:0] add_ln239_fu_190_p2;
reg   [31:0] add_ln239_reg_406;
reg   [29:0] trunc_ln_reg_413;
reg    ap_block_pp0_stage1_11001;
reg   [7:0] trunc_ln2_reg_424;
reg   [7:0] trunc_ln3_reg_429;
reg   [7:0] trunc_ln4_reg_434;
wire   [7:0] trunc_ln243_fu_314_p1;
reg   [7:0] trunc_ln243_reg_439;
wire   [6:0] trunc_ln240_fu_321_p1;
reg   [6:0] trunc_ln240_reg_444;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [31:0] zext_ln240_fu_331_p1;
wire   [31:0] zext_ln241_fu_342_p1;
wire   [31:0] zext_ln242_fu_363_p1;
wire   [31:0] zext_ln243_fu_373_p1;
wire  signed [31:0] sext_ln238_fu_274_p1;
reg   [31:0] Len_fu_84;
wire   [31:0] Len_3_fu_264_p2;
wire    ap_loop_init;
reg   [31:0] ap_sig_allocacmp_Len_2;
reg   [63:0] canIndex_fu_88;
wire   [63:0] add_ln244_fu_347_p2;
wire   [31:0] zext_ln27_cast_fu_167_p1;
wire   [31:0] zext_ln223_cast_fu_163_p1;
wire   [31:0] sub_ln239_fu_203_p2;
wire   [29:0] trunc_ln239_1_fu_208_p4;
wire   [0:0] tmp_fu_196_p3;
wire   [29:0] sub_ln239_1_fu_218_p2;
wire   [29:0] tmp_6_fu_224_p4;
wire   [29:0] select_ln239_fu_233_p3;
wire   [31:0] shl_ln2_fu_241_p3;
wire   [31:0] add_ln238_fu_249_p2;
wire   [6:0] add_ln240_fu_325_p2;
wire   [6:0] add_ln241_fu_336_p2;
wire   [6:0] add_ln242_fu_358_p2;
wire   [6:0] add_ln243_fu_368_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to5;
reg    ap_done_pending_pp0;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

clu_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Len_fu_84 <= 32'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln237_reg_402 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Len_fu_84 <= Len_3_fu_264_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            canIndex_fu_88 <= 64'd8;
        end else if ((ap_enable_reg_pp0_iter5 == 1'b1)) begin
            canIndex_fu_88 <= add_ln244_fu_347_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Len_2_reg_397 <= ap_sig_allocacmp_Len_2;
        icmp_ln237_reg_402 <= icmp_ln237_fu_184_p2;
        trunc_ln240_reg_444 <= trunc_ln240_fu_321_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln237_fu_184_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln239_reg_406 <= add_ln239_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        trunc_ln243_reg_439 <= trunc_ln243_fu_314_p1;
        trunc_ln2_reg_424 <= {{m_axi_can_addr_RDATA[31:24]}};
        trunc_ln3_reg_429 <= {{m_axi_can_addr_RDATA[23:16]}};
        trunc_ln4_reg_434 <= {{m_axi_can_addr_RDATA[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln237_reg_402 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        trunc_ln_reg_413 <= {{add_ln238_fu_249_p2[31:2]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln237_reg_402 == 1'd0) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready_pp0_iter4_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (ap_loop_exit_ready == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to5 = 1'b1;
    end else begin
        ap_idle_pp0_1to5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_Len_2 = 32'd0;
    end else begin
        ap_sig_allocacmp_Len_2 = Len_fu_84;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        can_addr_blk_n_AR = m_axi_can_addr_ARREADY;
    end else begin
        can_addr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        can_addr_blk_n_R = m_axi_can_addr_RVALID;
    end else begin
        can_addr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter5 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            can_frame_address0 = zext_ln243_fu_373_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            can_frame_address0 = zext_ln241_fu_342_p1;
        end else begin
            can_frame_address0 = 'bx;
        end
    end else begin
        can_frame_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter5 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            can_frame_address1 = zext_ln242_fu_363_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            can_frame_address1 = zext_ln240_fu_331_p1;
        end else begin
            can_frame_address1 = 'bx;
        end
    end else begin
        can_frame_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        can_frame_ce0 = 1'b1;
    end else begin
        can_frame_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        can_frame_ce1 = 1'b1;
    end else begin
        can_frame_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter5 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            can_frame_d0 = trunc_ln243_reg_439;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            can_frame_d0 = trunc_ln3_reg_429;
        end else begin
            can_frame_d0 = 'bx;
        end
    end else begin
        can_frame_d0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter5 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            can_frame_d1 = trunc_ln4_reg_434;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            can_frame_d1 = trunc_ln2_reg_424;
        end else begin
            can_frame_d1 = 'bx;
        end
    end else begin
        can_frame_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        can_frame_we0 = 1'b1;
    end else begin
        can_frame_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        can_frame_we1 = 1'b1;
    end else begin
        can_frame_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_can_addr_ARVALID = 1'b1;
    end else begin
        m_axi_can_addr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        m_axi_can_addr_RREADY = 1'b1;
    end else begin
        m_axi_can_addr_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to5 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Len_3_fu_264_p2 = (Len_2_reg_397 + 32'd4);

assign add_ln238_fu_249_p2 = (shl_ln2_fu_241_p3 + canbase);

assign add_ln239_fu_190_p2 = (ap_sig_allocacmp_Len_2 + zext_ln223_cast_fu_163_p1);

assign add_ln240_fu_325_p2 = (trunc_ln240_fu_321_p1 + 7'd12);

assign add_ln241_fu_336_p2 = (trunc_ln240_fu_321_p1 + 7'd13);

assign add_ln242_fu_358_p2 = (trunc_ln240_reg_444 + 7'd14);

assign add_ln243_fu_368_p2 = (trunc_ln240_reg_444 + 7'd15);

assign add_ln244_fu_347_p2 = (canIndex_fu_88 + 64'd4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_can_addr_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_can_addr_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((m_axi_can_addr_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((m_axi_can_addr_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage1_iter4 = (m_axi_can_addr_RVALID == 1'b0);
end

assign ap_block_state11_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign icmp_ln237_fu_184_p2 = ((ap_sig_allocacmp_Len_2 < zext_ln27_cast_fu_167_p1) ? 1'b1 : 1'b0);

assign m_axi_can_addr_ARADDR = sext_ln238_fu_274_p1;

assign m_axi_can_addr_ARBURST = 2'd0;

assign m_axi_can_addr_ARCACHE = 4'd0;

assign m_axi_can_addr_ARID = 1'd0;

assign m_axi_can_addr_ARLEN = 32'd1;

assign m_axi_can_addr_ARLOCK = 2'd0;

assign m_axi_can_addr_ARPROT = 3'd0;

assign m_axi_can_addr_ARQOS = 4'd0;

assign m_axi_can_addr_ARREGION = 4'd0;

assign m_axi_can_addr_ARSIZE = 3'd0;

assign m_axi_can_addr_ARUSER = 1'd0;

assign m_axi_can_addr_AWADDR = 32'd0;

assign m_axi_can_addr_AWBURST = 2'd0;

assign m_axi_can_addr_AWCACHE = 4'd0;

assign m_axi_can_addr_AWID = 1'd0;

assign m_axi_can_addr_AWLEN = 32'd0;

assign m_axi_can_addr_AWLOCK = 2'd0;

assign m_axi_can_addr_AWPROT = 3'd0;

assign m_axi_can_addr_AWQOS = 4'd0;

assign m_axi_can_addr_AWREGION = 4'd0;

assign m_axi_can_addr_AWSIZE = 3'd0;

assign m_axi_can_addr_AWUSER = 1'd0;

assign m_axi_can_addr_AWVALID = 1'b0;

assign m_axi_can_addr_BREADY = 1'b0;

assign m_axi_can_addr_WDATA = 32'd0;

assign m_axi_can_addr_WID = 1'd0;

assign m_axi_can_addr_WLAST = 1'b0;

assign m_axi_can_addr_WSTRB = 4'd0;

assign m_axi_can_addr_WUSER = 1'd0;

assign m_axi_can_addr_WVALID = 1'b0;

assign select_ln239_fu_233_p3 = ((tmp_fu_196_p3[0:0] == 1'b1) ? sub_ln239_1_fu_218_p2 : tmp_6_fu_224_p4);

assign sext_ln238_fu_274_p1 = $signed(trunc_ln_reg_413);

assign shl_ln2_fu_241_p3 = {{select_ln239_fu_233_p3}, {2'd0}};

assign sub_ln239_1_fu_218_p2 = (30'd0 - trunc_ln239_1_fu_208_p4);

assign sub_ln239_fu_203_p2 = (32'd0 - add_ln239_reg_406);

assign tmp_6_fu_224_p4 = {{add_ln239_reg_406[31:2]}};

assign tmp_fu_196_p3 = add_ln239_reg_406[32'd31];

assign trunc_ln239_1_fu_208_p4 = {{sub_ln239_fu_203_p2[31:2]}};

assign trunc_ln240_fu_321_p1 = canIndex_fu_88[6:0];

assign trunc_ln243_fu_314_p1 = m_axi_can_addr_RDATA[7:0];

assign zext_ln223_cast_fu_163_p1 = zext_ln223;

assign zext_ln240_fu_331_p1 = add_ln240_fu_325_p2;

assign zext_ln241_fu_342_p1 = add_ln241_fu_336_p2;

assign zext_ln242_fu_363_p1 = add_ln242_fu_358_p2;

assign zext_ln243_fu_373_p1 = add_ln243_fu_368_p2;

assign zext_ln27_cast_fu_167_p1 = zext_ln27;

endmodule //clu_recvFrame_logic_1_Pipeline_VITIS_LOOP_237_2
