-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity clu_single_lin_process_1_Pipeline_VITIS_LOOP_213_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_lin_addr_AWVALID : OUT STD_LOGIC;
    m_axi_lin_addr_AWREADY : IN STD_LOGIC;
    m_axi_lin_addr_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_lin_addr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lin_addr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_lin_addr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_lin_addr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_lin_addr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_lin_addr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lin_addr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_lin_addr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lin_addr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lin_addr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lin_addr_WVALID : OUT STD_LOGIC;
    m_axi_lin_addr_WREADY : IN STD_LOGIC;
    m_axi_lin_addr_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_lin_addr_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lin_addr_WLAST : OUT STD_LOGIC;
    m_axi_lin_addr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lin_addr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lin_addr_ARVALID : OUT STD_LOGIC;
    m_axi_lin_addr_ARREADY : IN STD_LOGIC;
    m_axi_lin_addr_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_lin_addr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lin_addr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_lin_addr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_lin_addr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_lin_addr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_lin_addr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lin_addr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_lin_addr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lin_addr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lin_addr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lin_addr_RVALID : IN STD_LOGIC;
    m_axi_lin_addr_RREADY : OUT STD_LOGIC;
    m_axi_lin_addr_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_lin_addr_RLAST : IN STD_LOGIC;
    m_axi_lin_addr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lin_addr_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_lin_addr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lin_addr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_lin_addr_BVALID : IN STD_LOGIC;
    m_axi_lin_addr_BREADY : OUT STD_LOGIC;
    m_axi_lin_addr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_lin_addr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lin_addr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    linbase : IN STD_LOGIC_VECTOR (31 downto 0);
    lin_frame_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    lin_frame_ce0 : OUT STD_LOGIC;
    lin_frame_we0 : OUT STD_LOGIC;
    lin_frame_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    PL_Data_1_load_out : OUT STD_LOGIC_VECTOR (3 downto 0);
    PL_Data_1_load_out_ap_vld : OUT STD_LOGIC;
    zext_ln213_1_out : OUT STD_LOGIC_VECTOR (3 downto 0);
    zext_ln213_1_out_ap_vld : OUT STD_LOGIC;
    PL_Data_1 : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of clu_single_lin_process_1_Pipeline_VITIS_LOOP_213_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal grp_read_lin_reg_1_fu_97_lin_addr_blk_n_AR : STD_LOGIC;
    signal grp_read_lin_reg_1_fu_97_lin_addr_blk_n_R : STD_LOGIC;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln213_reg_179 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal lin_addr_blk_n_AR : STD_LOGIC;
    signal lin_addr_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal PL_Data_1_load_reg_173 : STD_LOGIC_VECTOR (3 downto 0);
    signal PL_Data_1_load_reg_173_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal PL_Data_1_load_reg_173_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal PL_Data_1_load_reg_173_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln213_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln213_reg_179_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln213_reg_179_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln213_reg_179_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln216_fu_140_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln216_reg_183 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln216_reg_183_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln216_reg_183_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln216_reg_183_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln216_reg_183_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_lin_reg_1_fu_97_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_data_reg_188 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal grp_read_lin_reg_1_fu_97_ap_start : STD_LOGIC;
    signal grp_read_lin_reg_1_fu_97_ap_done : STD_LOGIC;
    signal grp_read_lin_reg_1_fu_97_ap_idle : STD_LOGIC;
    signal grp_read_lin_reg_1_fu_97_ap_ready : STD_LOGIC;
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWVALID : STD_LOGIC;
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_WVALID : STD_LOGIC;
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_WLAST : STD_LOGIC;
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARVALID : STD_LOGIC;
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_RREADY : STD_LOGIC;
    signal grp_read_lin_reg_1_fu_97_m_axi_lin_addr_BREADY : STD_LOGIC;
    signal grp_read_lin_reg_1_fu_97_ap_ce : STD_LOGIC;
    signal ap_block_state2_pp0_stage1_iter0_ignore_call1 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1_ignore_call1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2_ignore_call1 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3_ignore_call1 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4_ignore_call1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_ignoreCallOp30 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1_ignore_call1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2_ignore_call1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3_ignore_call1 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4_ignore_call1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5_ignore_call1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp31 : BOOLEAN;
    signal grp_read_lin_reg_1_fu_97_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln216_fu_156_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_60 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln213_1_fu_134_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln213_fu_118_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln213_fu_122_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln216_cast_fu_149_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter4_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to3 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to5 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component clu_read_lin_reg_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_lin_addr_AWVALID : OUT STD_LOGIC;
        m_axi_lin_addr_AWREADY : IN STD_LOGIC;
        m_axi_lin_addr_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_lin_addr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lin_addr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_lin_addr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_lin_addr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_lin_addr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_lin_addr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_lin_addr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_lin_addr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_lin_addr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_lin_addr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lin_addr_WVALID : OUT STD_LOGIC;
        m_axi_lin_addr_WREADY : IN STD_LOGIC;
        m_axi_lin_addr_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_lin_addr_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_lin_addr_WLAST : OUT STD_LOGIC;
        m_axi_lin_addr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lin_addr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lin_addr_ARVALID : OUT STD_LOGIC;
        m_axi_lin_addr_ARREADY : IN STD_LOGIC;
        m_axi_lin_addr_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_lin_addr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lin_addr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_lin_addr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_lin_addr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_lin_addr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_lin_addr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_lin_addr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_lin_addr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_lin_addr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_lin_addr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lin_addr_RVALID : IN STD_LOGIC;
        m_axi_lin_addr_RREADY : OUT STD_LOGIC;
        m_axi_lin_addr_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_lin_addr_RLAST : IN STD_LOGIC;
        m_axi_lin_addr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lin_addr_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_lin_addr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lin_addr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_lin_addr_BVALID : IN STD_LOGIC;
        m_axi_lin_addr_BREADY : OUT STD_LOGIC;
        m_axi_lin_addr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_lin_addr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lin_addr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        ap_ce : IN STD_LOGIC;
        lin_reg : IN STD_LOGIC_VECTOR (31 downto 0);
        offset : IN STD_LOGIC_VECTOR (4 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0);
        lin_addr_blk_n_AR : OUT STD_LOGIC;
        lin_addr_blk_n_R : OUT STD_LOGIC );
    end component;


    component clu_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    grp_read_lin_reg_1_fu_97 : component clu_read_lin_reg_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_read_lin_reg_1_fu_97_ap_start,
        ap_done => grp_read_lin_reg_1_fu_97_ap_done,
        ap_idle => grp_read_lin_reg_1_fu_97_ap_idle,
        ap_ready => grp_read_lin_reg_1_fu_97_ap_ready,
        m_axi_lin_addr_AWVALID => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWVALID,
        m_axi_lin_addr_AWREADY => ap_const_logic_0,
        m_axi_lin_addr_AWADDR => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWADDR,
        m_axi_lin_addr_AWID => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWID,
        m_axi_lin_addr_AWLEN => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWLEN,
        m_axi_lin_addr_AWSIZE => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWSIZE,
        m_axi_lin_addr_AWBURST => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWBURST,
        m_axi_lin_addr_AWLOCK => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWLOCK,
        m_axi_lin_addr_AWCACHE => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWCACHE,
        m_axi_lin_addr_AWPROT => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWPROT,
        m_axi_lin_addr_AWQOS => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWQOS,
        m_axi_lin_addr_AWREGION => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWREGION,
        m_axi_lin_addr_AWUSER => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWUSER,
        m_axi_lin_addr_WVALID => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_WVALID,
        m_axi_lin_addr_WREADY => ap_const_logic_0,
        m_axi_lin_addr_WDATA => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_WDATA,
        m_axi_lin_addr_WSTRB => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_WSTRB,
        m_axi_lin_addr_WLAST => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_WLAST,
        m_axi_lin_addr_WID => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_WID,
        m_axi_lin_addr_WUSER => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_WUSER,
        m_axi_lin_addr_ARVALID => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARVALID,
        m_axi_lin_addr_ARREADY => m_axi_lin_addr_ARREADY,
        m_axi_lin_addr_ARADDR => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARADDR,
        m_axi_lin_addr_ARID => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARID,
        m_axi_lin_addr_ARLEN => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARLEN,
        m_axi_lin_addr_ARSIZE => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARSIZE,
        m_axi_lin_addr_ARBURST => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARBURST,
        m_axi_lin_addr_ARLOCK => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARLOCK,
        m_axi_lin_addr_ARCACHE => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARCACHE,
        m_axi_lin_addr_ARPROT => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARPROT,
        m_axi_lin_addr_ARQOS => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARQOS,
        m_axi_lin_addr_ARREGION => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARREGION,
        m_axi_lin_addr_ARUSER => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARUSER,
        m_axi_lin_addr_RVALID => m_axi_lin_addr_RVALID,
        m_axi_lin_addr_RREADY => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_RREADY,
        m_axi_lin_addr_RDATA => m_axi_lin_addr_RDATA,
        m_axi_lin_addr_RLAST => m_axi_lin_addr_RLAST,
        m_axi_lin_addr_RID => m_axi_lin_addr_RID,
        m_axi_lin_addr_RFIFONUM => m_axi_lin_addr_RFIFONUM,
        m_axi_lin_addr_RUSER => m_axi_lin_addr_RUSER,
        m_axi_lin_addr_RRESP => m_axi_lin_addr_RRESP,
        m_axi_lin_addr_BVALID => ap_const_logic_0,
        m_axi_lin_addr_BREADY => grp_read_lin_reg_1_fu_97_m_axi_lin_addr_BREADY,
        m_axi_lin_addr_BRESP => ap_const_lv2_0,
        m_axi_lin_addr_BID => ap_const_lv1_0,
        m_axi_lin_addr_BUSER => ap_const_lv1_0,
        ap_ce => grp_read_lin_reg_1_fu_97_ap_ce,
        lin_reg => linbase,
        offset => ap_const_lv5_0,
        ap_return => grp_read_lin_reg_1_fu_97_ap_return,
        lin_addr_blk_n_AR => grp_read_lin_reg_1_fu_97_lin_addr_blk_n_AR,
        lin_addr_blk_n_R => grp_read_lin_reg_1_fu_97_lin_addr_blk_n_R);

    flow_control_loop_pipe_sequential_init_U : component clu_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    grp_read_lin_reg_1_fu_97_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_read_lin_reg_1_fu_97_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln213_fu_128_p2 = ap_const_lv1_1))) then 
                    grp_read_lin_reg_1_fu_97_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_read_lin_reg_1_fu_97_ap_ready = ap_const_logic_1)) then 
                    grp_read_lin_reg_1_fu_97_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage0))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    i_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln213_fu_128_p2 = ap_const_lv1_1))) then 
                    i_fu_60 <= add_ln213_1_fu_134_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_60 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                PL_Data_1_load_reg_173 <= PL_Data_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                PL_Data_1_load_reg_173_pp0_iter1_reg <= PL_Data_1_load_reg_173;
                PL_Data_1_load_reg_173_pp0_iter2_reg <= PL_Data_1_load_reg_173_pp0_iter1_reg;
                PL_Data_1_load_reg_173_pp0_iter3_reg <= PL_Data_1_load_reg_173_pp0_iter2_reg;
                icmp_ln213_reg_179 <= icmp_ln213_fu_128_p2;
                icmp_ln213_reg_179_pp0_iter1_reg <= icmp_ln213_reg_179;
                icmp_ln213_reg_179_pp0_iter2_reg <= icmp_ln213_reg_179_pp0_iter1_reg;
                icmp_ln213_reg_179_pp0_iter3_reg <= icmp_ln213_reg_179_pp0_iter2_reg;
                trunc_ln216_reg_183_pp0_iter1_reg <= trunc_ln216_reg_183;
                trunc_ln216_reg_183_pp0_iter2_reg <= trunc_ln216_reg_183_pp0_iter1_reg;
                trunc_ln216_reg_183_pp0_iter3_reg <= trunc_ln216_reg_183_pp0_iter2_reg;
                trunc_ln216_reg_183_pp0_iter4_reg <= trunc_ln216_reg_183_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                reg_data_reg_188 <= grp_read_lin_reg_1_fu_97_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln213_fu_128_p2 = ap_const_lv1_1))) then
                trunc_ln216_reg_183 <= trunc_ln216_fu_140_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter4_stage0, ap_idle_pp0_0to3, ap_idle_pp0_1to5, ap_done_pending_pp0, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to5 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    PL_Data_1_load_out <= PL_Data_1_load_reg_173_pp0_iter3_reg;

    PL_Data_1_load_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln213_reg_179_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln213_reg_179_pp0_iter3_reg = ap_const_lv1_0))) then 
            PL_Data_1_load_out_ap_vld <= ap_const_logic_1;
        else 
            PL_Data_1_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln213_1_fu_134_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv5_1));
    add_ln213_fu_122_p2 <= std_logic_vector(unsigned(zext_ln213_fu_118_p1) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, grp_read_lin_reg_1_fu_97_lin_addr_blk_n_AR, grp_read_lin_reg_1_fu_97_lin_addr_blk_n_R, icmp_ln213_reg_179)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln213_reg_179 = ap_const_lv1_1) and ((grp_read_lin_reg_1_fu_97_lin_addr_blk_n_R and grp_read_lin_reg_1_fu_97_lin_addr_blk_n_AR) = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, grp_read_lin_reg_1_fu_97_lin_addr_blk_n_AR, grp_read_lin_reg_1_fu_97_lin_addr_blk_n_R, icmp_ln213_reg_179)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln213_reg_179 = ap_const_lv1_1) and ((grp_read_lin_reg_1_fu_97_lin_addr_blk_n_R and grp_read_lin_reg_1_fu_97_lin_addr_blk_n_AR) = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage0_11001_ignoreCallOp31 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, grp_read_lin_reg_1_fu_97_lin_addr_blk_n_AR, grp_read_lin_reg_1_fu_97_lin_addr_blk_n_R, icmp_ln213_reg_179)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln213_reg_179 = ap_const_lv1_1) and ((grp_read_lin_reg_1_fu_97_lin_addr_blk_n_R and grp_read_lin_reg_1_fu_97_lin_addr_blk_n_AR) = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter4, grp_read_lin_reg_1_fu_97_lin_addr_blk_n_AR, grp_read_lin_reg_1_fu_97_lin_addr_blk_n_R)
    begin
                ap_block_pp0_stage1_11001 <= (((grp_read_lin_reg_1_fu_97_lin_addr_blk_n_R and grp_read_lin_reg_1_fu_97_lin_addr_blk_n_AR) = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1_11001_ignoreCallOp30 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, grp_read_lin_reg_1_fu_97_lin_addr_blk_n_AR, grp_read_lin_reg_1_fu_97_lin_addr_blk_n_R)
    begin
                ap_block_pp0_stage1_subdone <= (((grp_read_lin_reg_1_fu_97_lin_addr_blk_n_R and grp_read_lin_reg_1_fu_97_lin_addr_blk_n_AR) = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage1_iter4_assign_proc : process(grp_read_lin_reg_1_fu_97_lin_addr_blk_n_AR, grp_read_lin_reg_1_fu_97_lin_addr_blk_n_R)
    begin
                ap_block_state10_pp0_stage1_iter4 <= ((grp_read_lin_reg_1_fu_97_lin_addr_blk_n_R and grp_read_lin_reg_1_fu_97_lin_addr_blk_n_AR) = ap_const_logic_0);
    end process;

        ap_block_state10_pp0_stage1_iter4_ignore_call1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5_ignore_call1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0_ignore_call1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0_ignore_call1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(grp_read_lin_reg_1_fu_97_lin_addr_blk_n_AR, grp_read_lin_reg_1_fu_97_lin_addr_blk_n_R, icmp_ln213_reg_179)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln213_reg_179 = ap_const_lv1_1) and ((grp_read_lin_reg_1_fu_97_lin_addr_blk_n_R and grp_read_lin_reg_1_fu_97_lin_addr_blk_n_AR) = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter1_ignore_call1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1_ignore_call1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2_ignore_call1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2_ignore_call1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3_ignore_call1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3_ignore_call1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4_ignore_call1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln213_reg_179)
    begin
        if (((icmp_ln213_reg_179 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter4_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, icmp_ln213_reg_179_pp0_iter3_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln213_reg_179_pp0_iter3_reg = ap_const_lv1_0))) then 
            ap_condition_exit_pp0_iter4_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter4_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg, ap_loop_exit_ready_pp0_iter2_reg, ap_loop_exit_ready_pp0_iter3_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (not(((ap_loop_exit_ready = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to5_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to5 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to5 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_60, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_60;
        end if; 
    end process;


    grp_read_lin_reg_1_fu_97_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001_ignoreCallOp30, ap_block_pp0_stage0_11001_ignoreCallOp31)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp31) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001_ignoreCallOp30) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_read_lin_reg_1_fu_97_ap_ce <= ap_const_logic_1;
        else 
            grp_read_lin_reg_1_fu_97_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_read_lin_reg_1_fu_97_ap_start <= grp_read_lin_reg_1_fu_97_ap_start_reg;
    icmp_ln213_fu_128_p2 <= "1" when (unsigned(ap_sig_allocacmp_i_1) < unsigned(add_ln213_fu_122_p2)) else "0";

    lin_addr_blk_n_AR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, grp_read_lin_reg_1_fu_97_lin_addr_blk_n_AR, icmp_ln213_reg_179, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((icmp_ln213_reg_179 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            lin_addr_blk_n_AR <= grp_read_lin_reg_1_fu_97_lin_addr_blk_n_AR;
        else 
            lin_addr_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    lin_addr_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, grp_read_lin_reg_1_fu_97_lin_addr_blk_n_R, icmp_ln213_reg_179, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((icmp_ln213_reg_179 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            lin_addr_blk_n_R <= grp_read_lin_reg_1_fu_97_lin_addr_blk_n_R;
        else 
            lin_addr_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    lin_frame_address0 <= zext_ln216_fu_156_p1(5 - 1 downto 0);

    lin_frame_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lin_frame_ce0 <= ap_const_logic_1;
        else 
            lin_frame_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lin_frame_d0 <= reg_data_reg_188;

    lin_frame_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lin_frame_we0 <= ap_const_logic_1;
        else 
            lin_frame_we0 <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_lin_addr_ARADDR <= grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARADDR;
    m_axi_lin_addr_ARBURST <= grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARBURST;
    m_axi_lin_addr_ARCACHE <= grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARCACHE;
    m_axi_lin_addr_ARID <= grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARID;
    m_axi_lin_addr_ARLEN <= grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARLEN;
    m_axi_lin_addr_ARLOCK <= grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARLOCK;
    m_axi_lin_addr_ARPROT <= grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARPROT;
    m_axi_lin_addr_ARQOS <= grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARQOS;
    m_axi_lin_addr_ARREGION <= grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARREGION;
    m_axi_lin_addr_ARSIZE <= grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARSIZE;
    m_axi_lin_addr_ARUSER <= grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARUSER;

    m_axi_lin_addr_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, icmp_ln213_reg_179, ap_block_pp0_stage0, ap_block_pp0_stage1, icmp_ln213_reg_179_pp0_iter1_reg, icmp_ln213_reg_179_pp0_iter2_reg, icmp_ln213_reg_179_pp0_iter3_reg, grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARVALID)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((icmp_ln213_reg_179 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((icmp_ln213_reg_179 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln213_reg_179_pp0_iter3_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln213_reg_179_pp0_iter2_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln213_reg_179_pp0_iter1_reg = ap_const_lv1_1)))) then 
            m_axi_lin_addr_ARVALID <= grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARVALID;
        else 
            m_axi_lin_addr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_lin_addr_AWADDR <= ap_const_lv32_0;
    m_axi_lin_addr_AWBURST <= ap_const_lv2_0;
    m_axi_lin_addr_AWCACHE <= ap_const_lv4_0;
    m_axi_lin_addr_AWID <= ap_const_lv1_0;
    m_axi_lin_addr_AWLEN <= ap_const_lv32_0;
    m_axi_lin_addr_AWLOCK <= ap_const_lv2_0;
    m_axi_lin_addr_AWPROT <= ap_const_lv3_0;
    m_axi_lin_addr_AWQOS <= ap_const_lv4_0;
    m_axi_lin_addr_AWREGION <= ap_const_lv4_0;
    m_axi_lin_addr_AWSIZE <= ap_const_lv3_0;
    m_axi_lin_addr_AWUSER <= ap_const_lv1_0;
    m_axi_lin_addr_AWVALID <= ap_const_logic_0;
    m_axi_lin_addr_BREADY <= ap_const_logic_0;

    m_axi_lin_addr_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, icmp_ln213_reg_179, ap_block_pp0_stage0, ap_block_pp0_stage1, icmp_ln213_reg_179_pp0_iter1_reg, icmp_ln213_reg_179_pp0_iter2_reg, icmp_ln213_reg_179_pp0_iter3_reg, grp_read_lin_reg_1_fu_97_m_axi_lin_addr_RREADY)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((icmp_ln213_reg_179 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((icmp_ln213_reg_179 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln213_reg_179_pp0_iter3_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln213_reg_179_pp0_iter2_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln213_reg_179_pp0_iter1_reg = ap_const_lv1_1)))) then 
            m_axi_lin_addr_RREADY <= grp_read_lin_reg_1_fu_97_m_axi_lin_addr_RREADY;
        else 
            m_axi_lin_addr_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_lin_addr_WDATA <= ap_const_lv32_0;
    m_axi_lin_addr_WID <= ap_const_lv1_0;
    m_axi_lin_addr_WLAST <= ap_const_logic_0;
    m_axi_lin_addr_WSTRB <= ap_const_lv4_0;
    m_axi_lin_addr_WUSER <= ap_const_lv1_0;
    m_axi_lin_addr_WVALID <= ap_const_logic_0;
    trunc_ln216_fu_140_p1 <= ap_sig_allocacmp_i_1(4 - 1 downto 0);
    zext_ln213_1_out <= PL_Data_1_load_reg_173_pp0_iter3_reg;

    zext_ln213_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln213_reg_179_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln213_reg_179_pp0_iter3_reg = ap_const_lv1_0))) then 
            zext_ln213_1_out_ap_vld <= ap_const_logic_1;
        else 
            zext_ln213_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln213_fu_118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(PL_Data_1),5));
    zext_ln216_cast_fu_149_p3 <= (ap_const_lv1_1 & trunc_ln216_reg_183_pp0_iter4_reg);
    zext_ln216_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln216_cast_fu_149_p3),32));
end behav;
