// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module clu_write_lin_ddr_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_ps_ddr_AWVALID,
        m_axi_ps_ddr_AWREADY,
        m_axi_ps_ddr_AWADDR,
        m_axi_ps_ddr_AWID,
        m_axi_ps_ddr_AWLEN,
        m_axi_ps_ddr_AWSIZE,
        m_axi_ps_ddr_AWBURST,
        m_axi_ps_ddr_AWLOCK,
        m_axi_ps_ddr_AWCACHE,
        m_axi_ps_ddr_AWPROT,
        m_axi_ps_ddr_AWQOS,
        m_axi_ps_ddr_AWREGION,
        m_axi_ps_ddr_AWUSER,
        m_axi_ps_ddr_WVALID,
        m_axi_ps_ddr_WREADY,
        m_axi_ps_ddr_WDATA,
        m_axi_ps_ddr_WSTRB,
        m_axi_ps_ddr_WLAST,
        m_axi_ps_ddr_WID,
        m_axi_ps_ddr_WUSER,
        m_axi_ps_ddr_ARVALID,
        m_axi_ps_ddr_ARREADY,
        m_axi_ps_ddr_ARADDR,
        m_axi_ps_ddr_ARID,
        m_axi_ps_ddr_ARLEN,
        m_axi_ps_ddr_ARSIZE,
        m_axi_ps_ddr_ARBURST,
        m_axi_ps_ddr_ARLOCK,
        m_axi_ps_ddr_ARCACHE,
        m_axi_ps_ddr_ARPROT,
        m_axi_ps_ddr_ARQOS,
        m_axi_ps_ddr_ARREGION,
        m_axi_ps_ddr_ARUSER,
        m_axi_ps_ddr_RVALID,
        m_axi_ps_ddr_RREADY,
        m_axi_ps_ddr_RDATA,
        m_axi_ps_ddr_RLAST,
        m_axi_ps_ddr_RID,
        m_axi_ps_ddr_RFIFONUM,
        m_axi_ps_ddr_RUSER,
        m_axi_ps_ddr_RRESP,
        m_axi_ps_ddr_BVALID,
        m_axi_ps_ddr_BREADY,
        m_axi_ps_ddr_BRESP,
        m_axi_ps_ddr_BID,
        m_axi_ps_ddr_BUSER,
        ddr_header,
        data_address0,
        data_ce0,
        data_q0
);

parameter    ap_ST_fsm_state1 = 72'd1;
parameter    ap_ST_fsm_state2 = 72'd2;
parameter    ap_ST_fsm_state3 = 72'd4;
parameter    ap_ST_fsm_state4 = 72'd8;
parameter    ap_ST_fsm_state5 = 72'd16;
parameter    ap_ST_fsm_state6 = 72'd32;
parameter    ap_ST_fsm_state7 = 72'd64;
parameter    ap_ST_fsm_state8 = 72'd128;
parameter    ap_ST_fsm_state9 = 72'd256;
parameter    ap_ST_fsm_state10 = 72'd512;
parameter    ap_ST_fsm_state11 = 72'd1024;
parameter    ap_ST_fsm_state12 = 72'd2048;
parameter    ap_ST_fsm_state13 = 72'd4096;
parameter    ap_ST_fsm_state14 = 72'd8192;
parameter    ap_ST_fsm_state15 = 72'd16384;
parameter    ap_ST_fsm_state16 = 72'd32768;
parameter    ap_ST_fsm_state17 = 72'd65536;
parameter    ap_ST_fsm_state18 = 72'd131072;
parameter    ap_ST_fsm_state19 = 72'd262144;
parameter    ap_ST_fsm_state20 = 72'd524288;
parameter    ap_ST_fsm_state21 = 72'd1048576;
parameter    ap_ST_fsm_state22 = 72'd2097152;
parameter    ap_ST_fsm_state23 = 72'd4194304;
parameter    ap_ST_fsm_state24 = 72'd8388608;
parameter    ap_ST_fsm_state25 = 72'd16777216;
parameter    ap_ST_fsm_state26 = 72'd33554432;
parameter    ap_ST_fsm_state27 = 72'd67108864;
parameter    ap_ST_fsm_state28 = 72'd134217728;
parameter    ap_ST_fsm_state29 = 72'd268435456;
parameter    ap_ST_fsm_state30 = 72'd536870912;
parameter    ap_ST_fsm_state31 = 72'd1073741824;
parameter    ap_ST_fsm_state32 = 72'd2147483648;
parameter    ap_ST_fsm_state33 = 72'd4294967296;
parameter    ap_ST_fsm_state34 = 72'd8589934592;
parameter    ap_ST_fsm_state35 = 72'd17179869184;
parameter    ap_ST_fsm_state36 = 72'd34359738368;
parameter    ap_ST_fsm_state37 = 72'd68719476736;
parameter    ap_ST_fsm_state38 = 72'd137438953472;
parameter    ap_ST_fsm_state39 = 72'd274877906944;
parameter    ap_ST_fsm_state40 = 72'd549755813888;
parameter    ap_ST_fsm_state41 = 72'd1099511627776;
parameter    ap_ST_fsm_state42 = 72'd2199023255552;
parameter    ap_ST_fsm_state43 = 72'd4398046511104;
parameter    ap_ST_fsm_state44 = 72'd8796093022208;
parameter    ap_ST_fsm_state45 = 72'd17592186044416;
parameter    ap_ST_fsm_state46 = 72'd35184372088832;
parameter    ap_ST_fsm_state47 = 72'd70368744177664;
parameter    ap_ST_fsm_state48 = 72'd140737488355328;
parameter    ap_ST_fsm_state49 = 72'd281474976710656;
parameter    ap_ST_fsm_state50 = 72'd562949953421312;
parameter    ap_ST_fsm_state51 = 72'd1125899906842624;
parameter    ap_ST_fsm_state52 = 72'd2251799813685248;
parameter    ap_ST_fsm_state53 = 72'd4503599627370496;
parameter    ap_ST_fsm_state54 = 72'd9007199254740992;
parameter    ap_ST_fsm_state55 = 72'd18014398509481984;
parameter    ap_ST_fsm_state56 = 72'd36028797018963968;
parameter    ap_ST_fsm_state57 = 72'd72057594037927936;
parameter    ap_ST_fsm_state58 = 72'd144115188075855872;
parameter    ap_ST_fsm_state59 = 72'd288230376151711744;
parameter    ap_ST_fsm_state60 = 72'd576460752303423488;
parameter    ap_ST_fsm_state61 = 72'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 72'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 72'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 72'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 72'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 72'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 72'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 72'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 72'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 72'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 72'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 72'd2361183241434822606848;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_ps_ddr_AWVALID;
input   m_axi_ps_ddr_AWREADY;
output  [31:0] m_axi_ps_ddr_AWADDR;
output  [0:0] m_axi_ps_ddr_AWID;
output  [31:0] m_axi_ps_ddr_AWLEN;
output  [2:0] m_axi_ps_ddr_AWSIZE;
output  [1:0] m_axi_ps_ddr_AWBURST;
output  [1:0] m_axi_ps_ddr_AWLOCK;
output  [3:0] m_axi_ps_ddr_AWCACHE;
output  [2:0] m_axi_ps_ddr_AWPROT;
output  [3:0] m_axi_ps_ddr_AWQOS;
output  [3:0] m_axi_ps_ddr_AWREGION;
output  [0:0] m_axi_ps_ddr_AWUSER;
output   m_axi_ps_ddr_WVALID;
input   m_axi_ps_ddr_WREADY;
output  [7:0] m_axi_ps_ddr_WDATA;
output  [0:0] m_axi_ps_ddr_WSTRB;
output   m_axi_ps_ddr_WLAST;
output  [0:0] m_axi_ps_ddr_WID;
output  [0:0] m_axi_ps_ddr_WUSER;
output   m_axi_ps_ddr_ARVALID;
input   m_axi_ps_ddr_ARREADY;
output  [31:0] m_axi_ps_ddr_ARADDR;
output  [0:0] m_axi_ps_ddr_ARID;
output  [31:0] m_axi_ps_ddr_ARLEN;
output  [2:0] m_axi_ps_ddr_ARSIZE;
output  [1:0] m_axi_ps_ddr_ARBURST;
output  [1:0] m_axi_ps_ddr_ARLOCK;
output  [3:0] m_axi_ps_ddr_ARCACHE;
output  [2:0] m_axi_ps_ddr_ARPROT;
output  [3:0] m_axi_ps_ddr_ARQOS;
output  [3:0] m_axi_ps_ddr_ARREGION;
output  [0:0] m_axi_ps_ddr_ARUSER;
input   m_axi_ps_ddr_RVALID;
output   m_axi_ps_ddr_RREADY;
input  [7:0] m_axi_ps_ddr_RDATA;
input   m_axi_ps_ddr_RLAST;
input  [0:0] m_axi_ps_ddr_RID;
input  [10:0] m_axi_ps_ddr_RFIFONUM;
input  [0:0] m_axi_ps_ddr_RUSER;
input  [1:0] m_axi_ps_ddr_RRESP;
input   m_axi_ps_ddr_BVALID;
output   m_axi_ps_ddr_BREADY;
input  [1:0] m_axi_ps_ddr_BRESP;
input  [0:0] m_axi_ps_ddr_BID;
input  [0:0] m_axi_ps_ddr_BUSER;
input  [31:0] ddr_header;
output  [4:0] data_address0;
output   data_ce0;
input  [7:0] data_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_ps_ddr_AWVALID;
reg[31:0] m_axi_ps_ddr_AWADDR;
reg[31:0] m_axi_ps_ddr_AWLEN;
reg m_axi_ps_ddr_WVALID;
reg[7:0] m_axi_ps_ddr_WDATA;
reg m_axi_ps_ddr_ARVALID;
reg m_axi_ps_ddr_RREADY;
reg m_axi_ps_ddr_BREADY;
reg data_ce0;

(* fsm_encoding = "none" *) reg   [71:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] dropped_lin_counter;
reg    ps_ddr_blk_n_AR;
reg    ps_ddr_blk_n_R;
wire    ap_CS_fsm_state9;
reg    ps_ddr_blk_n_AW;
wire    ap_CS_fsm_state66;
reg    ps_ddr_blk_n_W;
wire    ap_CS_fsm_state67;
reg    ps_ddr_blk_n_B;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state65;
reg   [0:0] icmp_ln115_reg_754;
wire   [7:0] ringbuffer_header_bytes_q1;
reg   [7:0] reg_321;
wire    ap_CS_fsm_state11;
wire   [7:0] ringbuffer_header_bytes_q0;
wire    ap_CS_fsm_state14;
reg   [7:0] reg_326;
reg   [7:0] reg_331;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state48;
reg   [7:0] reg_335;
reg   [4:0] loop_index4_load_reg_649;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond66_fu_354_p2;
reg   [7:0] ps_ddr_addr_read_reg_667;
reg   [7:0] ringbuffer_header_bytes_load_8_reg_692;
wire    ap_CS_fsm_state13;
reg   [7:0] ringbuffer_header_bytes_load_9_reg_699;
wire    ap_CS_fsm_state47;
wire   [31:0] grp_fu_403_p2;
reg   [31:0] nextWriteLinIndex_reg_746;
wire    ap_CS_fsm_state49;
wire   [0:0] icmp_ln115_fu_421_p2;
reg   [31:0] ps_ddr_addr_2_reg_765;
reg   [31:0] ps_ddr_addr_1_reg_771;
wire    ap_CS_fsm_state51;
wire   [0:0] exitcond55_fu_501_p2;
reg   [31:0] ps_ddr_addr_3_reg_792;
reg   [7:0] data_load_reg_798;
wire    ap_CS_fsm_state52;
reg   [7:0] write_index_array_0_reg_803;
reg   [7:0] write_index_array_1_reg_808;
reg   [7:0] write_index_array_2_reg_813;
wire   [7:0] write_index_array_3_fu_566_p1;
reg   [7:0] write_index_array_3_reg_818;
wire   [7:0] tmp_6_fu_588_p6;
reg   [7:0] tmp_6_reg_826;
wire    ap_CS_fsm_state59;
wire   [0:0] exitcond4_fu_572_p2;
wire   [7:0] add_ln117_1_fu_623_p2;
reg   [7:0] add_ln117_1_reg_831;
reg   [4:0] ringbuffer_header_bytes_address0;
reg    ringbuffer_header_bytes_ce0;
reg    ringbuffer_header_bytes_we0;
reg   [4:0] ringbuffer_header_bytes_address1;
reg    ringbuffer_header_bytes_ce1;
wire   [31:0] loop_index4_cast_fu_371_p1;
wire    ap_CS_fsm_state10;
wire   [31:0] loop_index_cast_fu_513_p1;
wire   [31:0] add_ln122_1_fu_471_p2;
wire   [31:0] add_ln117_fu_487_p2;
wire   [31:0] add_ln17_fu_523_p2;
reg    ap_block_state65;
wire   [15:0] add_ln116_fu_611_p2;
reg   [4:0] loop_index4_fu_114;
wire   [4:0] empty_67_fu_360_p2;
reg   [4:0] loop_index_fu_122;
wire   [4:0] empty_70_fu_507_p2;
reg   [2:0] loop_index_i_fu_126;
wire   [2:0] empty_74_fu_578_p2;
wire   [31:0] writeLinIndex_fu_387_p5;
wire   [31:0] grp_fu_403_p0;
wire   [31:0] grp_fu_403_p1;
wire   [31:0] readLinIndex_fu_409_p5;
wire   [2:0] trunc_ln122_fu_427_p1;
wire   [5:0] trunc_ln122_1_fu_443_p1;
wire   [31:0] shl_ln_fu_430_p6;
wire   [31:0] shl_ln122_1_fu_446_p6;
wire   [31:0] sub_ln122_fu_459_p2;
wire   [31:0] add_ln122_fu_465_p2;
wire   [1:0] tmp_6_fu_588_p5;
wire   [7:0] trunc_ln116_fu_607_p1;
reg    grp_fu_403_ap_start;
wire    grp_fu_403_ap_done;
reg   [71:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
reg    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
reg    ap_ST_fsm_state53_blk;
reg    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
reg    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
reg    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
reg    ap_ST_fsm_state65_blk;
reg    ap_ST_fsm_state66_blk;
reg    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
reg    ap_ST_fsm_state72_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 72'd1;
#0 dropped_lin_counter = 16'd0;
end

clu_write_lin_ddr_1_ringbuffer_header_bytes_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 28 ),
    .AddressWidth( 5 ))
ringbuffer_header_bytes_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ringbuffer_header_bytes_address0),
    .ce0(ringbuffer_header_bytes_ce0),
    .we0(ringbuffer_header_bytes_we0),
    .d0(ps_ddr_addr_read_reg_667),
    .q0(ringbuffer_header_bytes_q0),
    .address1(ringbuffer_header_bytes_address1),
    .ce1(ringbuffer_header_bytes_ce1),
    .q1(ringbuffer_header_bytes_q1)
);

clu_urem_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
urem_32ns_32ns_32_36_seq_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_403_ap_start),
    .done(grp_fu_403_ap_done),
    .din0(grp_fu_403_p0),
    .din1(grp_fu_403_p1),
    .ce(1'b1),
    .dout(grp_fu_403_p2)
);

clu_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U11(
    .din0(write_index_array_0_reg_803),
    .din1(write_index_array_1_reg_808),
    .din2(write_index_array_2_reg_813),
    .din3(write_index_array_3_reg_818),
    .din4(tmp_6_fu_588_p5),
    .dout(tmp_6_fu_588_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (m_axi_ps_ddr_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        loop_index4_fu_114 <= 5'd0;
    end else if (((exitcond66_fu_354_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        loop_index4_fu_114 <= empty_67_fu_360_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_fu_421_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state49))) begin
        loop_index_fu_122 <= 5'd0;
    end else if (((exitcond55_fu_501_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state51))) begin
        loop_index_fu_122 <= empty_70_fu_507_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond55_fu_501_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
        loop_index_i_fu_126 <= 3'd0;
    end else if (((exitcond4_fu_572_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state59))) begin
        loop_index_i_fu_126 <= empty_74_fu_578_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        reg_321 <= ringbuffer_header_bytes_q0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        reg_321 <= ringbuffer_header_bytes_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        reg_326 <= ringbuffer_header_bytes_q1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        reg_326 <= ringbuffer_header_bytes_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        add_ln117_1_reg_831 <= add_ln117_1_fu_623_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        data_load_reg_798 <= data_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_ps_ddr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state66))) begin
        dropped_lin_counter <= add_ln116_fu_611_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        icmp_ln115_reg_754 <= icmp_ln115_fu_421_p2;
        nextWriteLinIndex_reg_746 <= grp_fu_403_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        loop_index4_load_reg_649 <= loop_index4_fu_114;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_fu_421_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state49))) begin
        ps_ddr_addr_1_reg_771 <= add_ln117_fu_487_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_fu_421_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state49))) begin
        ps_ddr_addr_2_reg_765 <= add_ln122_1_fu_471_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond55_fu_501_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
        ps_ddr_addr_3_reg_792 <= add_ln17_fu_523_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ps_ddr_addr_read_reg_667 <= m_axi_ps_ddr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_331 <= ringbuffer_header_bytes_q0;
        reg_335 <= ringbuffer_header_bytes_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ringbuffer_header_bytes_load_8_reg_692 <= ringbuffer_header_bytes_q0;
        ringbuffer_header_bytes_load_9_reg_699 <= ringbuffer_header_bytes_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_572_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state59))) begin
        tmp_6_reg_826 <= tmp_6_fu_588_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        write_index_array_0_reg_803 <= {{nextWriteLinIndex_reg_746[31:24]}};
        write_index_array_1_reg_808 <= {{nextWriteLinIndex_reg_746[23:16]}};
        write_index_array_2_reg_813 <= {{nextWriteLinIndex_reg_746[15:8]}};
        write_index_array_3_reg_818 <= write_index_array_3_fu_566_p1;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if (((ap_start == 1'b0) | (m_axi_ps_ddr_ARREADY == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((m_axi_ps_ddr_AWREADY == 1'b0)) begin
        ap_ST_fsm_state50_blk = 1'b1;
    end else begin
        ap_ST_fsm_state50_blk = 1'b0;
    end
end

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

always @ (*) begin
    if ((m_axi_ps_ddr_WREADY == 1'b0)) begin
        ap_ST_fsm_state53_blk = 1'b1;
    end else begin
        ap_ST_fsm_state53_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_ps_ddr_AWREADY == 1'b0)) begin
        ap_ST_fsm_state54_blk = 1'b1;
    end else begin
        ap_ST_fsm_state54_blk = 1'b0;
    end
end

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

always @ (*) begin
    if ((m_axi_ps_ddr_BVALID == 1'b0)) begin
        ap_ST_fsm_state58_blk = 1'b1;
    end else begin
        ap_ST_fsm_state58_blk = 1'b0;
    end
end

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((m_axi_ps_ddr_WREADY == 1'b0)) begin
        ap_ST_fsm_state60_blk = 1'b1;
    end else begin
        ap_ST_fsm_state60_blk = 1'b0;
    end
end

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln115_reg_754 == 1'd0) & (m_axi_ps_ddr_BVALID == 1'b0))) begin
        ap_ST_fsm_state65_blk = 1'b1;
    end else begin
        ap_ST_fsm_state65_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_ps_ddr_AWREADY == 1'b0)) begin
        ap_ST_fsm_state66_blk = 1'b1;
    end else begin
        ap_ST_fsm_state66_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_ps_ddr_WREADY == 1'b0)) begin
        ap_ST_fsm_state67_blk = 1'b1;
    end else begin
        ap_ST_fsm_state67_blk = 1'b0;
    end
end

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

always @ (*) begin
    if ((m_axi_ps_ddr_BVALID == 1'b0)) begin
        ap_ST_fsm_state72_blk = 1'b1;
    end else begin
        ap_ST_fsm_state72_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((m_axi_ps_ddr_RVALID == 1'b0)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | (~((icmp_ln115_reg_754 == 1'd0) & (m_axi_ps_ddr_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state65)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln115_reg_754 == 1'd0) & (m_axi_ps_ddr_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state65))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        data_ce0 = 1'b1;
    end else begin
        data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_403_ap_start = 1'b1;
    end else begin
        grp_fu_403_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (m_axi_ps_ddr_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_ps_ddr_ARVALID = 1'b1;
    end else begin
        m_axi_ps_ddr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_ps_ddr_AWREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state66)) begin
            m_axi_ps_ddr_AWADDR = ps_ddr_addr_1_reg_771;
        end else if ((1'b1 == ap_CS_fsm_state54)) begin
            m_axi_ps_ddr_AWADDR = ps_ddr_addr_3_reg_792;
        end else if ((1'b1 == ap_CS_fsm_state50)) begin
            m_axi_ps_ddr_AWADDR = ps_ddr_addr_2_reg_765;
        end else begin
            m_axi_ps_ddr_AWADDR = 'bx;
        end
    end else begin
        m_axi_ps_ddr_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((m_axi_ps_ddr_AWREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state66)) begin
            m_axi_ps_ddr_AWLEN = 32'd1;
        end else if ((1'b1 == ap_CS_fsm_state54)) begin
            m_axi_ps_ddr_AWLEN = 32'd4;
        end else if ((1'b1 == ap_CS_fsm_state50)) begin
            m_axi_ps_ddr_AWLEN = 32'd28;
        end else begin
            m_axi_ps_ddr_AWLEN = 'bx;
        end
    end else begin
        m_axi_ps_ddr_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_ps_ddr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state54)) | ((m_axi_ps_ddr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state50)) | ((m_axi_ps_ddr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state66)))) begin
        m_axi_ps_ddr_AWVALID = 1'b1;
    end else begin
        m_axi_ps_ddr_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((icmp_ln115_reg_754 == 1'd0) & (m_axi_ps_ddr_BVALID == 1'b0)) & (icmp_ln115_reg_754 == 1'd0) & (1'b1 == ap_CS_fsm_state65)) | ((1'b1 == ap_CS_fsm_state58) & (m_axi_ps_ddr_BVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state72) & (m_axi_ps_ddr_BVALID == 1'b1)))) begin
        m_axi_ps_ddr_BREADY = 1'b1;
    end else begin
        m_axi_ps_ddr_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (m_axi_ps_ddr_RVALID == 1'b1))) begin
        m_axi_ps_ddr_RREADY = 1'b1;
    end else begin
        m_axi_ps_ddr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        m_axi_ps_ddr_WDATA = add_ln117_1_reg_831;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        m_axi_ps_ddr_WDATA = tmp_6_reg_826;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        m_axi_ps_ddr_WDATA = data_load_reg_798;
    end else begin
        m_axi_ps_ddr_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state60) & (m_axi_ps_ddr_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state53) & (m_axi_ps_ddr_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state67) & (m_axi_ps_ddr_WREADY == 1'b1)))) begin
        m_axi_ps_ddr_WVALID = 1'b1;
    end else begin
        m_axi_ps_ddr_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ps_ddr_blk_n_AR = m_axi_ps_ddr_ARREADY;
    end else begin
        ps_ddr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state66))) begin
        ps_ddr_blk_n_AW = m_axi_ps_ddr_AWREADY;
    end else begin
        ps_ddr_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state72) | ((icmp_ln115_reg_754 == 1'd0) & (1'b1 == ap_CS_fsm_state65)))) begin
        ps_ddr_blk_n_B = m_axi_ps_ddr_BVALID;
    end else begin
        ps_ddr_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ps_ddr_blk_n_R = m_axi_ps_ddr_RVALID;
    end else begin
        ps_ddr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state67))) begin
        ps_ddr_blk_n_W = m_axi_ps_ddr_WREADY;
    end else begin
        ps_ddr_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        ringbuffer_header_bytes_address0 = 32'd22;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        ringbuffer_header_bytes_address0 = 32'd20;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        ringbuffer_header_bytes_address0 = 32'd26;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        ringbuffer_header_bytes_address0 = 32'd24;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        ringbuffer_header_bytes_address0 = 32'd14;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        ringbuffer_header_bytes_address0 = loop_index4_cast_fu_371_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        ringbuffer_header_bytes_address0 = 32'd13;
    end else begin
        ringbuffer_header_bytes_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        ringbuffer_header_bytes_address1 = 32'd23;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        ringbuffer_header_bytes_address1 = 32'd21;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        ringbuffer_header_bytes_address1 = 32'd27;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        ringbuffer_header_bytes_address1 = 32'd25;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        ringbuffer_header_bytes_address1 = 32'd15;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        ringbuffer_header_bytes_address1 = 32'd12;
    end else begin
        ringbuffer_header_bytes_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        ringbuffer_header_bytes_ce0 = 1'b1;
    end else begin
        ringbuffer_header_bytes_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        ringbuffer_header_bytes_ce1 = 1'b1;
    end else begin
        ringbuffer_header_bytes_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ringbuffer_header_bytes_we0 = 1'b1;
    end else begin
        ringbuffer_header_bytes_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (m_axi_ps_ddr_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((exitcond66_fu_354_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (m_axi_ps_ddr_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            if (((icmp_ln115_fu_421_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state49))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state50 : begin
            if (((m_axi_ps_ddr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            if (((exitcond55_fu_501_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            if (((1'b1 == ap_CS_fsm_state53) & (m_axi_ps_ddr_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            if (((m_axi_ps_ddr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state54))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            if (((1'b1 == ap_CS_fsm_state58) & (m_axi_ps_ddr_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            if (((exitcond4_fu_572_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state60 : begin
            if (((1'b1 == ap_CS_fsm_state60) & (m_axi_ps_ddr_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            if ((~((icmp_ln115_reg_754 == 1'd0) & (m_axi_ps_ddr_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state65))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        ap_ST_fsm_state66 : begin
            if (((m_axi_ps_ddr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state66))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        ap_ST_fsm_state67 : begin
            if (((1'b1 == ap_CS_fsm_state67) & (m_axi_ps_ddr_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            if (((1'b1 == ap_CS_fsm_state72) & (m_axi_ps_ddr_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln116_fu_611_p2 = (dropped_lin_counter + 16'd1);

assign add_ln117_1_fu_623_p2 = (trunc_ln116_fu_607_p1 + 8'd1);

assign add_ln117_fu_487_p2 = (ddr_header + 32'd4);

assign add_ln122_1_fu_471_p2 = (add_ln122_fu_465_p2 + ddr_header);

assign add_ln122_fu_465_p2 = (sub_ln122_fu_459_p2 + 32'd28);

assign add_ln17_fu_523_p2 = (ddr_header + 32'd24);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state65 = ((icmp_ln115_reg_754 == 1'd0) & (m_axi_ps_ddr_BVALID == 1'b0));
end

assign data_address0 = loop_index_cast_fu_513_p1;

assign empty_67_fu_360_p2 = (loop_index4_fu_114 + 5'd1);

assign empty_70_fu_507_p2 = (loop_index_fu_122 + 5'd1);

assign empty_74_fu_578_p2 = (loop_index_i_fu_126 + 3'd1);

assign exitcond4_fu_572_p2 = ((loop_index_i_fu_126 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond55_fu_501_p2 = ((loop_index_fu_122 == 5'd28) ? 1'b1 : 1'b0);

assign exitcond66_fu_354_p2 = ((loop_index4_fu_114 == 5'd28) ? 1'b1 : 1'b0);

assign grp_fu_403_p0 = (writeLinIndex_fu_387_p5 + 32'd1);

assign grp_fu_403_p1 = {{{{reg_321}, {reg_326}}, {reg_331}}, {reg_335}};

assign icmp_ln115_fu_421_p2 = ((grp_fu_403_p2 == readLinIndex_fu_409_p5) ? 1'b1 : 1'b0);

assign loop_index4_cast_fu_371_p1 = loop_index4_load_reg_649;

assign loop_index_cast_fu_513_p1 = loop_index_fu_122;

assign m_axi_ps_ddr_ARADDR = ddr_header;

assign m_axi_ps_ddr_ARBURST = 2'd0;

assign m_axi_ps_ddr_ARCACHE = 4'd0;

assign m_axi_ps_ddr_ARID = 1'd0;

assign m_axi_ps_ddr_ARLEN = 32'd28;

assign m_axi_ps_ddr_ARLOCK = 2'd0;

assign m_axi_ps_ddr_ARPROT = 3'd0;

assign m_axi_ps_ddr_ARQOS = 4'd0;

assign m_axi_ps_ddr_ARREGION = 4'd0;

assign m_axi_ps_ddr_ARSIZE = 3'd0;

assign m_axi_ps_ddr_ARUSER = 1'd0;

assign m_axi_ps_ddr_AWBURST = 2'd0;

assign m_axi_ps_ddr_AWCACHE = 4'd0;

assign m_axi_ps_ddr_AWID = 1'd0;

assign m_axi_ps_ddr_AWLOCK = 2'd0;

assign m_axi_ps_ddr_AWPROT = 3'd0;

assign m_axi_ps_ddr_AWQOS = 4'd0;

assign m_axi_ps_ddr_AWREGION = 4'd0;

assign m_axi_ps_ddr_AWSIZE = 3'd0;

assign m_axi_ps_ddr_AWUSER = 1'd0;

assign m_axi_ps_ddr_WID = 1'd0;

assign m_axi_ps_ddr_WLAST = 1'b0;

assign m_axi_ps_ddr_WSTRB = 1'd1;

assign m_axi_ps_ddr_WUSER = 1'd0;

assign readLinIndex_fu_409_p5 = {{{{reg_331}, {reg_335}}, {ringbuffer_header_bytes_q0}}, {ringbuffer_header_bytes_q1}};

assign shl_ln122_1_fu_446_p6 = {{{{{trunc_ln122_1_fu_443_p1}, {ringbuffer_header_bytes_load_9_reg_699}}, {reg_321}}, {reg_326}}, {2'd0}};

assign shl_ln_fu_430_p6 = {{{{{trunc_ln122_fu_427_p1}, {ringbuffer_header_bytes_load_9_reg_699}}, {reg_321}}, {reg_326}}, {5'd0}};

assign sub_ln122_fu_459_p2 = (shl_ln_fu_430_p6 - shl_ln122_1_fu_446_p6);

assign tmp_6_fu_588_p5 = loop_index_i_fu_126[1:0];

assign trunc_ln116_fu_607_p1 = dropped_lin_counter[7:0];

assign trunc_ln122_1_fu_443_p1 = ringbuffer_header_bytes_load_8_reg_692[5:0];

assign trunc_ln122_fu_427_p1 = ringbuffer_header_bytes_load_8_reg_692[2:0];

assign writeLinIndex_fu_387_p5 = {{{{ringbuffer_header_bytes_load_8_reg_692}, {ringbuffer_header_bytes_load_9_reg_699}}, {ringbuffer_header_bytes_q0}}, {ringbuffer_header_bytes_q1}};

assign write_index_array_3_fu_566_p1 = nextWriteLinIndex_reg_746[7:0];

endmodule //clu_write_lin_ddr_1
