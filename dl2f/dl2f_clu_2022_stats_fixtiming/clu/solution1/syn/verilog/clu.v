// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="clu_clu,hls_ip_2022_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=7881,HLS_SYN_LUT=12890,HLS_VERSION=2022_2}" *)

module clu (
        ap_clk,
        ap_rst_n,
        m_axi_can_addr_AWVALID,
        m_axi_can_addr_AWREADY,
        m_axi_can_addr_AWADDR,
        m_axi_can_addr_AWID,
        m_axi_can_addr_AWLEN,
        m_axi_can_addr_AWSIZE,
        m_axi_can_addr_AWBURST,
        m_axi_can_addr_AWLOCK,
        m_axi_can_addr_AWCACHE,
        m_axi_can_addr_AWPROT,
        m_axi_can_addr_AWQOS,
        m_axi_can_addr_AWREGION,
        m_axi_can_addr_AWUSER,
        m_axi_can_addr_WVALID,
        m_axi_can_addr_WREADY,
        m_axi_can_addr_WDATA,
        m_axi_can_addr_WSTRB,
        m_axi_can_addr_WLAST,
        m_axi_can_addr_WID,
        m_axi_can_addr_WUSER,
        m_axi_can_addr_ARVALID,
        m_axi_can_addr_ARREADY,
        m_axi_can_addr_ARADDR,
        m_axi_can_addr_ARID,
        m_axi_can_addr_ARLEN,
        m_axi_can_addr_ARSIZE,
        m_axi_can_addr_ARBURST,
        m_axi_can_addr_ARLOCK,
        m_axi_can_addr_ARCACHE,
        m_axi_can_addr_ARPROT,
        m_axi_can_addr_ARQOS,
        m_axi_can_addr_ARREGION,
        m_axi_can_addr_ARUSER,
        m_axi_can_addr_RVALID,
        m_axi_can_addr_RREADY,
        m_axi_can_addr_RDATA,
        m_axi_can_addr_RLAST,
        m_axi_can_addr_RID,
        m_axi_can_addr_RUSER,
        m_axi_can_addr_RRESP,
        m_axi_can_addr_BVALID,
        m_axi_can_addr_BREADY,
        m_axi_can_addr_BRESP,
        m_axi_can_addr_BID,
        m_axi_can_addr_BUSER,
        m_axi_uart_addr_AWVALID,
        m_axi_uart_addr_AWREADY,
        m_axi_uart_addr_AWADDR,
        m_axi_uart_addr_AWID,
        m_axi_uart_addr_AWLEN,
        m_axi_uart_addr_AWSIZE,
        m_axi_uart_addr_AWBURST,
        m_axi_uart_addr_AWLOCK,
        m_axi_uart_addr_AWCACHE,
        m_axi_uart_addr_AWPROT,
        m_axi_uart_addr_AWQOS,
        m_axi_uart_addr_AWREGION,
        m_axi_uart_addr_AWUSER,
        m_axi_uart_addr_WVALID,
        m_axi_uart_addr_WREADY,
        m_axi_uart_addr_WDATA,
        m_axi_uart_addr_WSTRB,
        m_axi_uart_addr_WLAST,
        m_axi_uart_addr_WID,
        m_axi_uart_addr_WUSER,
        m_axi_uart_addr_ARVALID,
        m_axi_uart_addr_ARREADY,
        m_axi_uart_addr_ARADDR,
        m_axi_uart_addr_ARID,
        m_axi_uart_addr_ARLEN,
        m_axi_uart_addr_ARSIZE,
        m_axi_uart_addr_ARBURST,
        m_axi_uart_addr_ARLOCK,
        m_axi_uart_addr_ARCACHE,
        m_axi_uart_addr_ARPROT,
        m_axi_uart_addr_ARQOS,
        m_axi_uart_addr_ARREGION,
        m_axi_uart_addr_ARUSER,
        m_axi_uart_addr_RVALID,
        m_axi_uart_addr_RREADY,
        m_axi_uart_addr_RDATA,
        m_axi_uart_addr_RLAST,
        m_axi_uart_addr_RID,
        m_axi_uart_addr_RUSER,
        m_axi_uart_addr_RRESP,
        m_axi_uart_addr_BVALID,
        m_axi_uart_addr_BREADY,
        m_axi_uart_addr_BRESP,
        m_axi_uart_addr_BID,
        m_axi_uart_addr_BUSER,
        m_axi_lin_addr_AWVALID,
        m_axi_lin_addr_AWREADY,
        m_axi_lin_addr_AWADDR,
        m_axi_lin_addr_AWID,
        m_axi_lin_addr_AWLEN,
        m_axi_lin_addr_AWSIZE,
        m_axi_lin_addr_AWBURST,
        m_axi_lin_addr_AWLOCK,
        m_axi_lin_addr_AWCACHE,
        m_axi_lin_addr_AWPROT,
        m_axi_lin_addr_AWQOS,
        m_axi_lin_addr_AWREGION,
        m_axi_lin_addr_AWUSER,
        m_axi_lin_addr_WVALID,
        m_axi_lin_addr_WREADY,
        m_axi_lin_addr_WDATA,
        m_axi_lin_addr_WSTRB,
        m_axi_lin_addr_WLAST,
        m_axi_lin_addr_WID,
        m_axi_lin_addr_WUSER,
        m_axi_lin_addr_ARVALID,
        m_axi_lin_addr_ARREADY,
        m_axi_lin_addr_ARADDR,
        m_axi_lin_addr_ARID,
        m_axi_lin_addr_ARLEN,
        m_axi_lin_addr_ARSIZE,
        m_axi_lin_addr_ARBURST,
        m_axi_lin_addr_ARLOCK,
        m_axi_lin_addr_ARCACHE,
        m_axi_lin_addr_ARPROT,
        m_axi_lin_addr_ARQOS,
        m_axi_lin_addr_ARREGION,
        m_axi_lin_addr_ARUSER,
        m_axi_lin_addr_RVALID,
        m_axi_lin_addr_RREADY,
        m_axi_lin_addr_RDATA,
        m_axi_lin_addr_RLAST,
        m_axi_lin_addr_RID,
        m_axi_lin_addr_RUSER,
        m_axi_lin_addr_RRESP,
        m_axi_lin_addr_BVALID,
        m_axi_lin_addr_BREADY,
        m_axi_lin_addr_BRESP,
        m_axi_lin_addr_BID,
        m_axi_lin_addr_BUSER,
        m_axi_ps_ddr_AWVALID,
        m_axi_ps_ddr_AWREADY,
        m_axi_ps_ddr_AWADDR,
        m_axi_ps_ddr_AWID,
        m_axi_ps_ddr_AWLEN,
        m_axi_ps_ddr_AWSIZE,
        m_axi_ps_ddr_AWBURST,
        m_axi_ps_ddr_AWLOCK,
        m_axi_ps_ddr_AWCACHE,
        m_axi_ps_ddr_AWPROT,
        m_axi_ps_ddr_AWQOS,
        m_axi_ps_ddr_AWREGION,
        m_axi_ps_ddr_AWUSER,
        m_axi_ps_ddr_WVALID,
        m_axi_ps_ddr_WREADY,
        m_axi_ps_ddr_WDATA,
        m_axi_ps_ddr_WSTRB,
        m_axi_ps_ddr_WLAST,
        m_axi_ps_ddr_WID,
        m_axi_ps_ddr_WUSER,
        m_axi_ps_ddr_ARVALID,
        m_axi_ps_ddr_ARREADY,
        m_axi_ps_ddr_ARADDR,
        m_axi_ps_ddr_ARID,
        m_axi_ps_ddr_ARLEN,
        m_axi_ps_ddr_ARSIZE,
        m_axi_ps_ddr_ARBURST,
        m_axi_ps_ddr_ARLOCK,
        m_axi_ps_ddr_ARCACHE,
        m_axi_ps_ddr_ARPROT,
        m_axi_ps_ddr_ARQOS,
        m_axi_ps_ddr_ARREGION,
        m_axi_ps_ddr_ARUSER,
        m_axi_ps_ddr_RVALID,
        m_axi_ps_ddr_RREADY,
        m_axi_ps_ddr_RDATA,
        m_axi_ps_ddr_RLAST,
        m_axi_ps_ddr_RID,
        m_axi_ps_ddr_RUSER,
        m_axi_ps_ddr_RRESP,
        m_axi_ps_ddr_BVALID,
        m_axi_ps_ddr_BREADY,
        m_axi_ps_ddr_BRESP,
        m_axi_ps_ddr_BID,
        m_axi_ps_ddr_BUSER,
        timestamp,
        s_axi_EN_AWVALID,
        s_axi_EN_AWREADY,
        s_axi_EN_AWADDR,
        s_axi_EN_WVALID,
        s_axi_EN_WREADY,
        s_axi_EN_WDATA,
        s_axi_EN_WSTRB,
        s_axi_EN_ARVALID,
        s_axi_EN_ARREADY,
        s_axi_EN_ARADDR,
        s_axi_EN_RVALID,
        s_axi_EN_RREADY,
        s_axi_EN_RDATA,
        s_axi_EN_RRESP,
        s_axi_EN_BVALID,
        s_axi_EN_BREADY,
        s_axi_EN_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;
parameter    C_S_AXI_EN_DATA_WIDTH = 32;
parameter    C_S_AXI_EN_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_CAN_ADDR_ID_WIDTH = 1;
parameter    C_M_AXI_CAN_ADDR_ADDR_WIDTH = 32;
parameter    C_M_AXI_CAN_ADDR_DATA_WIDTH = 32;
parameter    C_M_AXI_CAN_ADDR_AWUSER_WIDTH = 1;
parameter    C_M_AXI_CAN_ADDR_ARUSER_WIDTH = 1;
parameter    C_M_AXI_CAN_ADDR_WUSER_WIDTH = 1;
parameter    C_M_AXI_CAN_ADDR_RUSER_WIDTH = 1;
parameter    C_M_AXI_CAN_ADDR_BUSER_WIDTH = 1;
parameter    C_M_AXI_CAN_ADDR_USER_VALUE = 0;
parameter    C_M_AXI_CAN_ADDR_PROT_VALUE = 0;
parameter    C_M_AXI_CAN_ADDR_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_LIN_ADDR_ID_WIDTH = 1;
parameter    C_M_AXI_LIN_ADDR_ADDR_WIDTH = 32;
parameter    C_M_AXI_LIN_ADDR_DATA_WIDTH = 32;
parameter    C_M_AXI_LIN_ADDR_AWUSER_WIDTH = 1;
parameter    C_M_AXI_LIN_ADDR_ARUSER_WIDTH = 1;
parameter    C_M_AXI_LIN_ADDR_WUSER_WIDTH = 1;
parameter    C_M_AXI_LIN_ADDR_RUSER_WIDTH = 1;
parameter    C_M_AXI_LIN_ADDR_BUSER_WIDTH = 1;
parameter    C_M_AXI_LIN_ADDR_USER_VALUE = 0;
parameter    C_M_AXI_LIN_ADDR_PROT_VALUE = 0;
parameter    C_M_AXI_LIN_ADDR_CACHE_VALUE = 3;
parameter    C_M_AXI_PS_DDR_ID_WIDTH = 1;
parameter    C_M_AXI_PS_DDR_ADDR_WIDTH = 32;
parameter    C_M_AXI_PS_DDR_DATA_WIDTH = 32;
parameter    C_M_AXI_PS_DDR_AWUSER_WIDTH = 1;
parameter    C_M_AXI_PS_DDR_ARUSER_WIDTH = 1;
parameter    C_M_AXI_PS_DDR_WUSER_WIDTH = 1;
parameter    C_M_AXI_PS_DDR_RUSER_WIDTH = 1;
parameter    C_M_AXI_PS_DDR_BUSER_WIDTH = 1;
parameter    C_M_AXI_PS_DDR_USER_VALUE = 0;
parameter    C_M_AXI_PS_DDR_PROT_VALUE = 0;
parameter    C_M_AXI_PS_DDR_CACHE_VALUE = 3;
parameter    C_M_AXI_UART_ADDR_ID_WIDTH = 1;
parameter    C_M_AXI_UART_ADDR_ADDR_WIDTH = 32;
parameter    C_M_AXI_UART_ADDR_DATA_WIDTH = 32;
parameter    C_M_AXI_UART_ADDR_AWUSER_WIDTH = 1;
parameter    C_M_AXI_UART_ADDR_ARUSER_WIDTH = 1;
parameter    C_M_AXI_UART_ADDR_WUSER_WIDTH = 1;
parameter    C_M_AXI_UART_ADDR_RUSER_WIDTH = 1;
parameter    C_M_AXI_UART_ADDR_BUSER_WIDTH = 1;
parameter    C_M_AXI_UART_ADDR_USER_VALUE = 0;
parameter    C_M_AXI_UART_ADDR_PROT_VALUE = 0;
parameter    C_M_AXI_UART_ADDR_CACHE_VALUE = 3;

parameter C_S_AXI_EN_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_CAN_ADDR_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_LIN_ADDR_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_PS_DDR_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_UART_ADDR_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_can_addr_AWVALID;
input   m_axi_can_addr_AWREADY;
output  [C_M_AXI_CAN_ADDR_ADDR_WIDTH - 1:0] m_axi_can_addr_AWADDR;
output  [C_M_AXI_CAN_ADDR_ID_WIDTH - 1:0] m_axi_can_addr_AWID;
output  [7:0] m_axi_can_addr_AWLEN;
output  [2:0] m_axi_can_addr_AWSIZE;
output  [1:0] m_axi_can_addr_AWBURST;
output  [1:0] m_axi_can_addr_AWLOCK;
output  [3:0] m_axi_can_addr_AWCACHE;
output  [2:0] m_axi_can_addr_AWPROT;
output  [3:0] m_axi_can_addr_AWQOS;
output  [3:0] m_axi_can_addr_AWREGION;
output  [C_M_AXI_CAN_ADDR_AWUSER_WIDTH - 1:0] m_axi_can_addr_AWUSER;
output   m_axi_can_addr_WVALID;
input   m_axi_can_addr_WREADY;
output  [C_M_AXI_CAN_ADDR_DATA_WIDTH - 1:0] m_axi_can_addr_WDATA;
output  [C_M_AXI_CAN_ADDR_WSTRB_WIDTH - 1:0] m_axi_can_addr_WSTRB;
output   m_axi_can_addr_WLAST;
output  [C_M_AXI_CAN_ADDR_ID_WIDTH - 1:0] m_axi_can_addr_WID;
output  [C_M_AXI_CAN_ADDR_WUSER_WIDTH - 1:0] m_axi_can_addr_WUSER;
output   m_axi_can_addr_ARVALID;
input   m_axi_can_addr_ARREADY;
output  [C_M_AXI_CAN_ADDR_ADDR_WIDTH - 1:0] m_axi_can_addr_ARADDR;
output  [C_M_AXI_CAN_ADDR_ID_WIDTH - 1:0] m_axi_can_addr_ARID;
output  [7:0] m_axi_can_addr_ARLEN;
output  [2:0] m_axi_can_addr_ARSIZE;
output  [1:0] m_axi_can_addr_ARBURST;
output  [1:0] m_axi_can_addr_ARLOCK;
output  [3:0] m_axi_can_addr_ARCACHE;
output  [2:0] m_axi_can_addr_ARPROT;
output  [3:0] m_axi_can_addr_ARQOS;
output  [3:0] m_axi_can_addr_ARREGION;
output  [C_M_AXI_CAN_ADDR_ARUSER_WIDTH - 1:0] m_axi_can_addr_ARUSER;
input   m_axi_can_addr_RVALID;
output   m_axi_can_addr_RREADY;
input  [C_M_AXI_CAN_ADDR_DATA_WIDTH - 1:0] m_axi_can_addr_RDATA;
input   m_axi_can_addr_RLAST;
input  [C_M_AXI_CAN_ADDR_ID_WIDTH - 1:0] m_axi_can_addr_RID;
input  [C_M_AXI_CAN_ADDR_RUSER_WIDTH - 1:0] m_axi_can_addr_RUSER;
input  [1:0] m_axi_can_addr_RRESP;
input   m_axi_can_addr_BVALID;
output   m_axi_can_addr_BREADY;
input  [1:0] m_axi_can_addr_BRESP;
input  [C_M_AXI_CAN_ADDR_ID_WIDTH - 1:0] m_axi_can_addr_BID;
input  [C_M_AXI_CAN_ADDR_BUSER_WIDTH - 1:0] m_axi_can_addr_BUSER;
output   m_axi_uart_addr_AWVALID;
input   m_axi_uart_addr_AWREADY;
output  [C_M_AXI_UART_ADDR_ADDR_WIDTH - 1:0] m_axi_uart_addr_AWADDR;
output  [C_M_AXI_UART_ADDR_ID_WIDTH - 1:0] m_axi_uart_addr_AWID;
output  [7:0] m_axi_uart_addr_AWLEN;
output  [2:0] m_axi_uart_addr_AWSIZE;
output  [1:0] m_axi_uart_addr_AWBURST;
output  [1:0] m_axi_uart_addr_AWLOCK;
output  [3:0] m_axi_uart_addr_AWCACHE;
output  [2:0] m_axi_uart_addr_AWPROT;
output  [3:0] m_axi_uart_addr_AWQOS;
output  [3:0] m_axi_uart_addr_AWREGION;
output  [C_M_AXI_UART_ADDR_AWUSER_WIDTH - 1:0] m_axi_uart_addr_AWUSER;
output   m_axi_uart_addr_WVALID;
input   m_axi_uart_addr_WREADY;
output  [C_M_AXI_UART_ADDR_DATA_WIDTH - 1:0] m_axi_uart_addr_WDATA;
output  [C_M_AXI_UART_ADDR_WSTRB_WIDTH - 1:0] m_axi_uart_addr_WSTRB;
output   m_axi_uart_addr_WLAST;
output  [C_M_AXI_UART_ADDR_ID_WIDTH - 1:0] m_axi_uart_addr_WID;
output  [C_M_AXI_UART_ADDR_WUSER_WIDTH - 1:0] m_axi_uart_addr_WUSER;
output   m_axi_uart_addr_ARVALID;
input   m_axi_uart_addr_ARREADY;
output  [C_M_AXI_UART_ADDR_ADDR_WIDTH - 1:0] m_axi_uart_addr_ARADDR;
output  [C_M_AXI_UART_ADDR_ID_WIDTH - 1:0] m_axi_uart_addr_ARID;
output  [7:0] m_axi_uart_addr_ARLEN;
output  [2:0] m_axi_uart_addr_ARSIZE;
output  [1:0] m_axi_uart_addr_ARBURST;
output  [1:0] m_axi_uart_addr_ARLOCK;
output  [3:0] m_axi_uart_addr_ARCACHE;
output  [2:0] m_axi_uart_addr_ARPROT;
output  [3:0] m_axi_uart_addr_ARQOS;
output  [3:0] m_axi_uart_addr_ARREGION;
output  [C_M_AXI_UART_ADDR_ARUSER_WIDTH - 1:0] m_axi_uart_addr_ARUSER;
input   m_axi_uart_addr_RVALID;
output   m_axi_uart_addr_RREADY;
input  [C_M_AXI_UART_ADDR_DATA_WIDTH - 1:0] m_axi_uart_addr_RDATA;
input   m_axi_uart_addr_RLAST;
input  [C_M_AXI_UART_ADDR_ID_WIDTH - 1:0] m_axi_uart_addr_RID;
input  [C_M_AXI_UART_ADDR_RUSER_WIDTH - 1:0] m_axi_uart_addr_RUSER;
input  [1:0] m_axi_uart_addr_RRESP;
input   m_axi_uart_addr_BVALID;
output   m_axi_uart_addr_BREADY;
input  [1:0] m_axi_uart_addr_BRESP;
input  [C_M_AXI_UART_ADDR_ID_WIDTH - 1:0] m_axi_uart_addr_BID;
input  [C_M_AXI_UART_ADDR_BUSER_WIDTH - 1:0] m_axi_uart_addr_BUSER;
output   m_axi_lin_addr_AWVALID;
input   m_axi_lin_addr_AWREADY;
output  [C_M_AXI_LIN_ADDR_ADDR_WIDTH - 1:0] m_axi_lin_addr_AWADDR;
output  [C_M_AXI_LIN_ADDR_ID_WIDTH - 1:0] m_axi_lin_addr_AWID;
output  [7:0] m_axi_lin_addr_AWLEN;
output  [2:0] m_axi_lin_addr_AWSIZE;
output  [1:0] m_axi_lin_addr_AWBURST;
output  [1:0] m_axi_lin_addr_AWLOCK;
output  [3:0] m_axi_lin_addr_AWCACHE;
output  [2:0] m_axi_lin_addr_AWPROT;
output  [3:0] m_axi_lin_addr_AWQOS;
output  [3:0] m_axi_lin_addr_AWREGION;
output  [C_M_AXI_LIN_ADDR_AWUSER_WIDTH - 1:0] m_axi_lin_addr_AWUSER;
output   m_axi_lin_addr_WVALID;
input   m_axi_lin_addr_WREADY;
output  [C_M_AXI_LIN_ADDR_DATA_WIDTH - 1:0] m_axi_lin_addr_WDATA;
output  [C_M_AXI_LIN_ADDR_WSTRB_WIDTH - 1:0] m_axi_lin_addr_WSTRB;
output   m_axi_lin_addr_WLAST;
output  [C_M_AXI_LIN_ADDR_ID_WIDTH - 1:0] m_axi_lin_addr_WID;
output  [C_M_AXI_LIN_ADDR_WUSER_WIDTH - 1:0] m_axi_lin_addr_WUSER;
output   m_axi_lin_addr_ARVALID;
input   m_axi_lin_addr_ARREADY;
output  [C_M_AXI_LIN_ADDR_ADDR_WIDTH - 1:0] m_axi_lin_addr_ARADDR;
output  [C_M_AXI_LIN_ADDR_ID_WIDTH - 1:0] m_axi_lin_addr_ARID;
output  [7:0] m_axi_lin_addr_ARLEN;
output  [2:0] m_axi_lin_addr_ARSIZE;
output  [1:0] m_axi_lin_addr_ARBURST;
output  [1:0] m_axi_lin_addr_ARLOCK;
output  [3:0] m_axi_lin_addr_ARCACHE;
output  [2:0] m_axi_lin_addr_ARPROT;
output  [3:0] m_axi_lin_addr_ARQOS;
output  [3:0] m_axi_lin_addr_ARREGION;
output  [C_M_AXI_LIN_ADDR_ARUSER_WIDTH - 1:0] m_axi_lin_addr_ARUSER;
input   m_axi_lin_addr_RVALID;
output   m_axi_lin_addr_RREADY;
input  [C_M_AXI_LIN_ADDR_DATA_WIDTH - 1:0] m_axi_lin_addr_RDATA;
input   m_axi_lin_addr_RLAST;
input  [C_M_AXI_LIN_ADDR_ID_WIDTH - 1:0] m_axi_lin_addr_RID;
input  [C_M_AXI_LIN_ADDR_RUSER_WIDTH - 1:0] m_axi_lin_addr_RUSER;
input  [1:0] m_axi_lin_addr_RRESP;
input   m_axi_lin_addr_BVALID;
output   m_axi_lin_addr_BREADY;
input  [1:0] m_axi_lin_addr_BRESP;
input  [C_M_AXI_LIN_ADDR_ID_WIDTH - 1:0] m_axi_lin_addr_BID;
input  [C_M_AXI_LIN_ADDR_BUSER_WIDTH - 1:0] m_axi_lin_addr_BUSER;
output   m_axi_ps_ddr_AWVALID;
input   m_axi_ps_ddr_AWREADY;
output  [C_M_AXI_PS_DDR_ADDR_WIDTH - 1:0] m_axi_ps_ddr_AWADDR;
output  [C_M_AXI_PS_DDR_ID_WIDTH - 1:0] m_axi_ps_ddr_AWID;
output  [7:0] m_axi_ps_ddr_AWLEN;
output  [2:0] m_axi_ps_ddr_AWSIZE;
output  [1:0] m_axi_ps_ddr_AWBURST;
output  [1:0] m_axi_ps_ddr_AWLOCK;
output  [3:0] m_axi_ps_ddr_AWCACHE;
output  [2:0] m_axi_ps_ddr_AWPROT;
output  [3:0] m_axi_ps_ddr_AWQOS;
output  [3:0] m_axi_ps_ddr_AWREGION;
output  [C_M_AXI_PS_DDR_AWUSER_WIDTH - 1:0] m_axi_ps_ddr_AWUSER;
output   m_axi_ps_ddr_WVALID;
input   m_axi_ps_ddr_WREADY;
output  [C_M_AXI_PS_DDR_DATA_WIDTH - 1:0] m_axi_ps_ddr_WDATA;
output  [C_M_AXI_PS_DDR_WSTRB_WIDTH - 1:0] m_axi_ps_ddr_WSTRB;
output   m_axi_ps_ddr_WLAST;
output  [C_M_AXI_PS_DDR_ID_WIDTH - 1:0] m_axi_ps_ddr_WID;
output  [C_M_AXI_PS_DDR_WUSER_WIDTH - 1:0] m_axi_ps_ddr_WUSER;
output   m_axi_ps_ddr_ARVALID;
input   m_axi_ps_ddr_ARREADY;
output  [C_M_AXI_PS_DDR_ADDR_WIDTH - 1:0] m_axi_ps_ddr_ARADDR;
output  [C_M_AXI_PS_DDR_ID_WIDTH - 1:0] m_axi_ps_ddr_ARID;
output  [7:0] m_axi_ps_ddr_ARLEN;
output  [2:0] m_axi_ps_ddr_ARSIZE;
output  [1:0] m_axi_ps_ddr_ARBURST;
output  [1:0] m_axi_ps_ddr_ARLOCK;
output  [3:0] m_axi_ps_ddr_ARCACHE;
output  [2:0] m_axi_ps_ddr_ARPROT;
output  [3:0] m_axi_ps_ddr_ARQOS;
output  [3:0] m_axi_ps_ddr_ARREGION;
output  [C_M_AXI_PS_DDR_ARUSER_WIDTH - 1:0] m_axi_ps_ddr_ARUSER;
input   m_axi_ps_ddr_RVALID;
output   m_axi_ps_ddr_RREADY;
input  [C_M_AXI_PS_DDR_DATA_WIDTH - 1:0] m_axi_ps_ddr_RDATA;
input   m_axi_ps_ddr_RLAST;
input  [C_M_AXI_PS_DDR_ID_WIDTH - 1:0] m_axi_ps_ddr_RID;
input  [C_M_AXI_PS_DDR_RUSER_WIDTH - 1:0] m_axi_ps_ddr_RUSER;
input  [1:0] m_axi_ps_ddr_RRESP;
input   m_axi_ps_ddr_BVALID;
output   m_axi_ps_ddr_BREADY;
input  [1:0] m_axi_ps_ddr_BRESP;
input  [C_M_AXI_PS_DDR_ID_WIDTH - 1:0] m_axi_ps_ddr_BID;
input  [C_M_AXI_PS_DDR_BUSER_WIDTH - 1:0] m_axi_ps_ddr_BUSER;
input  [63:0] timestamp;
input   s_axi_EN_AWVALID;
output   s_axi_EN_AWREADY;
input  [C_S_AXI_EN_ADDR_WIDTH - 1:0] s_axi_EN_AWADDR;
input   s_axi_EN_WVALID;
output   s_axi_EN_WREADY;
input  [C_S_AXI_EN_DATA_WIDTH - 1:0] s_axi_EN_WDATA;
input  [C_S_AXI_EN_WSTRB_WIDTH - 1:0] s_axi_EN_WSTRB;
input   s_axi_EN_ARVALID;
output   s_axi_EN_ARREADY;
input  [C_S_AXI_EN_ADDR_WIDTH - 1:0] s_axi_EN_ARADDR;
output   s_axi_EN_RVALID;
input   s_axi_EN_RREADY;
output  [C_S_AXI_EN_DATA_WIDTH - 1:0] s_axi_EN_RDATA;
output  [1:0] s_axi_EN_RRESP;
output   s_axi_EN_BVALID;
input   s_axi_EN_BREADY;
output  [1:0] s_axi_EN_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] can_ptr;
wire   [31:0] uart_ptr;
wire   [31:0] lin_ptr;
wire   [31:0] received_uart;
reg   [31:0] lin_0_received_1_data_reg;
reg    lin_0_received_1_vld_reg;
wire    lin_0_received_1_vld_in;
reg    lin_0_received_1_ack_in;
reg   [31:0] lin_1_received_1_data_reg;
reg    lin_1_received_1_vld_reg;
wire    lin_1_received_1_vld_in;
reg    lin_1_received_1_ack_in;
reg   [31:0] lin_2_received_1_data_reg;
reg    lin_2_received_1_vld_reg;
wire    lin_2_received_1_vld_in;
reg    lin_2_received_1_ack_in;
reg   [31:0] lin_3_received_1_data_reg;
reg    lin_3_received_1_vld_reg;
wire    lin_3_received_1_vld_in;
reg    lin_3_received_1_ack_in;
reg   [31:0] lin_4_received_1_data_reg;
reg    lin_4_received_1_vld_reg;
wire    lin_4_received_1_vld_in;
reg    lin_4_received_1_ack_in;
reg   [31:0] lin_5_received_1_data_reg;
reg    lin_5_received_1_vld_reg;
wire    lin_5_received_1_vld_in;
reg    lin_5_received_1_ack_in;
reg   [31:0] lin_6_received_1_data_reg;
reg    lin_6_received_1_vld_reg;
wire    lin_6_received_1_vld_in;
reg    lin_6_received_1_ack_in;
reg   [31:0] lin_7_received_1_data_reg;
reg    lin_7_received_1_vld_reg;
wire    lin_7_received_1_vld_in;
reg    lin_7_received_1_ack_in;
reg   [31:0] lin_8_received_1_data_reg;
reg    lin_8_received_1_vld_reg;
wire    lin_8_received_1_vld_in;
reg    lin_8_received_1_ack_in;
reg   [31:0] lin_9_received_1_data_reg;
reg    lin_9_received_1_vld_reg;
wire    lin_9_received_1_vld_in;
reg    lin_9_received_1_ack_in;
reg   [31:0] lin_dropped_1_data_reg;
reg    lin_dropped_1_vld_reg;
wire    lin_dropped_1_vld_in;
reg    lin_dropped_1_ack_in;
wire   [31:0] can_en;
wire   [7:0] uart_en;
wire   [31:0] lin_en;
wire   [31:0] can_ddr;
wire   [31:0] uart_ddr;
wire   [31:0] lin_ddr;
reg   [1:0] mode_nr;
reg    can_addr_blk_n_AR;
wire    ap_CS_fsm_state5;
reg    can_addr_blk_n_R;
wire    ap_CS_fsm_state12;
reg   [31:0] lin_ddr_read_reg_769;
reg   [31:0] can_ddr_read_reg_774;
reg   [31:0] lin_ptr_read_reg_779;
reg   [31:0] can_ptr_read_reg_784;
wire   [9:0] trunc_ln378_fu_477_p1;
reg   [9:0] trunc_ln378_reg_800;
wire   [1:0] mode_nr_load_load_fu_467_p1;
wire   [11:0] trunc_ln337_fu_486_p1;
reg   [11:0] trunc_ln337_reg_812;
wire   [3:0] lin_nr_2_fu_505_p2;
reg   [3:0] lin_nr_2_reg_823;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln323_fu_526_p2;
reg   [0:0] icmp_ln323_reg_828;
wire   [0:0] icmp_ln378_fu_499_p2;
wire   [31:0] linbase_mod_fu_544_p2;
reg   [31:0] linbase_mod_reg_832;
wire   [3:0] add_ln337_fu_569_p2;
reg   [3:0] add_ln337_reg_843;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln301_fu_590_p2;
reg   [0:0] icmp_ln301_reg_848;
wire   [0:0] icmp_ln337_fu_563_p2;
wire   [31:0] canaddr_mod_fu_608_p2;
reg   [31:0] canaddr_mod_reg_852;
reg   [29:0] trunc_ln_reg_857;
reg   [31:0] result_reg_868;
wire   [5:0] trunc_ln304_fu_654_p1;
reg   [5:0] trunc_ln304_reg_873;
reg   [6:0] tmp_9_reg_878;
reg   [6:0] tmp_10_reg_883;
reg   [6:0] tmp_reg_888;
reg   [6:0] tmp_8_reg_893;
wire   [0:0] icmp_ln306_2_fu_718_p2;
reg   [0:0] icmp_ln306_2_reg_898;
wire    ap_CS_fsm_state13;
wire   [7:0] readIndex_2_fu_750_p3;
reg   [7:0] readIndex_2_reg_902;
wire    grp_single_lin_process_1_fu_362_ap_start;
wire    grp_single_lin_process_1_fu_362_ap_done;
wire    grp_single_lin_process_1_fu_362_ap_idle;
wire    grp_single_lin_process_1_fu_362_ap_ready;
wire    grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWVALID;
wire   [31:0] grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWADDR;
wire   [0:0] grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWID;
wire   [31:0] grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWLEN;
wire   [2:0] grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWSIZE;
wire   [1:0] grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWBURST;
wire   [1:0] grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWLOCK;
wire   [3:0] grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWCACHE;
wire   [2:0] grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWPROT;
wire   [3:0] grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWQOS;
wire   [3:0] grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWREGION;
wire   [0:0] grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWUSER;
wire    grp_single_lin_process_1_fu_362_m_axi_lin_addr_WVALID;
wire   [31:0] grp_single_lin_process_1_fu_362_m_axi_lin_addr_WDATA;
wire   [3:0] grp_single_lin_process_1_fu_362_m_axi_lin_addr_WSTRB;
wire    grp_single_lin_process_1_fu_362_m_axi_lin_addr_WLAST;
wire   [0:0] grp_single_lin_process_1_fu_362_m_axi_lin_addr_WID;
wire   [0:0] grp_single_lin_process_1_fu_362_m_axi_lin_addr_WUSER;
wire    grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARVALID;
wire   [31:0] grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARADDR;
wire   [0:0] grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARID;
wire   [31:0] grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARLEN;
wire   [2:0] grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARSIZE;
wire   [1:0] grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARBURST;
wire   [1:0] grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARLOCK;
wire   [3:0] grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARCACHE;
wire   [2:0] grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARPROT;
wire   [3:0] grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARQOS;
wire   [3:0] grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARREGION;
wire   [0:0] grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARUSER;
wire    grp_single_lin_process_1_fu_362_m_axi_lin_addr_RREADY;
wire    grp_single_lin_process_1_fu_362_m_axi_lin_addr_BREADY;
wire    grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWVALID;
wire   [31:0] grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWADDR;
wire   [0:0] grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWID;
wire   [31:0] grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWLEN;
wire   [2:0] grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWSIZE;
wire   [1:0] grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWBURST;
wire   [1:0] grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWLOCK;
wire   [3:0] grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWCACHE;
wire   [2:0] grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWPROT;
wire   [3:0] grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWQOS;
wire   [3:0] grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWREGION;
wire   [0:0] grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWUSER;
wire    grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WVALID;
wire   [7:0] grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WDATA;
wire   [0:0] grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WSTRB;
wire    grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WLAST;
wire   [0:0] grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WID;
wire   [0:0] grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WUSER;
wire    grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARVALID;
wire   [31:0] grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARADDR;
wire   [0:0] grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARID;
wire   [31:0] grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARLEN;
wire   [2:0] grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARSIZE;
wire   [1:0] grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARBURST;
wire   [1:0] grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARLOCK;
wire   [3:0] grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARCACHE;
wire   [2:0] grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARPROT;
wire   [3:0] grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARQOS;
wire   [3:0] grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARREGION;
wire   [0:0] grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARUSER;
wire    grp_single_lin_process_1_fu_362_m_axi_ps_ddr_RREADY;
wire    grp_single_lin_process_1_fu_362_m_axi_ps_ddr_BREADY;
wire   [31:0] grp_single_lin_process_1_fu_362_lin_0_received;
wire    grp_single_lin_process_1_fu_362_lin_0_received_ap_vld;
wire   [31:0] grp_single_lin_process_1_fu_362_lin_1_received;
wire    grp_single_lin_process_1_fu_362_lin_1_received_ap_vld;
wire   [31:0] grp_single_lin_process_1_fu_362_lin_2_received;
wire    grp_single_lin_process_1_fu_362_lin_2_received_ap_vld;
wire   [31:0] grp_single_lin_process_1_fu_362_lin_3_received;
wire    grp_single_lin_process_1_fu_362_lin_3_received_ap_vld;
wire   [31:0] grp_single_lin_process_1_fu_362_lin_4_received;
wire    grp_single_lin_process_1_fu_362_lin_4_received_ap_vld;
wire   [31:0] grp_single_lin_process_1_fu_362_lin_5_received;
wire    grp_single_lin_process_1_fu_362_lin_5_received_ap_vld;
wire   [31:0] grp_single_lin_process_1_fu_362_lin_6_received;
wire    grp_single_lin_process_1_fu_362_lin_6_received_ap_vld;
wire   [31:0] grp_single_lin_process_1_fu_362_lin_7_received;
wire    grp_single_lin_process_1_fu_362_lin_7_received_ap_vld;
wire   [31:0] grp_single_lin_process_1_fu_362_lin_8_received;
wire    grp_single_lin_process_1_fu_362_lin_8_received_ap_vld;
wire   [31:0] grp_single_lin_process_1_fu_362_lin_9_received;
wire    grp_single_lin_process_1_fu_362_lin_9_received_ap_vld;
wire   [31:0] grp_single_lin_process_1_fu_362_lin_dropped;
wire    grp_single_lin_process_1_fu_362_lin_dropped_ap_vld;
wire   [31:0] grp_single_lin_process_1_fu_362_received_lin;
wire    grp_single_lin_process_1_fu_362_received_lin_ap_vld;
wire    grp_recvFrame_logic_1_fu_428_ap_start;
wire    grp_recvFrame_logic_1_fu_428_ap_done;
wire    grp_recvFrame_logic_1_fu_428_ap_idle;
wire    grp_recvFrame_logic_1_fu_428_ap_ready;
wire    grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWVALID;
wire   [31:0] grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWADDR;
wire   [0:0] grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWID;
wire   [31:0] grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWLEN;
wire   [2:0] grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWSIZE;
wire   [1:0] grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWBURST;
wire   [1:0] grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWLOCK;
wire   [3:0] grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWCACHE;
wire   [2:0] grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWPROT;
wire   [3:0] grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWQOS;
wire   [3:0] grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWREGION;
wire   [0:0] grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWUSER;
wire    grp_recvFrame_logic_1_fu_428_m_axi_can_addr_WVALID;
wire   [31:0] grp_recvFrame_logic_1_fu_428_m_axi_can_addr_WDATA;
wire   [3:0] grp_recvFrame_logic_1_fu_428_m_axi_can_addr_WSTRB;
wire    grp_recvFrame_logic_1_fu_428_m_axi_can_addr_WLAST;
wire   [0:0] grp_recvFrame_logic_1_fu_428_m_axi_can_addr_WID;
wire   [0:0] grp_recvFrame_logic_1_fu_428_m_axi_can_addr_WUSER;
wire    grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARVALID;
wire   [31:0] grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARADDR;
wire   [0:0] grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARID;
wire   [31:0] grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARLEN;
wire   [2:0] grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARSIZE;
wire   [1:0] grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARBURST;
wire   [1:0] grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARLOCK;
wire   [3:0] grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARCACHE;
wire   [2:0] grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARPROT;
wire   [3:0] grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARQOS;
wire   [3:0] grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARREGION;
wire   [0:0] grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARUSER;
wire    grp_recvFrame_logic_1_fu_428_m_axi_can_addr_RREADY;
wire    grp_recvFrame_logic_1_fu_428_m_axi_can_addr_BREADY;
wire    grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWVALID;
wire   [31:0] grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWADDR;
wire   [0:0] grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWID;
wire   [31:0] grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWLEN;
wire   [2:0] grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWSIZE;
wire   [1:0] grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWBURST;
wire   [1:0] grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWLOCK;
wire   [3:0] grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWCACHE;
wire   [2:0] grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWPROT;
wire   [3:0] grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWQOS;
wire   [3:0] grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWREGION;
wire   [0:0] grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWUSER;
wire    grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WVALID;
wire   [7:0] grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WDATA;
wire   [0:0] grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WSTRB;
wire    grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WLAST;
wire   [0:0] grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WID;
wire   [0:0] grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WUSER;
wire    grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARVALID;
wire   [31:0] grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARADDR;
wire   [0:0] grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARID;
wire   [31:0] grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARLEN;
wire   [2:0] grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARSIZE;
wire   [1:0] grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARBURST;
wire   [1:0] grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARLOCK;
wire   [3:0] grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARCACHE;
wire   [2:0] grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARPROT;
wire   [3:0] grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARQOS;
wire   [3:0] grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARREGION;
wire   [0:0] grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARUSER;
wire    grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_RREADY;
wire    grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_BREADY;
wire   [31:0] grp_recvFrame_logic_1_fu_428_can_0_received;
wire    grp_recvFrame_logic_1_fu_428_can_0_received_ap_vld;
wire   [31:0] grp_recvFrame_logic_1_fu_428_can_1_received;
wire    grp_recvFrame_logic_1_fu_428_can_1_received_ap_vld;
wire   [31:0] grp_recvFrame_logic_1_fu_428_can_2_received;
wire    grp_recvFrame_logic_1_fu_428_can_2_received_ap_vld;
wire   [31:0] grp_recvFrame_logic_1_fu_428_can_3_received;
wire    grp_recvFrame_logic_1_fu_428_can_3_received_ap_vld;
wire   [31:0] grp_recvFrame_logic_1_fu_428_can_dropped;
wire    grp_recvFrame_logic_1_fu_428_can_dropped_ap_vld;
wire   [31:0] grp_recvFrame_logic_1_fu_428_received_can;
wire    grp_recvFrame_logic_1_fu_428_received_can_ap_vld;
reg    can_addr_AWVALID;
wire    can_addr_AWREADY;
reg    can_addr_WVALID;
wire    can_addr_WREADY;
reg    can_addr_ARVALID;
wire    can_addr_ARREADY;
reg   [31:0] can_addr_ARADDR;
reg   [31:0] can_addr_ARLEN;
wire    can_addr_RVALID;
reg    can_addr_RREADY;
wire   [31:0] can_addr_RDATA;
wire   [8:0] can_addr_RFIFONUM;
wire    can_addr_BVALID;
reg    can_addr_BREADY;
reg    lin_addr_AWVALID;
wire    lin_addr_AWREADY;
reg    lin_addr_WVALID;
wire    lin_addr_WREADY;
reg    lin_addr_ARVALID;
wire    lin_addr_ARREADY;
wire    lin_addr_RVALID;
reg    lin_addr_RREADY;
wire   [31:0] lin_addr_RDATA;
wire   [8:0] lin_addr_RFIFONUM;
wire    lin_addr_BVALID;
reg    lin_addr_BREADY;
reg    ps_ddr_AWVALID;
wire    ps_ddr_AWREADY;
reg   [31:0] ps_ddr_AWADDR;
reg   [31:0] ps_ddr_AWLEN;
reg    ps_ddr_WVALID;
wire    ps_ddr_WREADY;
reg   [7:0] ps_ddr_WDATA;
reg   [0:0] ps_ddr_WSTRB;
reg    ps_ddr_ARVALID;
wire    ps_ddr_ARREADY;
reg   [31:0] ps_ddr_ARADDR;
reg   [31:0] ps_ddr_ARLEN;
wire    ps_ddr_RVALID;
reg    ps_ddr_RREADY;
wire   [7:0] ps_ddr_RDATA;
wire   [10:0] ps_ddr_RFIFONUM;
wire    ps_ddr_BVALID;
reg    ps_ddr_BREADY;
reg    grp_single_lin_process_1_fu_362_ap_start_reg;
wire    ap_CS_fsm_state3;
reg    ap_block_state3_on_subcall_done;
reg    grp_recvFrame_logic_1_fu_428_ap_start_reg;
wire    ap_CS_fsm_state14;
reg    ap_predicate_op192_call_state14;
reg    ap_block_state14_on_subcall_done;
wire  signed [31:0] sext_ln304_fu_644_p1;
reg   [3:0] lin_nr_fu_300;
reg   [3:0] jj_fu_304;
wire   [9:0] zext_ln323_fu_511_p1;
wire   [9:0] shl_ln323_fu_515_p2;
wire   [9:0] and_ln323_fu_521_p2;
wire   [15:0] shl_ln4_fu_532_p3;
wire   [31:0] zext_ln325_fu_540_p1;
wire   [11:0] zext_ln301_fu_575_p1;
wire   [11:0] shl_ln301_fu_579_p2;
wire   [11:0] and_ln301_fu_585_p2;
wire   [19:0] shl_ln_fu_596_p3;
wire   [31:0] zext_ln303_fu_604_p1;
wire   [19:0] or_ln304_fu_613_p2;
wire   [31:0] zext_ln304_fu_619_p1;
wire   [31:0] add_ln304_fu_623_p2;
wire   [30:0] and_ln_fu_708_p5;
wire   [0:0] icmp_ln306_fu_698_p2;
wire   [5:0] readIndex_fu_724_p3;
wire   [0:0] tmp_11_fu_735_p3;
wire   [0:0] icmp_ln306_1_fu_703_p2;
wire   [7:0] readIndex_1_fu_742_p3;
wire   [7:0] zext_ln305_fu_731_p1;
wire    ap_CS_fsm_state15;
reg    ap_block_state15;
reg   [14:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
#0 lin_0_received_1_data_reg = 32'd0;
#0 lin_0_received_1_vld_reg = 1'b0;
#0 lin_1_received_1_data_reg = 32'd0;
#0 lin_1_received_1_vld_reg = 1'b0;
#0 lin_2_received_1_data_reg = 32'd0;
#0 lin_2_received_1_vld_reg = 1'b0;
#0 lin_3_received_1_data_reg = 32'd0;
#0 lin_3_received_1_vld_reg = 1'b0;
#0 lin_4_received_1_data_reg = 32'd0;
#0 lin_4_received_1_vld_reg = 1'b0;
#0 lin_5_received_1_data_reg = 32'd0;
#0 lin_5_received_1_vld_reg = 1'b0;
#0 lin_6_received_1_data_reg = 32'd0;
#0 lin_6_received_1_vld_reg = 1'b0;
#0 lin_7_received_1_data_reg = 32'd0;
#0 lin_7_received_1_vld_reg = 1'b0;
#0 lin_8_received_1_data_reg = 32'd0;
#0 lin_8_received_1_vld_reg = 1'b0;
#0 lin_9_received_1_data_reg = 32'd0;
#0 lin_9_received_1_vld_reg = 1'b0;
#0 lin_dropped_1_data_reg = 32'd0;
#0 lin_dropped_1_vld_reg = 1'b0;
#0 mode_nr = 2'd0;
#0 grp_single_lin_process_1_fu_362_ap_start_reg = 1'b0;
#0 grp_recvFrame_logic_1_fu_428_ap_start_reg = 1'b0;
end

clu_single_lin_process_1 grp_single_lin_process_1_fu_362(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_single_lin_process_1_fu_362_ap_start),
    .ap_done(grp_single_lin_process_1_fu_362_ap_done),
    .ap_idle(grp_single_lin_process_1_fu_362_ap_idle),
    .ap_ready(grp_single_lin_process_1_fu_362_ap_ready),
    .m_axi_lin_addr_AWVALID(grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWVALID),
    .m_axi_lin_addr_AWREADY(lin_addr_AWREADY),
    .m_axi_lin_addr_AWADDR(grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWADDR),
    .m_axi_lin_addr_AWID(grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWID),
    .m_axi_lin_addr_AWLEN(grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWLEN),
    .m_axi_lin_addr_AWSIZE(grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWSIZE),
    .m_axi_lin_addr_AWBURST(grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWBURST),
    .m_axi_lin_addr_AWLOCK(grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWLOCK),
    .m_axi_lin_addr_AWCACHE(grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWCACHE),
    .m_axi_lin_addr_AWPROT(grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWPROT),
    .m_axi_lin_addr_AWQOS(grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWQOS),
    .m_axi_lin_addr_AWREGION(grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWREGION),
    .m_axi_lin_addr_AWUSER(grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWUSER),
    .m_axi_lin_addr_WVALID(grp_single_lin_process_1_fu_362_m_axi_lin_addr_WVALID),
    .m_axi_lin_addr_WREADY(lin_addr_WREADY),
    .m_axi_lin_addr_WDATA(grp_single_lin_process_1_fu_362_m_axi_lin_addr_WDATA),
    .m_axi_lin_addr_WSTRB(grp_single_lin_process_1_fu_362_m_axi_lin_addr_WSTRB),
    .m_axi_lin_addr_WLAST(grp_single_lin_process_1_fu_362_m_axi_lin_addr_WLAST),
    .m_axi_lin_addr_WID(grp_single_lin_process_1_fu_362_m_axi_lin_addr_WID),
    .m_axi_lin_addr_WUSER(grp_single_lin_process_1_fu_362_m_axi_lin_addr_WUSER),
    .m_axi_lin_addr_ARVALID(grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARVALID),
    .m_axi_lin_addr_ARREADY(lin_addr_ARREADY),
    .m_axi_lin_addr_ARADDR(grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARADDR),
    .m_axi_lin_addr_ARID(grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARID),
    .m_axi_lin_addr_ARLEN(grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARLEN),
    .m_axi_lin_addr_ARSIZE(grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARSIZE),
    .m_axi_lin_addr_ARBURST(grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARBURST),
    .m_axi_lin_addr_ARLOCK(grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARLOCK),
    .m_axi_lin_addr_ARCACHE(grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARCACHE),
    .m_axi_lin_addr_ARPROT(grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARPROT),
    .m_axi_lin_addr_ARQOS(grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARQOS),
    .m_axi_lin_addr_ARREGION(grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARREGION),
    .m_axi_lin_addr_ARUSER(grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARUSER),
    .m_axi_lin_addr_RVALID(lin_addr_RVALID),
    .m_axi_lin_addr_RREADY(grp_single_lin_process_1_fu_362_m_axi_lin_addr_RREADY),
    .m_axi_lin_addr_RDATA(lin_addr_RDATA),
    .m_axi_lin_addr_RLAST(1'b0),
    .m_axi_lin_addr_RID(1'd0),
    .m_axi_lin_addr_RFIFONUM(lin_addr_RFIFONUM),
    .m_axi_lin_addr_RUSER(1'd0),
    .m_axi_lin_addr_RRESP(2'd0),
    .m_axi_lin_addr_BVALID(lin_addr_BVALID),
    .m_axi_lin_addr_BREADY(grp_single_lin_process_1_fu_362_m_axi_lin_addr_BREADY),
    .m_axi_lin_addr_BRESP(2'd0),
    .m_axi_lin_addr_BID(1'd0),
    .m_axi_lin_addr_BUSER(1'd0),
    .linbase(linbase_mod_reg_832),
    .m_axi_ps_ddr_AWVALID(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWVALID),
    .m_axi_ps_ddr_AWREADY(ps_ddr_AWREADY),
    .m_axi_ps_ddr_AWADDR(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWADDR),
    .m_axi_ps_ddr_AWID(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWID),
    .m_axi_ps_ddr_AWLEN(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWLEN),
    .m_axi_ps_ddr_AWSIZE(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWSIZE),
    .m_axi_ps_ddr_AWBURST(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWBURST),
    .m_axi_ps_ddr_AWLOCK(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWLOCK),
    .m_axi_ps_ddr_AWCACHE(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWCACHE),
    .m_axi_ps_ddr_AWPROT(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWPROT),
    .m_axi_ps_ddr_AWQOS(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWQOS),
    .m_axi_ps_ddr_AWREGION(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWREGION),
    .m_axi_ps_ddr_AWUSER(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWUSER),
    .m_axi_ps_ddr_WVALID(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WVALID),
    .m_axi_ps_ddr_WREADY(ps_ddr_WREADY),
    .m_axi_ps_ddr_WDATA(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WDATA),
    .m_axi_ps_ddr_WSTRB(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WSTRB),
    .m_axi_ps_ddr_WLAST(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WLAST),
    .m_axi_ps_ddr_WID(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WID),
    .m_axi_ps_ddr_WUSER(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WUSER),
    .m_axi_ps_ddr_ARVALID(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARVALID),
    .m_axi_ps_ddr_ARREADY(ps_ddr_ARREADY),
    .m_axi_ps_ddr_ARADDR(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARADDR),
    .m_axi_ps_ddr_ARID(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARID),
    .m_axi_ps_ddr_ARLEN(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARLEN),
    .m_axi_ps_ddr_ARSIZE(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARSIZE),
    .m_axi_ps_ddr_ARBURST(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARBURST),
    .m_axi_ps_ddr_ARLOCK(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARLOCK),
    .m_axi_ps_ddr_ARCACHE(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARCACHE),
    .m_axi_ps_ddr_ARPROT(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARPROT),
    .m_axi_ps_ddr_ARQOS(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARQOS),
    .m_axi_ps_ddr_ARREGION(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARREGION),
    .m_axi_ps_ddr_ARUSER(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARUSER),
    .m_axi_ps_ddr_RVALID(ps_ddr_RVALID),
    .m_axi_ps_ddr_RREADY(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_RREADY),
    .m_axi_ps_ddr_RDATA(ps_ddr_RDATA),
    .m_axi_ps_ddr_RLAST(1'b0),
    .m_axi_ps_ddr_RID(1'd0),
    .m_axi_ps_ddr_RFIFONUM(ps_ddr_RFIFONUM),
    .m_axi_ps_ddr_RUSER(1'd0),
    .m_axi_ps_ddr_RRESP(2'd0),
    .m_axi_ps_ddr_BVALID(ps_ddr_BVALID),
    .m_axi_ps_ddr_BREADY(grp_single_lin_process_1_fu_362_m_axi_ps_ddr_BREADY),
    .m_axi_ps_ddr_BRESP(2'd0),
    .m_axi_ps_ddr_BID(1'd0),
    .m_axi_ps_ddr_BUSER(1'd0),
    .ddr(lin_ddr_read_reg_769),
    .timestamp(timestamp),
    .EN(lin_nr_fu_300),
    .lin_0_received(grp_single_lin_process_1_fu_362_lin_0_received),
    .lin_0_received_ap_vld(grp_single_lin_process_1_fu_362_lin_0_received_ap_vld),
    .lin_1_received(grp_single_lin_process_1_fu_362_lin_1_received),
    .lin_1_received_ap_vld(grp_single_lin_process_1_fu_362_lin_1_received_ap_vld),
    .lin_2_received(grp_single_lin_process_1_fu_362_lin_2_received),
    .lin_2_received_ap_vld(grp_single_lin_process_1_fu_362_lin_2_received_ap_vld),
    .lin_3_received(grp_single_lin_process_1_fu_362_lin_3_received),
    .lin_3_received_ap_vld(grp_single_lin_process_1_fu_362_lin_3_received_ap_vld),
    .lin_4_received(grp_single_lin_process_1_fu_362_lin_4_received),
    .lin_4_received_ap_vld(grp_single_lin_process_1_fu_362_lin_4_received_ap_vld),
    .lin_5_received(grp_single_lin_process_1_fu_362_lin_5_received),
    .lin_5_received_ap_vld(grp_single_lin_process_1_fu_362_lin_5_received_ap_vld),
    .lin_6_received(grp_single_lin_process_1_fu_362_lin_6_received),
    .lin_6_received_ap_vld(grp_single_lin_process_1_fu_362_lin_6_received_ap_vld),
    .lin_7_received(grp_single_lin_process_1_fu_362_lin_7_received),
    .lin_7_received_ap_vld(grp_single_lin_process_1_fu_362_lin_7_received_ap_vld),
    .lin_8_received(grp_single_lin_process_1_fu_362_lin_8_received),
    .lin_8_received_ap_vld(grp_single_lin_process_1_fu_362_lin_8_received_ap_vld),
    .lin_9_received(grp_single_lin_process_1_fu_362_lin_9_received),
    .lin_9_received_ap_vld(grp_single_lin_process_1_fu_362_lin_9_received_ap_vld),
    .lin_dropped(grp_single_lin_process_1_fu_362_lin_dropped),
    .lin_dropped_ap_vld(grp_single_lin_process_1_fu_362_lin_dropped_ap_vld),
    .received_lin(grp_single_lin_process_1_fu_362_received_lin),
    .received_lin_ap_vld(grp_single_lin_process_1_fu_362_received_lin_ap_vld)
);

clu_recvFrame_logic_1 grp_recvFrame_logic_1_fu_428(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_recvFrame_logic_1_fu_428_ap_start),
    .ap_done(grp_recvFrame_logic_1_fu_428_ap_done),
    .ap_idle(grp_recvFrame_logic_1_fu_428_ap_idle),
    .ap_ready(grp_recvFrame_logic_1_fu_428_ap_ready),
    .m_axi_can_addr_AWVALID(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWVALID),
    .m_axi_can_addr_AWREADY(can_addr_AWREADY),
    .m_axi_can_addr_AWADDR(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWADDR),
    .m_axi_can_addr_AWID(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWID),
    .m_axi_can_addr_AWLEN(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWLEN),
    .m_axi_can_addr_AWSIZE(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWSIZE),
    .m_axi_can_addr_AWBURST(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWBURST),
    .m_axi_can_addr_AWLOCK(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWLOCK),
    .m_axi_can_addr_AWCACHE(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWCACHE),
    .m_axi_can_addr_AWPROT(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWPROT),
    .m_axi_can_addr_AWQOS(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWQOS),
    .m_axi_can_addr_AWREGION(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWREGION),
    .m_axi_can_addr_AWUSER(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWUSER),
    .m_axi_can_addr_WVALID(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_WVALID),
    .m_axi_can_addr_WREADY(can_addr_WREADY),
    .m_axi_can_addr_WDATA(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_WDATA),
    .m_axi_can_addr_WSTRB(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_WSTRB),
    .m_axi_can_addr_WLAST(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_WLAST),
    .m_axi_can_addr_WID(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_WID),
    .m_axi_can_addr_WUSER(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_WUSER),
    .m_axi_can_addr_ARVALID(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARVALID),
    .m_axi_can_addr_ARREADY(can_addr_ARREADY),
    .m_axi_can_addr_ARADDR(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARADDR),
    .m_axi_can_addr_ARID(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARID),
    .m_axi_can_addr_ARLEN(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARLEN),
    .m_axi_can_addr_ARSIZE(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARSIZE),
    .m_axi_can_addr_ARBURST(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARBURST),
    .m_axi_can_addr_ARLOCK(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARLOCK),
    .m_axi_can_addr_ARCACHE(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARCACHE),
    .m_axi_can_addr_ARPROT(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARPROT),
    .m_axi_can_addr_ARQOS(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARQOS),
    .m_axi_can_addr_ARREGION(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARREGION),
    .m_axi_can_addr_ARUSER(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARUSER),
    .m_axi_can_addr_RVALID(can_addr_RVALID),
    .m_axi_can_addr_RREADY(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_RREADY),
    .m_axi_can_addr_RDATA(can_addr_RDATA),
    .m_axi_can_addr_RLAST(1'b0),
    .m_axi_can_addr_RID(1'd0),
    .m_axi_can_addr_RFIFONUM(can_addr_RFIFONUM),
    .m_axi_can_addr_RUSER(1'd0),
    .m_axi_can_addr_RRESP(2'd0),
    .m_axi_can_addr_BVALID(can_addr_BVALID),
    .m_axi_can_addr_BREADY(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_BREADY),
    .m_axi_can_addr_BRESP(2'd0),
    .m_axi_can_addr_BID(1'd0),
    .m_axi_can_addr_BUSER(1'd0),
    .canbase(canaddr_mod_reg_852),
    .m_axi_ps_ddr_AWVALID(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWVALID),
    .m_axi_ps_ddr_AWREADY(ps_ddr_AWREADY),
    .m_axi_ps_ddr_AWADDR(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWADDR),
    .m_axi_ps_ddr_AWID(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWID),
    .m_axi_ps_ddr_AWLEN(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWLEN),
    .m_axi_ps_ddr_AWSIZE(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWSIZE),
    .m_axi_ps_ddr_AWBURST(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWBURST),
    .m_axi_ps_ddr_AWLOCK(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWLOCK),
    .m_axi_ps_ddr_AWCACHE(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWCACHE),
    .m_axi_ps_ddr_AWPROT(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWPROT),
    .m_axi_ps_ddr_AWQOS(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWQOS),
    .m_axi_ps_ddr_AWREGION(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWREGION),
    .m_axi_ps_ddr_AWUSER(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWUSER),
    .m_axi_ps_ddr_WVALID(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WVALID),
    .m_axi_ps_ddr_WREADY(ps_ddr_WREADY),
    .m_axi_ps_ddr_WDATA(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WDATA),
    .m_axi_ps_ddr_WSTRB(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WSTRB),
    .m_axi_ps_ddr_WLAST(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WLAST),
    .m_axi_ps_ddr_WID(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WID),
    .m_axi_ps_ddr_WUSER(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WUSER),
    .m_axi_ps_ddr_ARVALID(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARVALID),
    .m_axi_ps_ddr_ARREADY(ps_ddr_ARREADY),
    .m_axi_ps_ddr_ARADDR(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARADDR),
    .m_axi_ps_ddr_ARID(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARID),
    .m_axi_ps_ddr_ARLEN(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARLEN),
    .m_axi_ps_ddr_ARSIZE(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARSIZE),
    .m_axi_ps_ddr_ARBURST(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARBURST),
    .m_axi_ps_ddr_ARLOCK(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARLOCK),
    .m_axi_ps_ddr_ARCACHE(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARCACHE),
    .m_axi_ps_ddr_ARPROT(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARPROT),
    .m_axi_ps_ddr_ARQOS(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARQOS),
    .m_axi_ps_ddr_ARREGION(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARREGION),
    .m_axi_ps_ddr_ARUSER(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARUSER),
    .m_axi_ps_ddr_RVALID(ps_ddr_RVALID),
    .m_axi_ps_ddr_RREADY(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_RREADY),
    .m_axi_ps_ddr_RDATA(ps_ddr_RDATA),
    .m_axi_ps_ddr_RLAST(1'b0),
    .m_axi_ps_ddr_RID(1'd0),
    .m_axi_ps_ddr_RFIFONUM(ps_ddr_RFIFONUM),
    .m_axi_ps_ddr_RUSER(1'd0),
    .m_axi_ps_ddr_RRESP(2'd0),
    .m_axi_ps_ddr_BVALID(ps_ddr_BVALID),
    .m_axi_ps_ddr_BREADY(grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_BREADY),
    .m_axi_ps_ddr_BRESP(2'd0),
    .m_axi_ps_ddr_BID(1'd0),
    .m_axi_ps_ddr_BUSER(1'd0),
    .ddr(can_ddr_read_reg_774),
    .readIndex(readIndex_2_reg_902),
    .EN(jj_fu_304),
    .timestamp(timestamp),
    .can_0_received(grp_recvFrame_logic_1_fu_428_can_0_received),
    .can_0_received_ap_vld(grp_recvFrame_logic_1_fu_428_can_0_received_ap_vld),
    .can_1_received(grp_recvFrame_logic_1_fu_428_can_1_received),
    .can_1_received_ap_vld(grp_recvFrame_logic_1_fu_428_can_1_received_ap_vld),
    .can_2_received(grp_recvFrame_logic_1_fu_428_can_2_received),
    .can_2_received_ap_vld(grp_recvFrame_logic_1_fu_428_can_2_received_ap_vld),
    .can_3_received(grp_recvFrame_logic_1_fu_428_can_3_received),
    .can_3_received_ap_vld(grp_recvFrame_logic_1_fu_428_can_3_received_ap_vld),
    .can_dropped(grp_recvFrame_logic_1_fu_428_can_dropped),
    .can_dropped_ap_vld(grp_recvFrame_logic_1_fu_428_can_dropped_ap_vld),
    .received_can(grp_recvFrame_logic_1_fu_428_received_can),
    .received_can_ap_vld(grp_recvFrame_logic_1_fu_428_received_can_ap_vld)
);

clu_EN_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_EN_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_EN_DATA_WIDTH ))
EN_s_axi_U(
    .AWVALID(s_axi_EN_AWVALID),
    .AWREADY(s_axi_EN_AWREADY),
    .AWADDR(s_axi_EN_AWADDR),
    .WVALID(s_axi_EN_WVALID),
    .WREADY(s_axi_EN_WREADY),
    .WDATA(s_axi_EN_WDATA),
    .WSTRB(s_axi_EN_WSTRB),
    .ARVALID(s_axi_EN_ARVALID),
    .ARREADY(s_axi_EN_ARREADY),
    .ARADDR(s_axi_EN_ARADDR),
    .RVALID(s_axi_EN_RVALID),
    .RREADY(s_axi_EN_RREADY),
    .RDATA(s_axi_EN_RDATA),
    .RRESP(s_axi_EN_RRESP),
    .BVALID(s_axi_EN_BVALID),
    .BREADY(s_axi_EN_BREADY),
    .BRESP(s_axi_EN_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .can_ptr(can_ptr),
    .uart_ptr(uart_ptr),
    .lin_ptr(lin_ptr),
    .received_can(grp_recvFrame_logic_1_fu_428_received_can),
    .received_can_ap_vld(grp_recvFrame_logic_1_fu_428_received_can_ap_vld),
    .received_uart(received_uart),
    .received_lin(grp_single_lin_process_1_fu_362_received_lin),
    .received_lin_ap_vld(grp_single_lin_process_1_fu_362_received_lin_ap_vld),
    .can_en(can_en),
    .uart_en(uart_en),
    .lin_en(lin_en),
    .can_ddr(can_ddr),
    .uart_ddr(uart_ddr),
    .lin_ddr(lin_ddr),
    .can_0_received(grp_recvFrame_logic_1_fu_428_can_0_received),
    .can_0_received_ap_vld(grp_recvFrame_logic_1_fu_428_can_0_received_ap_vld),
    .can_1_received(grp_recvFrame_logic_1_fu_428_can_1_received),
    .can_1_received_ap_vld(grp_recvFrame_logic_1_fu_428_can_1_received_ap_vld),
    .can_2_received(grp_recvFrame_logic_1_fu_428_can_2_received),
    .can_2_received_ap_vld(grp_recvFrame_logic_1_fu_428_can_2_received_ap_vld),
    .can_3_received(grp_recvFrame_logic_1_fu_428_can_3_received),
    .can_3_received_ap_vld(grp_recvFrame_logic_1_fu_428_can_3_received_ap_vld),
    .can_dropped(grp_recvFrame_logic_1_fu_428_can_dropped),
    .can_dropped_ap_vld(grp_recvFrame_logic_1_fu_428_can_dropped_ap_vld),
    .lin_0_received(lin_0_received_1_data_reg),
    .lin_0_received_ap_vld(lin_0_received_1_vld_reg),
    .lin_1_received(lin_1_received_1_data_reg),
    .lin_1_received_ap_vld(lin_1_received_1_vld_reg),
    .lin_2_received(lin_2_received_1_data_reg),
    .lin_2_received_ap_vld(lin_2_received_1_vld_reg),
    .lin_3_received(lin_3_received_1_data_reg),
    .lin_3_received_ap_vld(lin_3_received_1_vld_reg),
    .lin_4_received(lin_4_received_1_data_reg),
    .lin_4_received_ap_vld(lin_4_received_1_vld_reg),
    .lin_5_received(lin_5_received_1_data_reg),
    .lin_5_received_ap_vld(lin_5_received_1_vld_reg),
    .lin_6_received(lin_6_received_1_data_reg),
    .lin_6_received_ap_vld(lin_6_received_1_vld_reg),
    .lin_7_received(lin_7_received_1_data_reg),
    .lin_7_received_ap_vld(lin_7_received_1_vld_reg),
    .lin_8_received(lin_8_received_1_data_reg),
    .lin_8_received_ap_vld(lin_8_received_1_vld_reg),
    .lin_9_received(lin_9_received_1_data_reg),
    .lin_9_received_ap_vld(lin_9_received_1_vld_reg),
    .lin_dropped(lin_dropped_1_data_reg),
    .lin_dropped_ap_vld(lin_dropped_1_vld_reg),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

clu_can_addr_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_CAN_ADDR_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_CAN_ADDR_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_CAN_ADDR_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_CAN_ADDR_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_CAN_ADDR_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_CAN_ADDR_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_CAN_ADDR_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_CAN_ADDR_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_CAN_ADDR_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_CAN_ADDR_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_CAN_ADDR_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
can_addr_m_axi_U(
    .AWVALID(m_axi_can_addr_AWVALID),
    .AWREADY(m_axi_can_addr_AWREADY),
    .AWADDR(m_axi_can_addr_AWADDR),
    .AWID(m_axi_can_addr_AWID),
    .AWLEN(m_axi_can_addr_AWLEN),
    .AWSIZE(m_axi_can_addr_AWSIZE),
    .AWBURST(m_axi_can_addr_AWBURST),
    .AWLOCK(m_axi_can_addr_AWLOCK),
    .AWCACHE(m_axi_can_addr_AWCACHE),
    .AWPROT(m_axi_can_addr_AWPROT),
    .AWQOS(m_axi_can_addr_AWQOS),
    .AWREGION(m_axi_can_addr_AWREGION),
    .AWUSER(m_axi_can_addr_AWUSER),
    .WVALID(m_axi_can_addr_WVALID),
    .WREADY(m_axi_can_addr_WREADY),
    .WDATA(m_axi_can_addr_WDATA),
    .WSTRB(m_axi_can_addr_WSTRB),
    .WLAST(m_axi_can_addr_WLAST),
    .WID(m_axi_can_addr_WID),
    .WUSER(m_axi_can_addr_WUSER),
    .ARVALID(m_axi_can_addr_ARVALID),
    .ARREADY(m_axi_can_addr_ARREADY),
    .ARADDR(m_axi_can_addr_ARADDR),
    .ARID(m_axi_can_addr_ARID),
    .ARLEN(m_axi_can_addr_ARLEN),
    .ARSIZE(m_axi_can_addr_ARSIZE),
    .ARBURST(m_axi_can_addr_ARBURST),
    .ARLOCK(m_axi_can_addr_ARLOCK),
    .ARCACHE(m_axi_can_addr_ARCACHE),
    .ARPROT(m_axi_can_addr_ARPROT),
    .ARQOS(m_axi_can_addr_ARQOS),
    .ARREGION(m_axi_can_addr_ARREGION),
    .ARUSER(m_axi_can_addr_ARUSER),
    .RVALID(m_axi_can_addr_RVALID),
    .RREADY(m_axi_can_addr_RREADY),
    .RDATA(m_axi_can_addr_RDATA),
    .RLAST(m_axi_can_addr_RLAST),
    .RID(m_axi_can_addr_RID),
    .RUSER(m_axi_can_addr_RUSER),
    .RRESP(m_axi_can_addr_RRESP),
    .BVALID(m_axi_can_addr_BVALID),
    .BREADY(m_axi_can_addr_BREADY),
    .BRESP(m_axi_can_addr_BRESP),
    .BID(m_axi_can_addr_BID),
    .BUSER(m_axi_can_addr_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(can_addr_ARVALID),
    .I_ARREADY(can_addr_ARREADY),
    .I_ARADDR(can_addr_ARADDR),
    .I_ARLEN(can_addr_ARLEN),
    .I_RVALID(can_addr_RVALID),
    .I_RREADY(can_addr_RREADY),
    .I_RDATA(can_addr_RDATA),
    .I_RFIFONUM(can_addr_RFIFONUM),
    .I_AWVALID(can_addr_AWVALID),
    .I_AWREADY(can_addr_AWREADY),
    .I_AWADDR(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWADDR),
    .I_AWLEN(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWLEN),
    .I_WVALID(can_addr_WVALID),
    .I_WREADY(can_addr_WREADY),
    .I_WDATA(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_WDATA),
    .I_WSTRB(grp_recvFrame_logic_1_fu_428_m_axi_can_addr_WSTRB),
    .I_BVALID(can_addr_BVALID),
    .I_BREADY(can_addr_BREADY)
);

clu_lin_addr_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_LIN_ADDR_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_LIN_ADDR_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_LIN_ADDR_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_LIN_ADDR_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_LIN_ADDR_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_LIN_ADDR_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_LIN_ADDR_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_LIN_ADDR_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_LIN_ADDR_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_LIN_ADDR_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_LIN_ADDR_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
lin_addr_m_axi_U(
    .AWVALID(m_axi_lin_addr_AWVALID),
    .AWREADY(m_axi_lin_addr_AWREADY),
    .AWADDR(m_axi_lin_addr_AWADDR),
    .AWID(m_axi_lin_addr_AWID),
    .AWLEN(m_axi_lin_addr_AWLEN),
    .AWSIZE(m_axi_lin_addr_AWSIZE),
    .AWBURST(m_axi_lin_addr_AWBURST),
    .AWLOCK(m_axi_lin_addr_AWLOCK),
    .AWCACHE(m_axi_lin_addr_AWCACHE),
    .AWPROT(m_axi_lin_addr_AWPROT),
    .AWQOS(m_axi_lin_addr_AWQOS),
    .AWREGION(m_axi_lin_addr_AWREGION),
    .AWUSER(m_axi_lin_addr_AWUSER),
    .WVALID(m_axi_lin_addr_WVALID),
    .WREADY(m_axi_lin_addr_WREADY),
    .WDATA(m_axi_lin_addr_WDATA),
    .WSTRB(m_axi_lin_addr_WSTRB),
    .WLAST(m_axi_lin_addr_WLAST),
    .WID(m_axi_lin_addr_WID),
    .WUSER(m_axi_lin_addr_WUSER),
    .ARVALID(m_axi_lin_addr_ARVALID),
    .ARREADY(m_axi_lin_addr_ARREADY),
    .ARADDR(m_axi_lin_addr_ARADDR),
    .ARID(m_axi_lin_addr_ARID),
    .ARLEN(m_axi_lin_addr_ARLEN),
    .ARSIZE(m_axi_lin_addr_ARSIZE),
    .ARBURST(m_axi_lin_addr_ARBURST),
    .ARLOCK(m_axi_lin_addr_ARLOCK),
    .ARCACHE(m_axi_lin_addr_ARCACHE),
    .ARPROT(m_axi_lin_addr_ARPROT),
    .ARQOS(m_axi_lin_addr_ARQOS),
    .ARREGION(m_axi_lin_addr_ARREGION),
    .ARUSER(m_axi_lin_addr_ARUSER),
    .RVALID(m_axi_lin_addr_RVALID),
    .RREADY(m_axi_lin_addr_RREADY),
    .RDATA(m_axi_lin_addr_RDATA),
    .RLAST(m_axi_lin_addr_RLAST),
    .RID(m_axi_lin_addr_RID),
    .RUSER(m_axi_lin_addr_RUSER),
    .RRESP(m_axi_lin_addr_RRESP),
    .BVALID(m_axi_lin_addr_BVALID),
    .BREADY(m_axi_lin_addr_BREADY),
    .BRESP(m_axi_lin_addr_BRESP),
    .BID(m_axi_lin_addr_BID),
    .BUSER(m_axi_lin_addr_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(lin_addr_ARVALID),
    .I_ARREADY(lin_addr_ARREADY),
    .I_ARADDR(grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARADDR),
    .I_ARLEN(grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARLEN),
    .I_RVALID(lin_addr_RVALID),
    .I_RREADY(lin_addr_RREADY),
    .I_RDATA(lin_addr_RDATA),
    .I_RFIFONUM(lin_addr_RFIFONUM),
    .I_AWVALID(lin_addr_AWVALID),
    .I_AWREADY(lin_addr_AWREADY),
    .I_AWADDR(grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWADDR),
    .I_AWLEN(grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWLEN),
    .I_WVALID(lin_addr_WVALID),
    .I_WREADY(lin_addr_WREADY),
    .I_WDATA(grp_single_lin_process_1_fu_362_m_axi_lin_addr_WDATA),
    .I_WSTRB(grp_single_lin_process_1_fu_362_m_axi_lin_addr_WSTRB),
    .I_BVALID(lin_addr_BVALID),
    .I_BREADY(lin_addr_BREADY)
);

clu_ps_ddr_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_PS_DDR_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_PS_DDR_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_PS_DDR_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_PS_DDR_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_PS_DDR_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_PS_DDR_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_PS_DDR_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_PS_DDR_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_PS_DDR_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_PS_DDR_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_PS_DDR_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 11 ),
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
ps_ddr_m_axi_U(
    .AWVALID(m_axi_ps_ddr_AWVALID),
    .AWREADY(m_axi_ps_ddr_AWREADY),
    .AWADDR(m_axi_ps_ddr_AWADDR),
    .AWID(m_axi_ps_ddr_AWID),
    .AWLEN(m_axi_ps_ddr_AWLEN),
    .AWSIZE(m_axi_ps_ddr_AWSIZE),
    .AWBURST(m_axi_ps_ddr_AWBURST),
    .AWLOCK(m_axi_ps_ddr_AWLOCK),
    .AWCACHE(m_axi_ps_ddr_AWCACHE),
    .AWPROT(m_axi_ps_ddr_AWPROT),
    .AWQOS(m_axi_ps_ddr_AWQOS),
    .AWREGION(m_axi_ps_ddr_AWREGION),
    .AWUSER(m_axi_ps_ddr_AWUSER),
    .WVALID(m_axi_ps_ddr_WVALID),
    .WREADY(m_axi_ps_ddr_WREADY),
    .WDATA(m_axi_ps_ddr_WDATA),
    .WSTRB(m_axi_ps_ddr_WSTRB),
    .WLAST(m_axi_ps_ddr_WLAST),
    .WID(m_axi_ps_ddr_WID),
    .WUSER(m_axi_ps_ddr_WUSER),
    .ARVALID(m_axi_ps_ddr_ARVALID),
    .ARREADY(m_axi_ps_ddr_ARREADY),
    .ARADDR(m_axi_ps_ddr_ARADDR),
    .ARID(m_axi_ps_ddr_ARID),
    .ARLEN(m_axi_ps_ddr_ARLEN),
    .ARSIZE(m_axi_ps_ddr_ARSIZE),
    .ARBURST(m_axi_ps_ddr_ARBURST),
    .ARLOCK(m_axi_ps_ddr_ARLOCK),
    .ARCACHE(m_axi_ps_ddr_ARCACHE),
    .ARPROT(m_axi_ps_ddr_ARPROT),
    .ARQOS(m_axi_ps_ddr_ARQOS),
    .ARREGION(m_axi_ps_ddr_ARREGION),
    .ARUSER(m_axi_ps_ddr_ARUSER),
    .RVALID(m_axi_ps_ddr_RVALID),
    .RREADY(m_axi_ps_ddr_RREADY),
    .RDATA(m_axi_ps_ddr_RDATA),
    .RLAST(m_axi_ps_ddr_RLAST),
    .RID(m_axi_ps_ddr_RID),
    .RUSER(m_axi_ps_ddr_RUSER),
    .RRESP(m_axi_ps_ddr_RRESP),
    .BVALID(m_axi_ps_ddr_BVALID),
    .BREADY(m_axi_ps_ddr_BREADY),
    .BRESP(m_axi_ps_ddr_BRESP),
    .BID(m_axi_ps_ddr_BID),
    .BUSER(m_axi_ps_ddr_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(ps_ddr_ARVALID),
    .I_ARREADY(ps_ddr_ARREADY),
    .I_ARADDR(ps_ddr_ARADDR),
    .I_ARLEN(ps_ddr_ARLEN),
    .I_RVALID(ps_ddr_RVALID),
    .I_RREADY(ps_ddr_RREADY),
    .I_RDATA(ps_ddr_RDATA),
    .I_RFIFONUM(ps_ddr_RFIFONUM),
    .I_AWVALID(ps_ddr_AWVALID),
    .I_AWREADY(ps_ddr_AWREADY),
    .I_AWADDR(ps_ddr_AWADDR),
    .I_AWLEN(ps_ddr_AWLEN),
    .I_WVALID(ps_ddr_WVALID),
    .I_WREADY(ps_ddr_WREADY),
    .I_WDATA(ps_ddr_WDATA),
    .I_WSTRB(ps_ddr_WSTRB),
    .I_BVALID(ps_ddr_BVALID),
    .I_BREADY(ps_ddr_BREADY)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_recvFrame_logic_1_fu_428_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln306_2_fu_718_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
            grp_recvFrame_logic_1_fu_428_ap_start_reg <= 1'b1;
        end else if ((grp_recvFrame_logic_1_fu_428_ap_ready == 1'b1)) begin
            grp_recvFrame_logic_1_fu_428_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_single_lin_process_1_fu_362_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln378_fu_499_p2 == 1'd0) & (icmp_ln323_fu_526_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_single_lin_process_1_fu_362_ap_start_reg <= 1'b1;
        end else if ((grp_single_lin_process_1_fu_362_ap_ready == 1'b1)) begin
            grp_single_lin_process_1_fu_362_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~(mode_nr_load_load_fu_467_p1 == 2'd1) & ~(mode_nr_load_load_fu_467_p1 == 2'd2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        jj_fu_304 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state14) & (1'b0 == ap_block_state14_on_subcall_done))) begin
        jj_fu_304 <= add_ln337_reg_843;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lin_0_received_1_vld_in == 1'b1) & (lin_0_received_1_vld_reg == 1'b0))) begin
        lin_0_received_1_vld_reg <= 1'b1;
    end else if (((1'b1 == 1'b1) & (lin_0_received_1_vld_in == 1'b0) & (lin_0_received_1_vld_reg == 1'b1))) begin
        lin_0_received_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lin_1_received_1_vld_in == 1'b1) & (lin_1_received_1_vld_reg == 1'b0))) begin
        lin_1_received_1_vld_reg <= 1'b1;
    end else if (((1'b1 == 1'b1) & (lin_1_received_1_vld_in == 1'b0) & (lin_1_received_1_vld_reg == 1'b1))) begin
        lin_1_received_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lin_2_received_1_vld_in == 1'b1) & (lin_2_received_1_vld_reg == 1'b0))) begin
        lin_2_received_1_vld_reg <= 1'b1;
    end else if (((1'b1 == 1'b1) & (lin_2_received_1_vld_in == 1'b0) & (lin_2_received_1_vld_reg == 1'b1))) begin
        lin_2_received_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lin_3_received_1_vld_in == 1'b1) & (lin_3_received_1_vld_reg == 1'b0))) begin
        lin_3_received_1_vld_reg <= 1'b1;
    end else if (((1'b1 == 1'b1) & (lin_3_received_1_vld_in == 1'b0) & (lin_3_received_1_vld_reg == 1'b1))) begin
        lin_3_received_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lin_4_received_1_vld_in == 1'b1) & (lin_4_received_1_vld_reg == 1'b0))) begin
        lin_4_received_1_vld_reg <= 1'b1;
    end else if (((1'b1 == 1'b1) & (lin_4_received_1_vld_in == 1'b0) & (lin_4_received_1_vld_reg == 1'b1))) begin
        lin_4_received_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lin_5_received_1_vld_in == 1'b1) & (lin_5_received_1_vld_reg == 1'b0))) begin
        lin_5_received_1_vld_reg <= 1'b1;
    end else if (((1'b1 == 1'b1) & (lin_5_received_1_vld_in == 1'b0) & (lin_5_received_1_vld_reg == 1'b1))) begin
        lin_5_received_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lin_6_received_1_vld_in == 1'b1) & (lin_6_received_1_vld_reg == 1'b0))) begin
        lin_6_received_1_vld_reg <= 1'b1;
    end else if (((1'b1 == 1'b1) & (lin_6_received_1_vld_in == 1'b0) & (lin_6_received_1_vld_reg == 1'b1))) begin
        lin_6_received_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lin_7_received_1_vld_in == 1'b1) & (lin_7_received_1_vld_reg == 1'b0))) begin
        lin_7_received_1_vld_reg <= 1'b1;
    end else if (((1'b1 == 1'b1) & (lin_7_received_1_vld_in == 1'b0) & (lin_7_received_1_vld_reg == 1'b1))) begin
        lin_7_received_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lin_8_received_1_vld_in == 1'b1) & (lin_8_received_1_vld_reg == 1'b0))) begin
        lin_8_received_1_vld_reg <= 1'b1;
    end else if (((1'b1 == 1'b1) & (lin_8_received_1_vld_in == 1'b0) & (lin_8_received_1_vld_reg == 1'b1))) begin
        lin_8_received_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lin_9_received_1_vld_in == 1'b1) & (lin_9_received_1_vld_reg == 1'b0))) begin
        lin_9_received_1_vld_reg <= 1'b1;
    end else if (((1'b1 == 1'b1) & (lin_9_received_1_vld_in == 1'b0) & (lin_9_received_1_vld_reg == 1'b1))) begin
        lin_9_received_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lin_dropped_1_vld_in == 1'b1) & (lin_dropped_1_vld_reg == 1'b0))) begin
        lin_dropped_1_vld_reg <= 1'b1;
    end else if (((1'b1 == 1'b1) & (lin_dropped_1_vld_in == 1'b0) & (lin_dropped_1_vld_reg == 1'b1))) begin
        lin_dropped_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((mode_nr_load_load_fu_467_p1 == 2'd2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        lin_nr_fu_300 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_on_subcall_done))) begin
        lin_nr_fu_300 <= lin_nr_2_reg_823;
    end
end

always @ (posedge ap_clk) begin
    if (((mode_nr_load_load_fu_467_p1 == 2'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mode_nr <= 2'd2;
    end else if (((icmp_ln378_fu_499_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        mode_nr <= 2'd0;
    end else if (((icmp_ln337_fu_563_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        mode_nr <= 2'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln337_reg_843 <= add_ln337_fu_569_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        can_ddr_read_reg_774 <= can_ddr;
        can_ptr_read_reg_784 <= can_ptr;
        lin_ddr_read_reg_769 <= lin_ddr;
        lin_ptr_read_reg_779 <= lin_ptr;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln337_fu_563_p2 == 1'd0) & (icmp_ln301_fu_590_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        canaddr_mod_reg_852 <= canaddr_mod_fu_608_p2;
        trunc_ln_reg_857 <= {{add_ln304_fu_623_p2[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln337_fu_563_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        icmp_ln301_reg_848 <= icmp_ln301_fu_590_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        icmp_ln306_2_reg_898 <= icmp_ln306_2_fu_718_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln378_fu_499_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln323_reg_828 <= icmp_ln323_fu_526_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (lin_0_received_1_vld_in == 1'b1) & (lin_0_received_1_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lin_0_received_1_vld_in == 1'b1) & (lin_0_received_1_vld_reg == 1'b0)))) begin
        lin_0_received_1_data_reg <= grp_single_lin_process_1_fu_362_lin_0_received;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (lin_1_received_1_vld_in == 1'b1) & (lin_1_received_1_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lin_1_received_1_vld_in == 1'b1) & (lin_1_received_1_vld_reg == 1'b0)))) begin
        lin_1_received_1_data_reg <= grp_single_lin_process_1_fu_362_lin_1_received;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (lin_2_received_1_vld_in == 1'b1) & (lin_2_received_1_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lin_2_received_1_vld_in == 1'b1) & (lin_2_received_1_vld_reg == 1'b0)))) begin
        lin_2_received_1_data_reg <= grp_single_lin_process_1_fu_362_lin_2_received;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (lin_3_received_1_vld_in == 1'b1) & (lin_3_received_1_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lin_3_received_1_vld_in == 1'b1) & (lin_3_received_1_vld_reg == 1'b0)))) begin
        lin_3_received_1_data_reg <= grp_single_lin_process_1_fu_362_lin_3_received;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (lin_4_received_1_vld_in == 1'b1) & (lin_4_received_1_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lin_4_received_1_vld_in == 1'b1) & (lin_4_received_1_vld_reg == 1'b0)))) begin
        lin_4_received_1_data_reg <= grp_single_lin_process_1_fu_362_lin_4_received;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (lin_5_received_1_vld_in == 1'b1) & (lin_5_received_1_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lin_5_received_1_vld_in == 1'b1) & (lin_5_received_1_vld_reg == 1'b0)))) begin
        lin_5_received_1_data_reg <= grp_single_lin_process_1_fu_362_lin_5_received;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (lin_6_received_1_vld_in == 1'b1) & (lin_6_received_1_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lin_6_received_1_vld_in == 1'b1) & (lin_6_received_1_vld_reg == 1'b0)))) begin
        lin_6_received_1_data_reg <= grp_single_lin_process_1_fu_362_lin_6_received;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (lin_7_received_1_vld_in == 1'b1) & (lin_7_received_1_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lin_7_received_1_vld_in == 1'b1) & (lin_7_received_1_vld_reg == 1'b0)))) begin
        lin_7_received_1_data_reg <= grp_single_lin_process_1_fu_362_lin_7_received;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (lin_8_received_1_vld_in == 1'b1) & (lin_8_received_1_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lin_8_received_1_vld_in == 1'b1) & (lin_8_received_1_vld_reg == 1'b0)))) begin
        lin_8_received_1_data_reg <= grp_single_lin_process_1_fu_362_lin_8_received;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (lin_9_received_1_vld_in == 1'b1) & (lin_9_received_1_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lin_9_received_1_vld_in == 1'b1) & (lin_9_received_1_vld_reg == 1'b0)))) begin
        lin_9_received_1_data_reg <= grp_single_lin_process_1_fu_362_lin_9_received;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (lin_dropped_1_vld_in == 1'b1) & (lin_dropped_1_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lin_dropped_1_vld_in == 1'b1) & (lin_dropped_1_vld_reg == 1'b0)))) begin
        lin_dropped_1_data_reg <= grp_single_lin_process_1_fu_362_lin_dropped;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lin_nr_2_reg_823 <= lin_nr_2_fu_505_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln378_fu_499_p2 == 1'd0) & (icmp_ln323_fu_526_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        linbase_mod_reg_832 <= linbase_mod_fu_544_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln306_2_fu_718_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        readIndex_2_reg_902[5 : 0] <= readIndex_2_fu_750_p3[5 : 0];
readIndex_2_reg_902[7] <= readIndex_2_fu_750_p3[7];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        result_reg_868 <= can_addr_RDATA;
        tmp_10_reg_883 <= {{can_addr_RDATA[30:24]}};
        tmp_8_reg_893 <= {{can_addr_RDATA[14:8]}};
        tmp_9_reg_878 <= {{can_addr_RDATA[14:8]}};
        tmp_reg_888 <= {{can_addr_RDATA[30:24]}};
        trunc_ln304_reg_873 <= trunc_ln304_fu_654_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~(mode_nr_load_load_fu_467_p1 == 2'd1) & ~(mode_nr_load_load_fu_467_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state1))) begin
        trunc_ln337_reg_812 <= trunc_ln337_fu_486_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((mode_nr_load_load_fu_467_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state1))) begin
        trunc_ln378_reg_800 <= trunc_ln378_fu_477_p1;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((can_addr_RVALID == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state14_on_subcall_done)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

always @ (*) begin
    if (((lin_dropped_1_ack_in == 1'b0) | (lin_9_received_1_ack_in == 1'b0) | (lin_8_received_1_ack_in == 1'b0) | (lin_7_received_1_ack_in == 1'b0) | (lin_6_received_1_ack_in == 1'b0) | (lin_5_received_1_ack_in == 1'b0) | (lin_4_received_1_ack_in == 1'b0) | (lin_3_received_1_ack_in == 1'b0) | (lin_2_received_1_ack_in == 1'b0) | (lin_1_received_1_ack_in == 1'b0) | (lin_0_received_1_ack_in == 1'b0))) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_on_subcall_done)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((can_addr_ARREADY == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((~((lin_dropped_1_ack_in == 1'b0) | (lin_9_received_1_ack_in == 1'b0) | (lin_8_received_1_ack_in == 1'b0) | (lin_7_received_1_ack_in == 1'b0) | (lin_6_received_1_ack_in == 1'b0) | (lin_5_received_1_ack_in == 1'b0) | (lin_4_received_1_ack_in == 1'b0) | (lin_3_received_1_ack_in == 1'b0) | (lin_2_received_1_ack_in == 1'b0) | (lin_1_received_1_ack_in == 1'b0) | (lin_0_received_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state15))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((lin_dropped_1_ack_in == 1'b0) | (lin_9_received_1_ack_in == 1'b0) | (lin_8_received_1_ack_in == 1'b0) | (lin_7_received_1_ack_in == 1'b0) | (lin_6_received_1_ack_in == 1'b0) | (lin_5_received_1_ack_in == 1'b0) | (lin_4_received_1_ack_in == 1'b0) | (lin_3_received_1_ack_in == 1'b0) | (lin_2_received_1_ack_in == 1'b0) | (lin_1_received_1_ack_in == 1'b0) | (lin_0_received_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state15))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((can_addr_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        can_addr_ARADDR = sext_ln304_fu_644_p1;
    end else if ((((icmp_ln306_2_fu_718_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln306_2_reg_898 == 1'd0) & (icmp_ln301_reg_848 == 1'd0) & (1'b1 == ap_CS_fsm_state14)))) begin
        can_addr_ARADDR = grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARADDR;
    end else begin
        can_addr_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((can_addr_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        can_addr_ARLEN = 32'd1;
    end else if ((((icmp_ln306_2_fu_718_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln306_2_reg_898 == 1'd0) & (icmp_ln301_reg_848 == 1'd0) & (1'b1 == ap_CS_fsm_state14)))) begin
        can_addr_ARLEN = grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARLEN;
    end else begin
        can_addr_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((can_addr_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        can_addr_ARVALID = 1'b1;
    end else if ((((icmp_ln306_2_fu_718_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln306_2_reg_898 == 1'd0) & (icmp_ln301_reg_848 == 1'd0) & (1'b1 == ap_CS_fsm_state14)))) begin
        can_addr_ARVALID = grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARVALID;
    end else begin
        can_addr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln306_2_fu_718_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln306_2_reg_898 == 1'd0) & (icmp_ln301_reg_848 == 1'd0) & (1'b1 == ap_CS_fsm_state14)))) begin
        can_addr_AWVALID = grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWVALID;
    end else begin
        can_addr_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln306_2_fu_718_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln306_2_reg_898 == 1'd0) & (icmp_ln301_reg_848 == 1'd0) & (1'b1 == ap_CS_fsm_state14)))) begin
        can_addr_BREADY = grp_recvFrame_logic_1_fu_428_m_axi_can_addr_BREADY;
    end else begin
        can_addr_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (can_addr_RVALID == 1'b1))) begin
        can_addr_RREADY = 1'b1;
    end else if ((((icmp_ln306_2_fu_718_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln306_2_reg_898 == 1'd0) & (icmp_ln301_reg_848 == 1'd0) & (1'b1 == ap_CS_fsm_state14)))) begin
        can_addr_RREADY = grp_recvFrame_logic_1_fu_428_m_axi_can_addr_RREADY;
    end else begin
        can_addr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln306_2_fu_718_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln306_2_reg_898 == 1'd0) & (icmp_ln301_reg_848 == 1'd0) & (1'b1 == ap_CS_fsm_state14)))) begin
        can_addr_WVALID = grp_recvFrame_logic_1_fu_428_m_axi_can_addr_WVALID;
    end else begin
        can_addr_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        can_addr_blk_n_AR = m_axi_can_addr_ARREADY;
    end else begin
        can_addr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        can_addr_blk_n_R = m_axi_can_addr_RVALID;
    end else begin
        can_addr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((lin_0_received_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (lin_0_received_1_vld_reg == 1'b1)))) begin
        lin_0_received_1_ack_in = 1'b1;
    end else begin
        lin_0_received_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((lin_1_received_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (lin_1_received_1_vld_reg == 1'b1)))) begin
        lin_1_received_1_ack_in = 1'b1;
    end else begin
        lin_1_received_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((lin_2_received_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (lin_2_received_1_vld_reg == 1'b1)))) begin
        lin_2_received_1_ack_in = 1'b1;
    end else begin
        lin_2_received_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((lin_3_received_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (lin_3_received_1_vld_reg == 1'b1)))) begin
        lin_3_received_1_ack_in = 1'b1;
    end else begin
        lin_3_received_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((lin_4_received_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (lin_4_received_1_vld_reg == 1'b1)))) begin
        lin_4_received_1_ack_in = 1'b1;
    end else begin
        lin_4_received_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((lin_5_received_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (lin_5_received_1_vld_reg == 1'b1)))) begin
        lin_5_received_1_ack_in = 1'b1;
    end else begin
        lin_5_received_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((lin_6_received_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (lin_6_received_1_vld_reg == 1'b1)))) begin
        lin_6_received_1_ack_in = 1'b1;
    end else begin
        lin_6_received_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((lin_7_received_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (lin_7_received_1_vld_reg == 1'b1)))) begin
        lin_7_received_1_ack_in = 1'b1;
    end else begin
        lin_7_received_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((lin_8_received_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (lin_8_received_1_vld_reg == 1'b1)))) begin
        lin_8_received_1_ack_in = 1'b1;
    end else begin
        lin_8_received_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((lin_9_received_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (lin_9_received_1_vld_reg == 1'b1)))) begin
        lin_9_received_1_ack_in = 1'b1;
    end else begin
        lin_9_received_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln378_fu_499_p2 == 1'd0) & (icmp_ln323_fu_526_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln323_reg_828 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        lin_addr_ARVALID = grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARVALID;
    end else begin
        lin_addr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln378_fu_499_p2 == 1'd0) & (icmp_ln323_fu_526_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln323_reg_828 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        lin_addr_AWVALID = grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWVALID;
    end else begin
        lin_addr_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln378_fu_499_p2 == 1'd0) & (icmp_ln323_fu_526_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln323_reg_828 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        lin_addr_BREADY = grp_single_lin_process_1_fu_362_m_axi_lin_addr_BREADY;
    end else begin
        lin_addr_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln378_fu_499_p2 == 1'd0) & (icmp_ln323_fu_526_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln323_reg_828 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        lin_addr_RREADY = grp_single_lin_process_1_fu_362_m_axi_lin_addr_RREADY;
    end else begin
        lin_addr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln378_fu_499_p2 == 1'd0) & (icmp_ln323_fu_526_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln323_reg_828 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        lin_addr_WVALID = grp_single_lin_process_1_fu_362_m_axi_lin_addr_WVALID;
    end else begin
        lin_addr_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((lin_dropped_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (lin_dropped_1_vld_reg == 1'b1)))) begin
        lin_dropped_1_ack_in = 1'b1;
    end else begin
        lin_dropped_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln306_2_fu_718_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln306_2_reg_898 == 1'd0) & (icmp_ln301_reg_848 == 1'd0) & (1'b1 == ap_CS_fsm_state14)))) begin
        ps_ddr_ARADDR = grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARADDR;
    end else if ((((icmp_ln378_fu_499_p2 == 1'd0) & (icmp_ln323_fu_526_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln323_reg_828 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        ps_ddr_ARADDR = grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARADDR;
    end else begin
        ps_ddr_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln306_2_fu_718_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln306_2_reg_898 == 1'd0) & (icmp_ln301_reg_848 == 1'd0) & (1'b1 == ap_CS_fsm_state14)))) begin
        ps_ddr_ARLEN = grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARLEN;
    end else if ((((icmp_ln378_fu_499_p2 == 1'd0) & (icmp_ln323_fu_526_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln323_reg_828 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        ps_ddr_ARLEN = grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARLEN;
    end else begin
        ps_ddr_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln306_2_fu_718_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln306_2_reg_898 == 1'd0) & (icmp_ln301_reg_848 == 1'd0) & (1'b1 == ap_CS_fsm_state14)))) begin
        ps_ddr_ARVALID = grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARVALID;
    end else if ((((icmp_ln378_fu_499_p2 == 1'd0) & (icmp_ln323_fu_526_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln323_reg_828 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        ps_ddr_ARVALID = grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARVALID;
    end else begin
        ps_ddr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln306_2_fu_718_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln306_2_reg_898 == 1'd0) & (icmp_ln301_reg_848 == 1'd0) & (1'b1 == ap_CS_fsm_state14)))) begin
        ps_ddr_AWADDR = grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWADDR;
    end else if ((((icmp_ln378_fu_499_p2 == 1'd0) & (icmp_ln323_fu_526_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln323_reg_828 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        ps_ddr_AWADDR = grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWADDR;
    end else begin
        ps_ddr_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln306_2_fu_718_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln306_2_reg_898 == 1'd0) & (icmp_ln301_reg_848 == 1'd0) & (1'b1 == ap_CS_fsm_state14)))) begin
        ps_ddr_AWLEN = grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWLEN;
    end else if ((((icmp_ln378_fu_499_p2 == 1'd0) & (icmp_ln323_fu_526_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln323_reg_828 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        ps_ddr_AWLEN = grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWLEN;
    end else begin
        ps_ddr_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln306_2_fu_718_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln306_2_reg_898 == 1'd0) & (icmp_ln301_reg_848 == 1'd0) & (1'b1 == ap_CS_fsm_state14)))) begin
        ps_ddr_AWVALID = grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWVALID;
    end else if ((((icmp_ln378_fu_499_p2 == 1'd0) & (icmp_ln323_fu_526_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln323_reg_828 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        ps_ddr_AWVALID = grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWVALID;
    end else begin
        ps_ddr_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln306_2_fu_718_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln306_2_reg_898 == 1'd0) & (icmp_ln301_reg_848 == 1'd0) & (1'b1 == ap_CS_fsm_state14)))) begin
        ps_ddr_BREADY = grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_BREADY;
    end else if ((((icmp_ln378_fu_499_p2 == 1'd0) & (icmp_ln323_fu_526_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln323_reg_828 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        ps_ddr_BREADY = grp_single_lin_process_1_fu_362_m_axi_ps_ddr_BREADY;
    end else begin
        ps_ddr_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln306_2_fu_718_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln306_2_reg_898 == 1'd0) & (icmp_ln301_reg_848 == 1'd0) & (1'b1 == ap_CS_fsm_state14)))) begin
        ps_ddr_RREADY = grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_RREADY;
    end else if ((((icmp_ln378_fu_499_p2 == 1'd0) & (icmp_ln323_fu_526_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln323_reg_828 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        ps_ddr_RREADY = grp_single_lin_process_1_fu_362_m_axi_ps_ddr_RREADY;
    end else begin
        ps_ddr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln306_2_fu_718_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln306_2_reg_898 == 1'd0) & (icmp_ln301_reg_848 == 1'd0) & (1'b1 == ap_CS_fsm_state14)))) begin
        ps_ddr_WDATA = grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WDATA;
    end else if ((((icmp_ln378_fu_499_p2 == 1'd0) & (icmp_ln323_fu_526_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln323_reg_828 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        ps_ddr_WDATA = grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WDATA;
    end else begin
        ps_ddr_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln306_2_fu_718_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln306_2_reg_898 == 1'd0) & (icmp_ln301_reg_848 == 1'd0) & (1'b1 == ap_CS_fsm_state14)))) begin
        ps_ddr_WSTRB = grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WSTRB;
    end else if ((((icmp_ln378_fu_499_p2 == 1'd0) & (icmp_ln323_fu_526_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln323_reg_828 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        ps_ddr_WSTRB = grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WSTRB;
    end else begin
        ps_ddr_WSTRB = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln306_2_fu_718_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln306_2_reg_898 == 1'd0) & (icmp_ln301_reg_848 == 1'd0) & (1'b1 == ap_CS_fsm_state14)))) begin
        ps_ddr_WVALID = grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WVALID;
    end else if ((((icmp_ln378_fu_499_p2 == 1'd0) & (icmp_ln323_fu_526_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln323_reg_828 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        ps_ddr_WVALID = grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WVALID;
    end else begin
        ps_ddr_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~(mode_nr_load_load_fu_467_p1 == 2'd1) & ~(mode_nr_load_load_fu_467_p1 == 2'd2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if (((mode_nr_load_load_fu_467_p1 == 2'd2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((mode_nr_load_load_fu_467_p1 == 2'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln378_fu_499_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln337_fu_563_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else if (((icmp_ln337_fu_563_p2 == 1'd0) & (icmp_ln301_fu_590_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((can_addr_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (can_addr_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (1'b0 == ap_block_state14_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if ((~((lin_dropped_1_ack_in == 1'b0) | (lin_9_received_1_ack_in == 1'b0) | (lin_8_received_1_ack_in == 1'b0) | (lin_7_received_1_ack_in == 1'b0) | (lin_6_received_1_ack_in == 1'b0) | (lin_5_received_1_ack_in == 1'b0) | (lin_4_received_1_ack_in == 1'b0) | (lin_3_received_1_ack_in == 1'b0) | (lin_2_received_1_ack_in == 1'b0) | (lin_1_received_1_ack_in == 1'b0) | (lin_0_received_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln304_fu_623_p2 = (zext_ln304_fu_619_p1 + can_ptr_read_reg_784);

assign add_ln337_fu_569_p2 = (jj_fu_304 + 4'd1);

assign and_ln301_fu_585_p2 = (trunc_ln337_reg_812 & shl_ln301_fu_579_p2);

assign and_ln323_fu_521_p2 = (trunc_ln378_reg_800 & shl_ln323_fu_515_p2);

assign and_ln_fu_708_p5 = {{{{tmp_reg_888}, {9'd0}}, {tmp_8_reg_893}}, {8'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state14_on_subcall_done = ((grp_recvFrame_logic_1_fu_428_ap_done == 1'b0) & (ap_predicate_op192_call_state14 == 1'b1));
end

always @ (*) begin
    ap_block_state15 = ((lin_dropped_1_ack_in == 1'b0) | (lin_9_received_1_ack_in == 1'b0) | (lin_8_received_1_ack_in == 1'b0) | (lin_7_received_1_ack_in == 1'b0) | (lin_6_received_1_ack_in == 1'b0) | (lin_5_received_1_ack_in == 1'b0) | (lin_4_received_1_ack_in == 1'b0) | (lin_3_received_1_ack_in == 1'b0) | (lin_2_received_1_ack_in == 1'b0) | (lin_1_received_1_ack_in == 1'b0) | (lin_0_received_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state3_on_subcall_done = ((grp_single_lin_process_1_fu_362_ap_done == 1'b0) & (icmp_ln323_reg_828 == 1'd0));
end

always @ (*) begin
    ap_predicate_op192_call_state14 = ((icmp_ln306_2_reg_898 == 1'd0) & (icmp_ln301_reg_848 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign canaddr_mod_fu_608_p2 = (zext_ln303_fu_604_p1 + can_ptr_read_reg_784);

assign grp_recvFrame_logic_1_fu_428_ap_start = grp_recvFrame_logic_1_fu_428_ap_start_reg;

assign grp_single_lin_process_1_fu_362_ap_start = grp_single_lin_process_1_fu_362_ap_start_reg;

assign icmp_ln301_fu_590_p2 = ((and_ln301_fu_585_p2 == 12'd0) ? 1'b1 : 1'b0);

assign icmp_ln306_1_fu_703_p2 = ((tmp_10_reg_883 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln306_2_fu_718_p2 = ((and_ln_fu_708_p5 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln306_fu_698_p2 = ((tmp_9_reg_878 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln323_fu_526_p2 = ((and_ln323_fu_521_p2 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln337_fu_563_p2 = ((jj_fu_304 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln378_fu_499_p2 = ((lin_nr_fu_300 == 4'd10) ? 1'b1 : 1'b0);

assign lin_0_received_1_vld_in = grp_single_lin_process_1_fu_362_lin_0_received_ap_vld;

assign lin_1_received_1_vld_in = grp_single_lin_process_1_fu_362_lin_1_received_ap_vld;

assign lin_2_received_1_vld_in = grp_single_lin_process_1_fu_362_lin_2_received_ap_vld;

assign lin_3_received_1_vld_in = grp_single_lin_process_1_fu_362_lin_3_received_ap_vld;

assign lin_4_received_1_vld_in = grp_single_lin_process_1_fu_362_lin_4_received_ap_vld;

assign lin_5_received_1_vld_in = grp_single_lin_process_1_fu_362_lin_5_received_ap_vld;

assign lin_6_received_1_vld_in = grp_single_lin_process_1_fu_362_lin_6_received_ap_vld;

assign lin_7_received_1_vld_in = grp_single_lin_process_1_fu_362_lin_7_received_ap_vld;

assign lin_8_received_1_vld_in = grp_single_lin_process_1_fu_362_lin_8_received_ap_vld;

assign lin_9_received_1_vld_in = grp_single_lin_process_1_fu_362_lin_9_received_ap_vld;

assign lin_dropped_1_vld_in = grp_single_lin_process_1_fu_362_lin_dropped_ap_vld;

assign lin_nr_2_fu_505_p2 = (lin_nr_fu_300 + 4'd1);

assign linbase_mod_fu_544_p2 = (zext_ln325_fu_540_p1 + lin_ptr_read_reg_779);

assign m_axi_uart_addr_ARADDR = 32'd0;

assign m_axi_uart_addr_ARBURST = 2'd0;

assign m_axi_uart_addr_ARCACHE = 4'd0;

assign m_axi_uart_addr_ARID = 1'd0;

assign m_axi_uart_addr_ARLEN = 8'd0;

assign m_axi_uart_addr_ARLOCK = 2'd0;

assign m_axi_uart_addr_ARPROT = 3'd0;

assign m_axi_uart_addr_ARQOS = 4'd0;

assign m_axi_uart_addr_ARREGION = 4'd0;

assign m_axi_uart_addr_ARSIZE = 3'd0;

assign m_axi_uart_addr_ARUSER = 1'd0;

assign m_axi_uart_addr_ARVALID = 1'b0;

assign m_axi_uart_addr_AWADDR = 32'd0;

assign m_axi_uart_addr_AWBURST = 2'd0;

assign m_axi_uart_addr_AWCACHE = 4'd0;

assign m_axi_uart_addr_AWID = 1'd0;

assign m_axi_uart_addr_AWLEN = 8'd0;

assign m_axi_uart_addr_AWLOCK = 2'd0;

assign m_axi_uart_addr_AWPROT = 3'd0;

assign m_axi_uart_addr_AWQOS = 4'd0;

assign m_axi_uart_addr_AWREGION = 4'd0;

assign m_axi_uart_addr_AWSIZE = 3'd0;

assign m_axi_uart_addr_AWUSER = 1'd0;

assign m_axi_uart_addr_AWVALID = 1'b0;

assign m_axi_uart_addr_BREADY = 1'b0;

assign m_axi_uart_addr_RREADY = 1'b0;

assign m_axi_uart_addr_WDATA = 32'd0;

assign m_axi_uart_addr_WID = 1'd0;

assign m_axi_uart_addr_WLAST = 1'b0;

assign m_axi_uart_addr_WSTRB = 4'd0;

assign m_axi_uart_addr_WUSER = 1'd0;

assign m_axi_uart_addr_WVALID = 1'b0;

assign mode_nr_load_load_fu_467_p1 = mode_nr;

assign or_ln304_fu_613_p2 = (shl_ln_fu_596_p3 | 20'd232);

assign readIndex_1_fu_742_p3 = {{tmp_11_fu_735_p3}, {7'd0}};

assign readIndex_2_fu_750_p3 = ((icmp_ln306_1_fu_703_p2[0:0] == 1'b1) ? readIndex_1_fu_742_p3 : zext_ln305_fu_731_p1);

assign readIndex_fu_724_p3 = ((icmp_ln306_fu_698_p2[0:0] == 1'b1) ? trunc_ln304_reg_873 : 6'd0);

assign sext_ln304_fu_644_p1 = $signed(trunc_ln_reg_857);

assign shl_ln301_fu_579_p2 = 12'd1 << zext_ln301_fu_575_p1;

assign shl_ln323_fu_515_p2 = 10'd1 << zext_ln323_fu_511_p1;

assign shl_ln4_fu_532_p3 = {{lin_nr_fu_300}, {12'd0}};

assign shl_ln_fu_596_p3 = {{jj_fu_304}, {16'd0}};

assign tmp_11_fu_735_p3 = result_reg_868[32'd23];

assign trunc_ln304_fu_654_p1 = can_addr_RDATA[5:0];

assign trunc_ln337_fu_486_p1 = can_en[11:0];

assign trunc_ln378_fu_477_p1 = lin_en[9:0];

assign zext_ln301_fu_575_p1 = jj_fu_304;

assign zext_ln303_fu_604_p1 = shl_ln_fu_596_p3;

assign zext_ln304_fu_619_p1 = or_ln304_fu_613_p2;

assign zext_ln305_fu_731_p1 = readIndex_fu_724_p3;

assign zext_ln323_fu_511_p1 = lin_nr_fu_300;

assign zext_ln325_fu_540_p1 = shl_ln4_fu_532_p3;

always @ (posedge ap_clk) begin
    readIndex_2_reg_902[6] <= 1'b0;
end

endmodule //clu
