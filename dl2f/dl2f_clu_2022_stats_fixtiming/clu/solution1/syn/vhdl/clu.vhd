-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity clu is
generic (
    C_M_AXI_CAN_ADDR_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_CAN_ADDR_ID_WIDTH : INTEGER := 1;
    C_M_AXI_CAN_ADDR_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CAN_ADDR_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_CAN_ADDR_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CAN_ADDR_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CAN_ADDR_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CAN_ADDR_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_UART_ADDR_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_UART_ADDR_ID_WIDTH : INTEGER := 1;
    C_M_AXI_UART_ADDR_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_UART_ADDR_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_UART_ADDR_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_UART_ADDR_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_UART_ADDR_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_UART_ADDR_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_LIN_ADDR_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_LIN_ADDR_ID_WIDTH : INTEGER := 1;
    C_M_AXI_LIN_ADDR_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_LIN_ADDR_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_LIN_ADDR_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_LIN_ADDR_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_LIN_ADDR_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_LIN_ADDR_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PS_DDR_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_PS_DDR_ID_WIDTH : INTEGER := 1;
    C_M_AXI_PS_DDR_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PS_DDR_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_PS_DDR_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PS_DDR_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PS_DDR_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PS_DDR_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_EN_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_EN_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_CAN_ADDR_USER_VALUE : INTEGER := 0;
    C_M_AXI_CAN_ADDR_PROT_VALUE : INTEGER := 0;
    C_M_AXI_CAN_ADDR_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_LIN_ADDR_USER_VALUE : INTEGER := 0;
    C_M_AXI_LIN_ADDR_PROT_VALUE : INTEGER := 0;
    C_M_AXI_LIN_ADDR_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_PS_DDR_USER_VALUE : INTEGER := 0;
    C_M_AXI_PS_DDR_PROT_VALUE : INTEGER := 0;
    C_M_AXI_PS_DDR_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_can_addr_AWVALID : OUT STD_LOGIC;
    m_axi_can_addr_AWREADY : IN STD_LOGIC;
    m_axi_can_addr_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CAN_ADDR_ADDR_WIDTH-1 downto 0);
    m_axi_can_addr_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_CAN_ADDR_ID_WIDTH-1 downto 0);
    m_axi_can_addr_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_can_addr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_can_addr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_can_addr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_can_addr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_can_addr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_can_addr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_can_addr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_can_addr_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CAN_ADDR_AWUSER_WIDTH-1 downto 0);
    m_axi_can_addr_WVALID : OUT STD_LOGIC;
    m_axi_can_addr_WREADY : IN STD_LOGIC;
    m_axi_can_addr_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_CAN_ADDR_DATA_WIDTH-1 downto 0);
    m_axi_can_addr_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_CAN_ADDR_DATA_WIDTH/8-1 downto 0);
    m_axi_can_addr_WLAST : OUT STD_LOGIC;
    m_axi_can_addr_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_CAN_ADDR_ID_WIDTH-1 downto 0);
    m_axi_can_addr_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CAN_ADDR_WUSER_WIDTH-1 downto 0);
    m_axi_can_addr_ARVALID : OUT STD_LOGIC;
    m_axi_can_addr_ARREADY : IN STD_LOGIC;
    m_axi_can_addr_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CAN_ADDR_ADDR_WIDTH-1 downto 0);
    m_axi_can_addr_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_CAN_ADDR_ID_WIDTH-1 downto 0);
    m_axi_can_addr_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_can_addr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_can_addr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_can_addr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_can_addr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_can_addr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_can_addr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_can_addr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_can_addr_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CAN_ADDR_ARUSER_WIDTH-1 downto 0);
    m_axi_can_addr_RVALID : IN STD_LOGIC;
    m_axi_can_addr_RREADY : OUT STD_LOGIC;
    m_axi_can_addr_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_CAN_ADDR_DATA_WIDTH-1 downto 0);
    m_axi_can_addr_RLAST : IN STD_LOGIC;
    m_axi_can_addr_RID : IN STD_LOGIC_VECTOR (C_M_AXI_CAN_ADDR_ID_WIDTH-1 downto 0);
    m_axi_can_addr_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CAN_ADDR_RUSER_WIDTH-1 downto 0);
    m_axi_can_addr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_can_addr_BVALID : IN STD_LOGIC;
    m_axi_can_addr_BREADY : OUT STD_LOGIC;
    m_axi_can_addr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_can_addr_BID : IN STD_LOGIC_VECTOR (C_M_AXI_CAN_ADDR_ID_WIDTH-1 downto 0);
    m_axi_can_addr_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CAN_ADDR_BUSER_WIDTH-1 downto 0);
    m_axi_uart_addr_AWVALID : OUT STD_LOGIC;
    m_axi_uart_addr_AWREADY : IN STD_LOGIC;
    m_axi_uart_addr_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_UART_ADDR_ADDR_WIDTH-1 downto 0);
    m_axi_uart_addr_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_UART_ADDR_ID_WIDTH-1 downto 0);
    m_axi_uart_addr_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_uart_addr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_uart_addr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_uart_addr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_uart_addr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_uart_addr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_uart_addr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_uart_addr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_uart_addr_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_UART_ADDR_AWUSER_WIDTH-1 downto 0);
    m_axi_uart_addr_WVALID : OUT STD_LOGIC;
    m_axi_uart_addr_WREADY : IN STD_LOGIC;
    m_axi_uart_addr_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_UART_ADDR_DATA_WIDTH-1 downto 0);
    m_axi_uart_addr_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_UART_ADDR_DATA_WIDTH/8-1 downto 0);
    m_axi_uart_addr_WLAST : OUT STD_LOGIC;
    m_axi_uart_addr_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_UART_ADDR_ID_WIDTH-1 downto 0);
    m_axi_uart_addr_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_UART_ADDR_WUSER_WIDTH-1 downto 0);
    m_axi_uart_addr_ARVALID : OUT STD_LOGIC;
    m_axi_uart_addr_ARREADY : IN STD_LOGIC;
    m_axi_uart_addr_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_UART_ADDR_ADDR_WIDTH-1 downto 0);
    m_axi_uart_addr_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_UART_ADDR_ID_WIDTH-1 downto 0);
    m_axi_uart_addr_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_uart_addr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_uart_addr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_uart_addr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_uart_addr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_uart_addr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_uart_addr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_uart_addr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_uart_addr_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_UART_ADDR_ARUSER_WIDTH-1 downto 0);
    m_axi_uart_addr_RVALID : IN STD_LOGIC;
    m_axi_uart_addr_RREADY : OUT STD_LOGIC;
    m_axi_uart_addr_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_UART_ADDR_DATA_WIDTH-1 downto 0);
    m_axi_uart_addr_RLAST : IN STD_LOGIC;
    m_axi_uart_addr_RID : IN STD_LOGIC_VECTOR (C_M_AXI_UART_ADDR_ID_WIDTH-1 downto 0);
    m_axi_uart_addr_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_UART_ADDR_RUSER_WIDTH-1 downto 0);
    m_axi_uart_addr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_uart_addr_BVALID : IN STD_LOGIC;
    m_axi_uart_addr_BREADY : OUT STD_LOGIC;
    m_axi_uart_addr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_uart_addr_BID : IN STD_LOGIC_VECTOR (C_M_AXI_UART_ADDR_ID_WIDTH-1 downto 0);
    m_axi_uart_addr_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_UART_ADDR_BUSER_WIDTH-1 downto 0);
    m_axi_lin_addr_AWVALID : OUT STD_LOGIC;
    m_axi_lin_addr_AWREADY : IN STD_LOGIC;
    m_axi_lin_addr_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_LIN_ADDR_ADDR_WIDTH-1 downto 0);
    m_axi_lin_addr_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_LIN_ADDR_ID_WIDTH-1 downto 0);
    m_axi_lin_addr_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_lin_addr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_lin_addr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_lin_addr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_lin_addr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lin_addr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_lin_addr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lin_addr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lin_addr_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_LIN_ADDR_AWUSER_WIDTH-1 downto 0);
    m_axi_lin_addr_WVALID : OUT STD_LOGIC;
    m_axi_lin_addr_WREADY : IN STD_LOGIC;
    m_axi_lin_addr_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_LIN_ADDR_DATA_WIDTH-1 downto 0);
    m_axi_lin_addr_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_LIN_ADDR_DATA_WIDTH/8-1 downto 0);
    m_axi_lin_addr_WLAST : OUT STD_LOGIC;
    m_axi_lin_addr_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_LIN_ADDR_ID_WIDTH-1 downto 0);
    m_axi_lin_addr_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_LIN_ADDR_WUSER_WIDTH-1 downto 0);
    m_axi_lin_addr_ARVALID : OUT STD_LOGIC;
    m_axi_lin_addr_ARREADY : IN STD_LOGIC;
    m_axi_lin_addr_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_LIN_ADDR_ADDR_WIDTH-1 downto 0);
    m_axi_lin_addr_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_LIN_ADDR_ID_WIDTH-1 downto 0);
    m_axi_lin_addr_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_lin_addr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_lin_addr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_lin_addr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_lin_addr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lin_addr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_lin_addr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lin_addr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lin_addr_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_LIN_ADDR_ARUSER_WIDTH-1 downto 0);
    m_axi_lin_addr_RVALID : IN STD_LOGIC;
    m_axi_lin_addr_RREADY : OUT STD_LOGIC;
    m_axi_lin_addr_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_LIN_ADDR_DATA_WIDTH-1 downto 0);
    m_axi_lin_addr_RLAST : IN STD_LOGIC;
    m_axi_lin_addr_RID : IN STD_LOGIC_VECTOR (C_M_AXI_LIN_ADDR_ID_WIDTH-1 downto 0);
    m_axi_lin_addr_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_LIN_ADDR_RUSER_WIDTH-1 downto 0);
    m_axi_lin_addr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_lin_addr_BVALID : IN STD_LOGIC;
    m_axi_lin_addr_BREADY : OUT STD_LOGIC;
    m_axi_lin_addr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_lin_addr_BID : IN STD_LOGIC_VECTOR (C_M_AXI_LIN_ADDR_ID_WIDTH-1 downto 0);
    m_axi_lin_addr_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_LIN_ADDR_BUSER_WIDTH-1 downto 0);
    m_axi_ps_ddr_AWVALID : OUT STD_LOGIC;
    m_axi_ps_ddr_AWREADY : IN STD_LOGIC;
    m_axi_ps_ddr_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PS_DDR_ADDR_WIDTH-1 downto 0);
    m_axi_ps_ddr_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_PS_DDR_ID_WIDTH-1 downto 0);
    m_axi_ps_ddr_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ps_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ps_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ps_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ps_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ps_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ps_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ps_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ps_ddr_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PS_DDR_AWUSER_WIDTH-1 downto 0);
    m_axi_ps_ddr_WVALID : OUT STD_LOGIC;
    m_axi_ps_ddr_WREADY : IN STD_LOGIC;
    m_axi_ps_ddr_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_PS_DDR_DATA_WIDTH-1 downto 0);
    m_axi_ps_ddr_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_PS_DDR_DATA_WIDTH/8-1 downto 0);
    m_axi_ps_ddr_WLAST : OUT STD_LOGIC;
    m_axi_ps_ddr_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_PS_DDR_ID_WIDTH-1 downto 0);
    m_axi_ps_ddr_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PS_DDR_WUSER_WIDTH-1 downto 0);
    m_axi_ps_ddr_ARVALID : OUT STD_LOGIC;
    m_axi_ps_ddr_ARREADY : IN STD_LOGIC;
    m_axi_ps_ddr_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PS_DDR_ADDR_WIDTH-1 downto 0);
    m_axi_ps_ddr_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_PS_DDR_ID_WIDTH-1 downto 0);
    m_axi_ps_ddr_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ps_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ps_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ps_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ps_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ps_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ps_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ps_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ps_ddr_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PS_DDR_ARUSER_WIDTH-1 downto 0);
    m_axi_ps_ddr_RVALID : IN STD_LOGIC;
    m_axi_ps_ddr_RREADY : OUT STD_LOGIC;
    m_axi_ps_ddr_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_PS_DDR_DATA_WIDTH-1 downto 0);
    m_axi_ps_ddr_RLAST : IN STD_LOGIC;
    m_axi_ps_ddr_RID : IN STD_LOGIC_VECTOR (C_M_AXI_PS_DDR_ID_WIDTH-1 downto 0);
    m_axi_ps_ddr_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PS_DDR_RUSER_WIDTH-1 downto 0);
    m_axi_ps_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ps_ddr_BVALID : IN STD_LOGIC;
    m_axi_ps_ddr_BREADY : OUT STD_LOGIC;
    m_axi_ps_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ps_ddr_BID : IN STD_LOGIC_VECTOR (C_M_AXI_PS_DDR_ID_WIDTH-1 downto 0);
    m_axi_ps_ddr_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PS_DDR_BUSER_WIDTH-1 downto 0);
    timestamp : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axi_EN_AWVALID : IN STD_LOGIC;
    s_axi_EN_AWREADY : OUT STD_LOGIC;
    s_axi_EN_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_EN_ADDR_WIDTH-1 downto 0);
    s_axi_EN_WVALID : IN STD_LOGIC;
    s_axi_EN_WREADY : OUT STD_LOGIC;
    s_axi_EN_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_EN_DATA_WIDTH-1 downto 0);
    s_axi_EN_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_EN_DATA_WIDTH/8-1 downto 0);
    s_axi_EN_ARVALID : IN STD_LOGIC;
    s_axi_EN_ARREADY : OUT STD_LOGIC;
    s_axi_EN_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_EN_ADDR_WIDTH-1 downto 0);
    s_axi_EN_RVALID : OUT STD_LOGIC;
    s_axi_EN_RREADY : IN STD_LOGIC;
    s_axi_EN_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_EN_DATA_WIDTH-1 downto 0);
    s_axi_EN_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_EN_BVALID : OUT STD_LOGIC;
    s_axi_EN_BREADY : IN STD_LOGIC;
    s_axi_EN_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of clu is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "clu_clu,hls_ip_2022_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=7881,HLS_SYN_LUT=12890,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_UART_ADDR_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_UART_ADDR_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_UART_ADDR_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv20_E8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000011101000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal can_ptr : STD_LOGIC_VECTOR (31 downto 0);
    signal uart_ptr : STD_LOGIC_VECTOR (31 downto 0);
    signal lin_ptr : STD_LOGIC_VECTOR (31 downto 0);
    signal received_uart : STD_LOGIC_VECTOR (31 downto 0);
    signal lin_0_received_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal lin_0_received_1_vld_reg : STD_LOGIC := '0';
    signal lin_0_received_1_vld_in : STD_LOGIC;
    signal lin_0_received_1_ack_in : STD_LOGIC;
    signal lin_1_received_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal lin_1_received_1_vld_reg : STD_LOGIC := '0';
    signal lin_1_received_1_vld_in : STD_LOGIC;
    signal lin_1_received_1_ack_in : STD_LOGIC;
    signal lin_2_received_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal lin_2_received_1_vld_reg : STD_LOGIC := '0';
    signal lin_2_received_1_vld_in : STD_LOGIC;
    signal lin_2_received_1_ack_in : STD_LOGIC;
    signal lin_3_received_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal lin_3_received_1_vld_reg : STD_LOGIC := '0';
    signal lin_3_received_1_vld_in : STD_LOGIC;
    signal lin_3_received_1_ack_in : STD_LOGIC;
    signal lin_4_received_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal lin_4_received_1_vld_reg : STD_LOGIC := '0';
    signal lin_4_received_1_vld_in : STD_LOGIC;
    signal lin_4_received_1_ack_in : STD_LOGIC;
    signal lin_5_received_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal lin_5_received_1_vld_reg : STD_LOGIC := '0';
    signal lin_5_received_1_vld_in : STD_LOGIC;
    signal lin_5_received_1_ack_in : STD_LOGIC;
    signal lin_6_received_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal lin_6_received_1_vld_reg : STD_LOGIC := '0';
    signal lin_6_received_1_vld_in : STD_LOGIC;
    signal lin_6_received_1_ack_in : STD_LOGIC;
    signal lin_7_received_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal lin_7_received_1_vld_reg : STD_LOGIC := '0';
    signal lin_7_received_1_vld_in : STD_LOGIC;
    signal lin_7_received_1_ack_in : STD_LOGIC;
    signal lin_8_received_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal lin_8_received_1_vld_reg : STD_LOGIC := '0';
    signal lin_8_received_1_vld_in : STD_LOGIC;
    signal lin_8_received_1_ack_in : STD_LOGIC;
    signal lin_9_received_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal lin_9_received_1_vld_reg : STD_LOGIC := '0';
    signal lin_9_received_1_vld_in : STD_LOGIC;
    signal lin_9_received_1_ack_in : STD_LOGIC;
    signal lin_dropped_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal lin_dropped_1_vld_reg : STD_LOGIC := '0';
    signal lin_dropped_1_vld_in : STD_LOGIC;
    signal lin_dropped_1_ack_in : STD_LOGIC;
    signal can_en : STD_LOGIC_VECTOR (31 downto 0);
    signal uart_en : STD_LOGIC_VECTOR (7 downto 0);
    signal lin_en : STD_LOGIC_VECTOR (31 downto 0);
    signal can_ddr : STD_LOGIC_VECTOR (31 downto 0);
    signal uart_ddr : STD_LOGIC_VECTOR (31 downto 0);
    signal lin_ddr : STD_LOGIC_VECTOR (31 downto 0);
    signal mode_nr : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal can_addr_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal can_addr_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal lin_ddr_read_reg_769 : STD_LOGIC_VECTOR (31 downto 0);
    signal can_ddr_read_reg_774 : STD_LOGIC_VECTOR (31 downto 0);
    signal lin_ptr_read_reg_779 : STD_LOGIC_VECTOR (31 downto 0);
    signal can_ptr_read_reg_784 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln378_fu_477_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln378_reg_800 : STD_LOGIC_VECTOR (9 downto 0);
    signal mode_nr_load_load_fu_467_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln337_fu_486_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln337_reg_812 : STD_LOGIC_VECTOR (11 downto 0);
    signal lin_nr_2_fu_505_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal lin_nr_2_reg_823 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln323_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln323_reg_828 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln378_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal linbase_mod_fu_544_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal linbase_mod_reg_832 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln337_fu_569_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln337_reg_843 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln301_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln301_reg_848 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln337_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal canaddr_mod_fu_608_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal canaddr_mod_reg_852 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_reg_857 : STD_LOGIC_VECTOR (29 downto 0);
    signal result_reg_868 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln304_fu_654_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln304_reg_873 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_reg_878 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_reg_883 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_reg_888 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_reg_893 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln306_2_fu_718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln306_2_reg_898 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal readIndex_2_fu_750_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal readIndex_2_reg_902 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_single_lin_process_1_fu_362_ap_start : STD_LOGIC;
    signal grp_single_lin_process_1_fu_362_ap_done : STD_LOGIC;
    signal grp_single_lin_process_1_fu_362_ap_idle : STD_LOGIC;
    signal grp_single_lin_process_1_fu_362_ap_ready : STD_LOGIC;
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWVALID : STD_LOGIC;
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_WVALID : STD_LOGIC;
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_WLAST : STD_LOGIC;
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARVALID : STD_LOGIC;
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_RREADY : STD_LOGIC;
    signal grp_single_lin_process_1_fu_362_m_axi_lin_addr_BREADY : STD_LOGIC;
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWVALID : STD_LOGIC;
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WVALID : STD_LOGIC;
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WLAST : STD_LOGIC;
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARVALID : STD_LOGIC;
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_RREADY : STD_LOGIC;
    signal grp_single_lin_process_1_fu_362_m_axi_ps_ddr_BREADY : STD_LOGIC;
    signal grp_single_lin_process_1_fu_362_lin_0_received : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_single_lin_process_1_fu_362_lin_0_received_ap_vld : STD_LOGIC;
    signal grp_single_lin_process_1_fu_362_lin_1_received : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_single_lin_process_1_fu_362_lin_1_received_ap_vld : STD_LOGIC;
    signal grp_single_lin_process_1_fu_362_lin_2_received : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_single_lin_process_1_fu_362_lin_2_received_ap_vld : STD_LOGIC;
    signal grp_single_lin_process_1_fu_362_lin_3_received : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_single_lin_process_1_fu_362_lin_3_received_ap_vld : STD_LOGIC;
    signal grp_single_lin_process_1_fu_362_lin_4_received : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_single_lin_process_1_fu_362_lin_4_received_ap_vld : STD_LOGIC;
    signal grp_single_lin_process_1_fu_362_lin_5_received : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_single_lin_process_1_fu_362_lin_5_received_ap_vld : STD_LOGIC;
    signal grp_single_lin_process_1_fu_362_lin_6_received : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_single_lin_process_1_fu_362_lin_6_received_ap_vld : STD_LOGIC;
    signal grp_single_lin_process_1_fu_362_lin_7_received : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_single_lin_process_1_fu_362_lin_7_received_ap_vld : STD_LOGIC;
    signal grp_single_lin_process_1_fu_362_lin_8_received : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_single_lin_process_1_fu_362_lin_8_received_ap_vld : STD_LOGIC;
    signal grp_single_lin_process_1_fu_362_lin_9_received : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_single_lin_process_1_fu_362_lin_9_received_ap_vld : STD_LOGIC;
    signal grp_single_lin_process_1_fu_362_lin_dropped : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_single_lin_process_1_fu_362_lin_dropped_ap_vld : STD_LOGIC;
    signal grp_single_lin_process_1_fu_362_received_lin : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_single_lin_process_1_fu_362_received_lin_ap_vld : STD_LOGIC;
    signal grp_recvFrame_logic_1_fu_428_ap_start : STD_LOGIC;
    signal grp_recvFrame_logic_1_fu_428_ap_done : STD_LOGIC;
    signal grp_recvFrame_logic_1_fu_428_ap_idle : STD_LOGIC;
    signal grp_recvFrame_logic_1_fu_428_ap_ready : STD_LOGIC;
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWVALID : STD_LOGIC;
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_WVALID : STD_LOGIC;
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_WLAST : STD_LOGIC;
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARVALID : STD_LOGIC;
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_RREADY : STD_LOGIC;
    signal grp_recvFrame_logic_1_fu_428_m_axi_can_addr_BREADY : STD_LOGIC;
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWVALID : STD_LOGIC;
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WVALID : STD_LOGIC;
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WLAST : STD_LOGIC;
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARVALID : STD_LOGIC;
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_RREADY : STD_LOGIC;
    signal grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_BREADY : STD_LOGIC;
    signal grp_recvFrame_logic_1_fu_428_can_0_received : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_recvFrame_logic_1_fu_428_can_0_received_ap_vld : STD_LOGIC;
    signal grp_recvFrame_logic_1_fu_428_can_1_received : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_recvFrame_logic_1_fu_428_can_1_received_ap_vld : STD_LOGIC;
    signal grp_recvFrame_logic_1_fu_428_can_2_received : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_recvFrame_logic_1_fu_428_can_2_received_ap_vld : STD_LOGIC;
    signal grp_recvFrame_logic_1_fu_428_can_3_received : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_recvFrame_logic_1_fu_428_can_3_received_ap_vld : STD_LOGIC;
    signal grp_recvFrame_logic_1_fu_428_can_dropped : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_recvFrame_logic_1_fu_428_can_dropped_ap_vld : STD_LOGIC;
    signal grp_recvFrame_logic_1_fu_428_received_can : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_recvFrame_logic_1_fu_428_received_can_ap_vld : STD_LOGIC;
    signal can_addr_AWVALID : STD_LOGIC;
    signal can_addr_AWREADY : STD_LOGIC;
    signal can_addr_WVALID : STD_LOGIC;
    signal can_addr_WREADY : STD_LOGIC;
    signal can_addr_ARVALID : STD_LOGIC;
    signal can_addr_ARREADY : STD_LOGIC;
    signal can_addr_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal can_addr_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal can_addr_RVALID : STD_LOGIC;
    signal can_addr_RREADY : STD_LOGIC;
    signal can_addr_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal can_addr_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal can_addr_BVALID : STD_LOGIC;
    signal can_addr_BREADY : STD_LOGIC;
    signal lin_addr_AWVALID : STD_LOGIC;
    signal lin_addr_AWREADY : STD_LOGIC;
    signal lin_addr_WVALID : STD_LOGIC;
    signal lin_addr_WREADY : STD_LOGIC;
    signal lin_addr_ARVALID : STD_LOGIC;
    signal lin_addr_ARREADY : STD_LOGIC;
    signal lin_addr_RVALID : STD_LOGIC;
    signal lin_addr_RREADY : STD_LOGIC;
    signal lin_addr_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal lin_addr_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal lin_addr_BVALID : STD_LOGIC;
    signal lin_addr_BREADY : STD_LOGIC;
    signal ps_ddr_AWVALID : STD_LOGIC;
    signal ps_ddr_AWREADY : STD_LOGIC;
    signal ps_ddr_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal ps_ddr_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal ps_ddr_WVALID : STD_LOGIC;
    signal ps_ddr_WREADY : STD_LOGIC;
    signal ps_ddr_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal ps_ddr_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal ps_ddr_ARVALID : STD_LOGIC;
    signal ps_ddr_ARREADY : STD_LOGIC;
    signal ps_ddr_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal ps_ddr_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal ps_ddr_RVALID : STD_LOGIC;
    signal ps_ddr_RREADY : STD_LOGIC;
    signal ps_ddr_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal ps_ddr_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal ps_ddr_BVALID : STD_LOGIC;
    signal ps_ddr_BREADY : STD_LOGIC;
    signal grp_single_lin_process_1_fu_362_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_on_subcall_done : BOOLEAN;
    signal grp_recvFrame_logic_1_fu_428_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_predicate_op192_call_state14 : BOOLEAN;
    signal ap_block_state14_on_subcall_done : BOOLEAN;
    signal sext_ln304_fu_644_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lin_nr_fu_300 : STD_LOGIC_VECTOR (3 downto 0);
    signal jj_fu_304 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln323_fu_511_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln323_fu_515_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln323_fu_521_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln4_fu_532_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln325_fu_540_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln301_fu_575_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln301_fu_579_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln301_fu_585_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_fu_596_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln303_fu_604_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln304_fu_613_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln304_fu_619_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln304_fu_623_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln_fu_708_p5 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln306_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal readIndex_fu_724_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_fu_735_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln306_1_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal readIndex_1_fu_742_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln305_fu_731_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_block_state15 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component clu_single_lin_process_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_lin_addr_AWVALID : OUT STD_LOGIC;
        m_axi_lin_addr_AWREADY : IN STD_LOGIC;
        m_axi_lin_addr_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_lin_addr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lin_addr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_lin_addr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_lin_addr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_lin_addr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_lin_addr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_lin_addr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_lin_addr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_lin_addr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_lin_addr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lin_addr_WVALID : OUT STD_LOGIC;
        m_axi_lin_addr_WREADY : IN STD_LOGIC;
        m_axi_lin_addr_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_lin_addr_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_lin_addr_WLAST : OUT STD_LOGIC;
        m_axi_lin_addr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lin_addr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lin_addr_ARVALID : OUT STD_LOGIC;
        m_axi_lin_addr_ARREADY : IN STD_LOGIC;
        m_axi_lin_addr_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_lin_addr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lin_addr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_lin_addr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_lin_addr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_lin_addr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_lin_addr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_lin_addr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_lin_addr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_lin_addr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_lin_addr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lin_addr_RVALID : IN STD_LOGIC;
        m_axi_lin_addr_RREADY : OUT STD_LOGIC;
        m_axi_lin_addr_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_lin_addr_RLAST : IN STD_LOGIC;
        m_axi_lin_addr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lin_addr_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_lin_addr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lin_addr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_lin_addr_BVALID : IN STD_LOGIC;
        m_axi_lin_addr_BREADY : OUT STD_LOGIC;
        m_axi_lin_addr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_lin_addr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lin_addr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        linbase : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ps_ddr_AWVALID : OUT STD_LOGIC;
        m_axi_ps_ddr_AWREADY : IN STD_LOGIC;
        m_axi_ps_ddr_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ps_ddr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ps_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ps_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ps_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_WVALID : OUT STD_LOGIC;
        m_axi_ps_ddr_WREADY : IN STD_LOGIC;
        m_axi_ps_ddr_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_ps_ddr_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_WLAST : OUT STD_LOGIC;
        m_axi_ps_ddr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_ARVALID : OUT STD_LOGIC;
        m_axi_ps_ddr_ARREADY : IN STD_LOGIC;
        m_axi_ps_ddr_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ps_ddr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ps_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ps_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ps_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_RVALID : IN STD_LOGIC;
        m_axi_ps_ddr_RREADY : OUT STD_LOGIC;
        m_axi_ps_ddr_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_ps_ddr_RLAST : IN STD_LOGIC;
        m_axi_ps_ddr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_ps_ddr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_BVALID : IN STD_LOGIC;
        m_axi_ps_ddr_BREADY : OUT STD_LOGIC;
        m_axi_ps_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        ddr : IN STD_LOGIC_VECTOR (31 downto 0);
        timestamp : IN STD_LOGIC_VECTOR (63 downto 0);
        EN : IN STD_LOGIC_VECTOR (3 downto 0);
        lin_0_received : OUT STD_LOGIC_VECTOR (31 downto 0);
        lin_0_received_ap_vld : OUT STD_LOGIC;
        lin_1_received : OUT STD_LOGIC_VECTOR (31 downto 0);
        lin_1_received_ap_vld : OUT STD_LOGIC;
        lin_2_received : OUT STD_LOGIC_VECTOR (31 downto 0);
        lin_2_received_ap_vld : OUT STD_LOGIC;
        lin_3_received : OUT STD_LOGIC_VECTOR (31 downto 0);
        lin_3_received_ap_vld : OUT STD_LOGIC;
        lin_4_received : OUT STD_LOGIC_VECTOR (31 downto 0);
        lin_4_received_ap_vld : OUT STD_LOGIC;
        lin_5_received : OUT STD_LOGIC_VECTOR (31 downto 0);
        lin_5_received_ap_vld : OUT STD_LOGIC;
        lin_6_received : OUT STD_LOGIC_VECTOR (31 downto 0);
        lin_6_received_ap_vld : OUT STD_LOGIC;
        lin_7_received : OUT STD_LOGIC_VECTOR (31 downto 0);
        lin_7_received_ap_vld : OUT STD_LOGIC;
        lin_8_received : OUT STD_LOGIC_VECTOR (31 downto 0);
        lin_8_received_ap_vld : OUT STD_LOGIC;
        lin_9_received : OUT STD_LOGIC_VECTOR (31 downto 0);
        lin_9_received_ap_vld : OUT STD_LOGIC;
        lin_dropped : OUT STD_LOGIC_VECTOR (31 downto 0);
        lin_dropped_ap_vld : OUT STD_LOGIC;
        received_lin : OUT STD_LOGIC_VECTOR (31 downto 0);
        received_lin_ap_vld : OUT STD_LOGIC );
    end component;


    component clu_recvFrame_logic_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_can_addr_AWVALID : OUT STD_LOGIC;
        m_axi_can_addr_AWREADY : IN STD_LOGIC;
        m_axi_can_addr_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_can_addr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_can_addr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_can_addr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_can_addr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_can_addr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_can_addr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_can_addr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_can_addr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_can_addr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_can_addr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_can_addr_WVALID : OUT STD_LOGIC;
        m_axi_can_addr_WREADY : IN STD_LOGIC;
        m_axi_can_addr_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_can_addr_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_can_addr_WLAST : OUT STD_LOGIC;
        m_axi_can_addr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_can_addr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_can_addr_ARVALID : OUT STD_LOGIC;
        m_axi_can_addr_ARREADY : IN STD_LOGIC;
        m_axi_can_addr_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_can_addr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_can_addr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_can_addr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_can_addr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_can_addr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_can_addr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_can_addr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_can_addr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_can_addr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_can_addr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_can_addr_RVALID : IN STD_LOGIC;
        m_axi_can_addr_RREADY : OUT STD_LOGIC;
        m_axi_can_addr_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_can_addr_RLAST : IN STD_LOGIC;
        m_axi_can_addr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_can_addr_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_can_addr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_can_addr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_can_addr_BVALID : IN STD_LOGIC;
        m_axi_can_addr_BREADY : OUT STD_LOGIC;
        m_axi_can_addr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_can_addr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_can_addr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        canbase : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ps_ddr_AWVALID : OUT STD_LOGIC;
        m_axi_ps_ddr_AWREADY : IN STD_LOGIC;
        m_axi_ps_ddr_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ps_ddr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ps_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ps_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ps_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_WVALID : OUT STD_LOGIC;
        m_axi_ps_ddr_WREADY : IN STD_LOGIC;
        m_axi_ps_ddr_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_ps_ddr_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_WLAST : OUT STD_LOGIC;
        m_axi_ps_ddr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_ARVALID : OUT STD_LOGIC;
        m_axi_ps_ddr_ARREADY : IN STD_LOGIC;
        m_axi_ps_ddr_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ps_ddr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ps_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ps_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ps_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_RVALID : IN STD_LOGIC;
        m_axi_ps_ddr_RREADY : OUT STD_LOGIC;
        m_axi_ps_ddr_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_ps_ddr_RLAST : IN STD_LOGIC;
        m_axi_ps_ddr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_ps_ddr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_BVALID : IN STD_LOGIC;
        m_axi_ps_ddr_BREADY : OUT STD_LOGIC;
        m_axi_ps_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        ddr : IN STD_LOGIC_VECTOR (31 downto 0);
        readIndex : IN STD_LOGIC_VECTOR (7 downto 0);
        EN : IN STD_LOGIC_VECTOR (3 downto 0);
        timestamp : IN STD_LOGIC_VECTOR (63 downto 0);
        can_0_received : OUT STD_LOGIC_VECTOR (31 downto 0);
        can_0_received_ap_vld : OUT STD_LOGIC;
        can_1_received : OUT STD_LOGIC_VECTOR (31 downto 0);
        can_1_received_ap_vld : OUT STD_LOGIC;
        can_2_received : OUT STD_LOGIC_VECTOR (31 downto 0);
        can_2_received_ap_vld : OUT STD_LOGIC;
        can_3_received : OUT STD_LOGIC_VECTOR (31 downto 0);
        can_3_received_ap_vld : OUT STD_LOGIC;
        can_dropped : OUT STD_LOGIC_VECTOR (31 downto 0);
        can_dropped_ap_vld : OUT STD_LOGIC;
        received_can : OUT STD_LOGIC_VECTOR (31 downto 0);
        received_can_ap_vld : OUT STD_LOGIC );
    end component;


    component clu_EN_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        can_ptr : OUT STD_LOGIC_VECTOR (31 downto 0);
        uart_ptr : OUT STD_LOGIC_VECTOR (31 downto 0);
        lin_ptr : OUT STD_LOGIC_VECTOR (31 downto 0);
        received_can : IN STD_LOGIC_VECTOR (31 downto 0);
        received_can_ap_vld : IN STD_LOGIC;
        received_uart : OUT STD_LOGIC_VECTOR (31 downto 0);
        received_lin : IN STD_LOGIC_VECTOR (31 downto 0);
        received_lin_ap_vld : IN STD_LOGIC;
        can_en : OUT STD_LOGIC_VECTOR (31 downto 0);
        uart_en : OUT STD_LOGIC_VECTOR (7 downto 0);
        lin_en : OUT STD_LOGIC_VECTOR (31 downto 0);
        can_ddr : OUT STD_LOGIC_VECTOR (31 downto 0);
        uart_ddr : OUT STD_LOGIC_VECTOR (31 downto 0);
        lin_ddr : OUT STD_LOGIC_VECTOR (31 downto 0);
        can_0_received : IN STD_LOGIC_VECTOR (31 downto 0);
        can_0_received_ap_vld : IN STD_LOGIC;
        can_1_received : IN STD_LOGIC_VECTOR (31 downto 0);
        can_1_received_ap_vld : IN STD_LOGIC;
        can_2_received : IN STD_LOGIC_VECTOR (31 downto 0);
        can_2_received_ap_vld : IN STD_LOGIC;
        can_3_received : IN STD_LOGIC_VECTOR (31 downto 0);
        can_3_received_ap_vld : IN STD_LOGIC;
        can_dropped : IN STD_LOGIC_VECTOR (31 downto 0);
        can_dropped_ap_vld : IN STD_LOGIC;
        lin_0_received : IN STD_LOGIC_VECTOR (31 downto 0);
        lin_0_received_ap_vld : IN STD_LOGIC;
        lin_1_received : IN STD_LOGIC_VECTOR (31 downto 0);
        lin_1_received_ap_vld : IN STD_LOGIC;
        lin_2_received : IN STD_LOGIC_VECTOR (31 downto 0);
        lin_2_received_ap_vld : IN STD_LOGIC;
        lin_3_received : IN STD_LOGIC_VECTOR (31 downto 0);
        lin_3_received_ap_vld : IN STD_LOGIC;
        lin_4_received : IN STD_LOGIC_VECTOR (31 downto 0);
        lin_4_received_ap_vld : IN STD_LOGIC;
        lin_5_received : IN STD_LOGIC_VECTOR (31 downto 0);
        lin_5_received_ap_vld : IN STD_LOGIC;
        lin_6_received : IN STD_LOGIC_VECTOR (31 downto 0);
        lin_6_received_ap_vld : IN STD_LOGIC;
        lin_7_received : IN STD_LOGIC_VECTOR (31 downto 0);
        lin_7_received_ap_vld : IN STD_LOGIC;
        lin_8_received : IN STD_LOGIC_VECTOR (31 downto 0);
        lin_8_received_ap_vld : IN STD_LOGIC;
        lin_9_received : IN STD_LOGIC_VECTOR (31 downto 0);
        lin_9_received_ap_vld : IN STD_LOGIC;
        lin_dropped : IN STD_LOGIC_VECTOR (31 downto 0);
        lin_dropped_ap_vld : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component clu_can_addr_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component clu_lin_addr_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component clu_ps_ddr_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    grp_single_lin_process_1_fu_362 : component clu_single_lin_process_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_single_lin_process_1_fu_362_ap_start,
        ap_done => grp_single_lin_process_1_fu_362_ap_done,
        ap_idle => grp_single_lin_process_1_fu_362_ap_idle,
        ap_ready => grp_single_lin_process_1_fu_362_ap_ready,
        m_axi_lin_addr_AWVALID => grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWVALID,
        m_axi_lin_addr_AWREADY => lin_addr_AWREADY,
        m_axi_lin_addr_AWADDR => grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWADDR,
        m_axi_lin_addr_AWID => grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWID,
        m_axi_lin_addr_AWLEN => grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWLEN,
        m_axi_lin_addr_AWSIZE => grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWSIZE,
        m_axi_lin_addr_AWBURST => grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWBURST,
        m_axi_lin_addr_AWLOCK => grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWLOCK,
        m_axi_lin_addr_AWCACHE => grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWCACHE,
        m_axi_lin_addr_AWPROT => grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWPROT,
        m_axi_lin_addr_AWQOS => grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWQOS,
        m_axi_lin_addr_AWREGION => grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWREGION,
        m_axi_lin_addr_AWUSER => grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWUSER,
        m_axi_lin_addr_WVALID => grp_single_lin_process_1_fu_362_m_axi_lin_addr_WVALID,
        m_axi_lin_addr_WREADY => lin_addr_WREADY,
        m_axi_lin_addr_WDATA => grp_single_lin_process_1_fu_362_m_axi_lin_addr_WDATA,
        m_axi_lin_addr_WSTRB => grp_single_lin_process_1_fu_362_m_axi_lin_addr_WSTRB,
        m_axi_lin_addr_WLAST => grp_single_lin_process_1_fu_362_m_axi_lin_addr_WLAST,
        m_axi_lin_addr_WID => grp_single_lin_process_1_fu_362_m_axi_lin_addr_WID,
        m_axi_lin_addr_WUSER => grp_single_lin_process_1_fu_362_m_axi_lin_addr_WUSER,
        m_axi_lin_addr_ARVALID => grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARVALID,
        m_axi_lin_addr_ARREADY => lin_addr_ARREADY,
        m_axi_lin_addr_ARADDR => grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARADDR,
        m_axi_lin_addr_ARID => grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARID,
        m_axi_lin_addr_ARLEN => grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARLEN,
        m_axi_lin_addr_ARSIZE => grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARSIZE,
        m_axi_lin_addr_ARBURST => grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARBURST,
        m_axi_lin_addr_ARLOCK => grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARLOCK,
        m_axi_lin_addr_ARCACHE => grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARCACHE,
        m_axi_lin_addr_ARPROT => grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARPROT,
        m_axi_lin_addr_ARQOS => grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARQOS,
        m_axi_lin_addr_ARREGION => grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARREGION,
        m_axi_lin_addr_ARUSER => grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARUSER,
        m_axi_lin_addr_RVALID => lin_addr_RVALID,
        m_axi_lin_addr_RREADY => grp_single_lin_process_1_fu_362_m_axi_lin_addr_RREADY,
        m_axi_lin_addr_RDATA => lin_addr_RDATA,
        m_axi_lin_addr_RLAST => ap_const_logic_0,
        m_axi_lin_addr_RID => ap_const_lv1_0,
        m_axi_lin_addr_RFIFONUM => lin_addr_RFIFONUM,
        m_axi_lin_addr_RUSER => ap_const_lv1_0,
        m_axi_lin_addr_RRESP => ap_const_lv2_0,
        m_axi_lin_addr_BVALID => lin_addr_BVALID,
        m_axi_lin_addr_BREADY => grp_single_lin_process_1_fu_362_m_axi_lin_addr_BREADY,
        m_axi_lin_addr_BRESP => ap_const_lv2_0,
        m_axi_lin_addr_BID => ap_const_lv1_0,
        m_axi_lin_addr_BUSER => ap_const_lv1_0,
        linbase => linbase_mod_reg_832,
        m_axi_ps_ddr_AWVALID => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWVALID,
        m_axi_ps_ddr_AWREADY => ps_ddr_AWREADY,
        m_axi_ps_ddr_AWADDR => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWADDR,
        m_axi_ps_ddr_AWID => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWID,
        m_axi_ps_ddr_AWLEN => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWLEN,
        m_axi_ps_ddr_AWSIZE => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWSIZE,
        m_axi_ps_ddr_AWBURST => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWBURST,
        m_axi_ps_ddr_AWLOCK => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWLOCK,
        m_axi_ps_ddr_AWCACHE => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWCACHE,
        m_axi_ps_ddr_AWPROT => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWPROT,
        m_axi_ps_ddr_AWQOS => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWQOS,
        m_axi_ps_ddr_AWREGION => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWREGION,
        m_axi_ps_ddr_AWUSER => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWUSER,
        m_axi_ps_ddr_WVALID => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WVALID,
        m_axi_ps_ddr_WREADY => ps_ddr_WREADY,
        m_axi_ps_ddr_WDATA => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WDATA,
        m_axi_ps_ddr_WSTRB => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WSTRB,
        m_axi_ps_ddr_WLAST => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WLAST,
        m_axi_ps_ddr_WID => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WID,
        m_axi_ps_ddr_WUSER => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WUSER,
        m_axi_ps_ddr_ARVALID => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARVALID,
        m_axi_ps_ddr_ARREADY => ps_ddr_ARREADY,
        m_axi_ps_ddr_ARADDR => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARADDR,
        m_axi_ps_ddr_ARID => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARID,
        m_axi_ps_ddr_ARLEN => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARLEN,
        m_axi_ps_ddr_ARSIZE => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARSIZE,
        m_axi_ps_ddr_ARBURST => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARBURST,
        m_axi_ps_ddr_ARLOCK => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARLOCK,
        m_axi_ps_ddr_ARCACHE => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARCACHE,
        m_axi_ps_ddr_ARPROT => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARPROT,
        m_axi_ps_ddr_ARQOS => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARQOS,
        m_axi_ps_ddr_ARREGION => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARREGION,
        m_axi_ps_ddr_ARUSER => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARUSER,
        m_axi_ps_ddr_RVALID => ps_ddr_RVALID,
        m_axi_ps_ddr_RREADY => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_RREADY,
        m_axi_ps_ddr_RDATA => ps_ddr_RDATA,
        m_axi_ps_ddr_RLAST => ap_const_logic_0,
        m_axi_ps_ddr_RID => ap_const_lv1_0,
        m_axi_ps_ddr_RFIFONUM => ps_ddr_RFIFONUM,
        m_axi_ps_ddr_RUSER => ap_const_lv1_0,
        m_axi_ps_ddr_RRESP => ap_const_lv2_0,
        m_axi_ps_ddr_BVALID => ps_ddr_BVALID,
        m_axi_ps_ddr_BREADY => grp_single_lin_process_1_fu_362_m_axi_ps_ddr_BREADY,
        m_axi_ps_ddr_BRESP => ap_const_lv2_0,
        m_axi_ps_ddr_BID => ap_const_lv1_0,
        m_axi_ps_ddr_BUSER => ap_const_lv1_0,
        ddr => lin_ddr_read_reg_769,
        timestamp => timestamp,
        EN => lin_nr_fu_300,
        lin_0_received => grp_single_lin_process_1_fu_362_lin_0_received,
        lin_0_received_ap_vld => grp_single_lin_process_1_fu_362_lin_0_received_ap_vld,
        lin_1_received => grp_single_lin_process_1_fu_362_lin_1_received,
        lin_1_received_ap_vld => grp_single_lin_process_1_fu_362_lin_1_received_ap_vld,
        lin_2_received => grp_single_lin_process_1_fu_362_lin_2_received,
        lin_2_received_ap_vld => grp_single_lin_process_1_fu_362_lin_2_received_ap_vld,
        lin_3_received => grp_single_lin_process_1_fu_362_lin_3_received,
        lin_3_received_ap_vld => grp_single_lin_process_1_fu_362_lin_3_received_ap_vld,
        lin_4_received => grp_single_lin_process_1_fu_362_lin_4_received,
        lin_4_received_ap_vld => grp_single_lin_process_1_fu_362_lin_4_received_ap_vld,
        lin_5_received => grp_single_lin_process_1_fu_362_lin_5_received,
        lin_5_received_ap_vld => grp_single_lin_process_1_fu_362_lin_5_received_ap_vld,
        lin_6_received => grp_single_lin_process_1_fu_362_lin_6_received,
        lin_6_received_ap_vld => grp_single_lin_process_1_fu_362_lin_6_received_ap_vld,
        lin_7_received => grp_single_lin_process_1_fu_362_lin_7_received,
        lin_7_received_ap_vld => grp_single_lin_process_1_fu_362_lin_7_received_ap_vld,
        lin_8_received => grp_single_lin_process_1_fu_362_lin_8_received,
        lin_8_received_ap_vld => grp_single_lin_process_1_fu_362_lin_8_received_ap_vld,
        lin_9_received => grp_single_lin_process_1_fu_362_lin_9_received,
        lin_9_received_ap_vld => grp_single_lin_process_1_fu_362_lin_9_received_ap_vld,
        lin_dropped => grp_single_lin_process_1_fu_362_lin_dropped,
        lin_dropped_ap_vld => grp_single_lin_process_1_fu_362_lin_dropped_ap_vld,
        received_lin => grp_single_lin_process_1_fu_362_received_lin,
        received_lin_ap_vld => grp_single_lin_process_1_fu_362_received_lin_ap_vld);

    grp_recvFrame_logic_1_fu_428 : component clu_recvFrame_logic_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_recvFrame_logic_1_fu_428_ap_start,
        ap_done => grp_recvFrame_logic_1_fu_428_ap_done,
        ap_idle => grp_recvFrame_logic_1_fu_428_ap_idle,
        ap_ready => grp_recvFrame_logic_1_fu_428_ap_ready,
        m_axi_can_addr_AWVALID => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWVALID,
        m_axi_can_addr_AWREADY => can_addr_AWREADY,
        m_axi_can_addr_AWADDR => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWADDR,
        m_axi_can_addr_AWID => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWID,
        m_axi_can_addr_AWLEN => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWLEN,
        m_axi_can_addr_AWSIZE => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWSIZE,
        m_axi_can_addr_AWBURST => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWBURST,
        m_axi_can_addr_AWLOCK => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWLOCK,
        m_axi_can_addr_AWCACHE => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWCACHE,
        m_axi_can_addr_AWPROT => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWPROT,
        m_axi_can_addr_AWQOS => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWQOS,
        m_axi_can_addr_AWREGION => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWREGION,
        m_axi_can_addr_AWUSER => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWUSER,
        m_axi_can_addr_WVALID => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_WVALID,
        m_axi_can_addr_WREADY => can_addr_WREADY,
        m_axi_can_addr_WDATA => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_WDATA,
        m_axi_can_addr_WSTRB => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_WSTRB,
        m_axi_can_addr_WLAST => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_WLAST,
        m_axi_can_addr_WID => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_WID,
        m_axi_can_addr_WUSER => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_WUSER,
        m_axi_can_addr_ARVALID => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARVALID,
        m_axi_can_addr_ARREADY => can_addr_ARREADY,
        m_axi_can_addr_ARADDR => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARADDR,
        m_axi_can_addr_ARID => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARID,
        m_axi_can_addr_ARLEN => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARLEN,
        m_axi_can_addr_ARSIZE => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARSIZE,
        m_axi_can_addr_ARBURST => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARBURST,
        m_axi_can_addr_ARLOCK => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARLOCK,
        m_axi_can_addr_ARCACHE => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARCACHE,
        m_axi_can_addr_ARPROT => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARPROT,
        m_axi_can_addr_ARQOS => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARQOS,
        m_axi_can_addr_ARREGION => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARREGION,
        m_axi_can_addr_ARUSER => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARUSER,
        m_axi_can_addr_RVALID => can_addr_RVALID,
        m_axi_can_addr_RREADY => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_RREADY,
        m_axi_can_addr_RDATA => can_addr_RDATA,
        m_axi_can_addr_RLAST => ap_const_logic_0,
        m_axi_can_addr_RID => ap_const_lv1_0,
        m_axi_can_addr_RFIFONUM => can_addr_RFIFONUM,
        m_axi_can_addr_RUSER => ap_const_lv1_0,
        m_axi_can_addr_RRESP => ap_const_lv2_0,
        m_axi_can_addr_BVALID => can_addr_BVALID,
        m_axi_can_addr_BREADY => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_BREADY,
        m_axi_can_addr_BRESP => ap_const_lv2_0,
        m_axi_can_addr_BID => ap_const_lv1_0,
        m_axi_can_addr_BUSER => ap_const_lv1_0,
        canbase => canaddr_mod_reg_852,
        m_axi_ps_ddr_AWVALID => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWVALID,
        m_axi_ps_ddr_AWREADY => ps_ddr_AWREADY,
        m_axi_ps_ddr_AWADDR => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWADDR,
        m_axi_ps_ddr_AWID => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWID,
        m_axi_ps_ddr_AWLEN => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWLEN,
        m_axi_ps_ddr_AWSIZE => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWSIZE,
        m_axi_ps_ddr_AWBURST => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWBURST,
        m_axi_ps_ddr_AWLOCK => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWLOCK,
        m_axi_ps_ddr_AWCACHE => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWCACHE,
        m_axi_ps_ddr_AWPROT => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWPROT,
        m_axi_ps_ddr_AWQOS => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWQOS,
        m_axi_ps_ddr_AWREGION => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWREGION,
        m_axi_ps_ddr_AWUSER => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWUSER,
        m_axi_ps_ddr_WVALID => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WVALID,
        m_axi_ps_ddr_WREADY => ps_ddr_WREADY,
        m_axi_ps_ddr_WDATA => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WDATA,
        m_axi_ps_ddr_WSTRB => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WSTRB,
        m_axi_ps_ddr_WLAST => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WLAST,
        m_axi_ps_ddr_WID => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WID,
        m_axi_ps_ddr_WUSER => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WUSER,
        m_axi_ps_ddr_ARVALID => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARVALID,
        m_axi_ps_ddr_ARREADY => ps_ddr_ARREADY,
        m_axi_ps_ddr_ARADDR => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARADDR,
        m_axi_ps_ddr_ARID => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARID,
        m_axi_ps_ddr_ARLEN => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARLEN,
        m_axi_ps_ddr_ARSIZE => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARSIZE,
        m_axi_ps_ddr_ARBURST => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARBURST,
        m_axi_ps_ddr_ARLOCK => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARLOCK,
        m_axi_ps_ddr_ARCACHE => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARCACHE,
        m_axi_ps_ddr_ARPROT => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARPROT,
        m_axi_ps_ddr_ARQOS => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARQOS,
        m_axi_ps_ddr_ARREGION => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARREGION,
        m_axi_ps_ddr_ARUSER => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARUSER,
        m_axi_ps_ddr_RVALID => ps_ddr_RVALID,
        m_axi_ps_ddr_RREADY => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_RREADY,
        m_axi_ps_ddr_RDATA => ps_ddr_RDATA,
        m_axi_ps_ddr_RLAST => ap_const_logic_0,
        m_axi_ps_ddr_RID => ap_const_lv1_0,
        m_axi_ps_ddr_RFIFONUM => ps_ddr_RFIFONUM,
        m_axi_ps_ddr_RUSER => ap_const_lv1_0,
        m_axi_ps_ddr_RRESP => ap_const_lv2_0,
        m_axi_ps_ddr_BVALID => ps_ddr_BVALID,
        m_axi_ps_ddr_BREADY => grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_BREADY,
        m_axi_ps_ddr_BRESP => ap_const_lv2_0,
        m_axi_ps_ddr_BID => ap_const_lv1_0,
        m_axi_ps_ddr_BUSER => ap_const_lv1_0,
        ddr => can_ddr_read_reg_774,
        readIndex => readIndex_2_reg_902,
        EN => jj_fu_304,
        timestamp => timestamp,
        can_0_received => grp_recvFrame_logic_1_fu_428_can_0_received,
        can_0_received_ap_vld => grp_recvFrame_logic_1_fu_428_can_0_received_ap_vld,
        can_1_received => grp_recvFrame_logic_1_fu_428_can_1_received,
        can_1_received_ap_vld => grp_recvFrame_logic_1_fu_428_can_1_received_ap_vld,
        can_2_received => grp_recvFrame_logic_1_fu_428_can_2_received,
        can_2_received_ap_vld => grp_recvFrame_logic_1_fu_428_can_2_received_ap_vld,
        can_3_received => grp_recvFrame_logic_1_fu_428_can_3_received,
        can_3_received_ap_vld => grp_recvFrame_logic_1_fu_428_can_3_received_ap_vld,
        can_dropped => grp_recvFrame_logic_1_fu_428_can_dropped,
        can_dropped_ap_vld => grp_recvFrame_logic_1_fu_428_can_dropped_ap_vld,
        received_can => grp_recvFrame_logic_1_fu_428_received_can,
        received_can_ap_vld => grp_recvFrame_logic_1_fu_428_received_can_ap_vld);

    EN_s_axi_U : component clu_EN_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_EN_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_EN_DATA_WIDTH)
    port map (
        AWVALID => s_axi_EN_AWVALID,
        AWREADY => s_axi_EN_AWREADY,
        AWADDR => s_axi_EN_AWADDR,
        WVALID => s_axi_EN_WVALID,
        WREADY => s_axi_EN_WREADY,
        WDATA => s_axi_EN_WDATA,
        WSTRB => s_axi_EN_WSTRB,
        ARVALID => s_axi_EN_ARVALID,
        ARREADY => s_axi_EN_ARREADY,
        ARADDR => s_axi_EN_ARADDR,
        RVALID => s_axi_EN_RVALID,
        RREADY => s_axi_EN_RREADY,
        RDATA => s_axi_EN_RDATA,
        RRESP => s_axi_EN_RRESP,
        BVALID => s_axi_EN_BVALID,
        BREADY => s_axi_EN_BREADY,
        BRESP => s_axi_EN_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        can_ptr => can_ptr,
        uart_ptr => uart_ptr,
        lin_ptr => lin_ptr,
        received_can => grp_recvFrame_logic_1_fu_428_received_can,
        received_can_ap_vld => grp_recvFrame_logic_1_fu_428_received_can_ap_vld,
        received_uart => received_uart,
        received_lin => grp_single_lin_process_1_fu_362_received_lin,
        received_lin_ap_vld => grp_single_lin_process_1_fu_362_received_lin_ap_vld,
        can_en => can_en,
        uart_en => uart_en,
        lin_en => lin_en,
        can_ddr => can_ddr,
        uart_ddr => uart_ddr,
        lin_ddr => lin_ddr,
        can_0_received => grp_recvFrame_logic_1_fu_428_can_0_received,
        can_0_received_ap_vld => grp_recvFrame_logic_1_fu_428_can_0_received_ap_vld,
        can_1_received => grp_recvFrame_logic_1_fu_428_can_1_received,
        can_1_received_ap_vld => grp_recvFrame_logic_1_fu_428_can_1_received_ap_vld,
        can_2_received => grp_recvFrame_logic_1_fu_428_can_2_received,
        can_2_received_ap_vld => grp_recvFrame_logic_1_fu_428_can_2_received_ap_vld,
        can_3_received => grp_recvFrame_logic_1_fu_428_can_3_received,
        can_3_received_ap_vld => grp_recvFrame_logic_1_fu_428_can_3_received_ap_vld,
        can_dropped => grp_recvFrame_logic_1_fu_428_can_dropped,
        can_dropped_ap_vld => grp_recvFrame_logic_1_fu_428_can_dropped_ap_vld,
        lin_0_received => lin_0_received_1_data_reg,
        lin_0_received_ap_vld => lin_0_received_1_vld_reg,
        lin_1_received => lin_1_received_1_data_reg,
        lin_1_received_ap_vld => lin_1_received_1_vld_reg,
        lin_2_received => lin_2_received_1_data_reg,
        lin_2_received_ap_vld => lin_2_received_1_vld_reg,
        lin_3_received => lin_3_received_1_data_reg,
        lin_3_received_ap_vld => lin_3_received_1_vld_reg,
        lin_4_received => lin_4_received_1_data_reg,
        lin_4_received_ap_vld => lin_4_received_1_vld_reg,
        lin_5_received => lin_5_received_1_data_reg,
        lin_5_received_ap_vld => lin_5_received_1_vld_reg,
        lin_6_received => lin_6_received_1_data_reg,
        lin_6_received_ap_vld => lin_6_received_1_vld_reg,
        lin_7_received => lin_7_received_1_data_reg,
        lin_7_received_ap_vld => lin_7_received_1_vld_reg,
        lin_8_received => lin_8_received_1_data_reg,
        lin_8_received_ap_vld => lin_8_received_1_vld_reg,
        lin_9_received => lin_9_received_1_data_reg,
        lin_9_received_ap_vld => lin_9_received_1_vld_reg,
        lin_dropped => lin_dropped_1_data_reg,
        lin_dropped_ap_vld => lin_dropped_1_vld_reg,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    can_addr_m_axi_U : component clu_can_addr_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_CAN_ADDR_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_CAN_ADDR_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_CAN_ADDR_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_CAN_ADDR_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_CAN_ADDR_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_CAN_ADDR_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_CAN_ADDR_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_CAN_ADDR_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_CAN_ADDR_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_CAN_ADDR_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_CAN_ADDR_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 32,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_can_addr_AWVALID,
        AWREADY => m_axi_can_addr_AWREADY,
        AWADDR => m_axi_can_addr_AWADDR,
        AWID => m_axi_can_addr_AWID,
        AWLEN => m_axi_can_addr_AWLEN,
        AWSIZE => m_axi_can_addr_AWSIZE,
        AWBURST => m_axi_can_addr_AWBURST,
        AWLOCK => m_axi_can_addr_AWLOCK,
        AWCACHE => m_axi_can_addr_AWCACHE,
        AWPROT => m_axi_can_addr_AWPROT,
        AWQOS => m_axi_can_addr_AWQOS,
        AWREGION => m_axi_can_addr_AWREGION,
        AWUSER => m_axi_can_addr_AWUSER,
        WVALID => m_axi_can_addr_WVALID,
        WREADY => m_axi_can_addr_WREADY,
        WDATA => m_axi_can_addr_WDATA,
        WSTRB => m_axi_can_addr_WSTRB,
        WLAST => m_axi_can_addr_WLAST,
        WID => m_axi_can_addr_WID,
        WUSER => m_axi_can_addr_WUSER,
        ARVALID => m_axi_can_addr_ARVALID,
        ARREADY => m_axi_can_addr_ARREADY,
        ARADDR => m_axi_can_addr_ARADDR,
        ARID => m_axi_can_addr_ARID,
        ARLEN => m_axi_can_addr_ARLEN,
        ARSIZE => m_axi_can_addr_ARSIZE,
        ARBURST => m_axi_can_addr_ARBURST,
        ARLOCK => m_axi_can_addr_ARLOCK,
        ARCACHE => m_axi_can_addr_ARCACHE,
        ARPROT => m_axi_can_addr_ARPROT,
        ARQOS => m_axi_can_addr_ARQOS,
        ARREGION => m_axi_can_addr_ARREGION,
        ARUSER => m_axi_can_addr_ARUSER,
        RVALID => m_axi_can_addr_RVALID,
        RREADY => m_axi_can_addr_RREADY,
        RDATA => m_axi_can_addr_RDATA,
        RLAST => m_axi_can_addr_RLAST,
        RID => m_axi_can_addr_RID,
        RUSER => m_axi_can_addr_RUSER,
        RRESP => m_axi_can_addr_RRESP,
        BVALID => m_axi_can_addr_BVALID,
        BREADY => m_axi_can_addr_BREADY,
        BRESP => m_axi_can_addr_BRESP,
        BID => m_axi_can_addr_BID,
        BUSER => m_axi_can_addr_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => can_addr_ARVALID,
        I_ARREADY => can_addr_ARREADY,
        I_ARADDR => can_addr_ARADDR,
        I_ARLEN => can_addr_ARLEN,
        I_RVALID => can_addr_RVALID,
        I_RREADY => can_addr_RREADY,
        I_RDATA => can_addr_RDATA,
        I_RFIFONUM => can_addr_RFIFONUM,
        I_AWVALID => can_addr_AWVALID,
        I_AWREADY => can_addr_AWREADY,
        I_AWADDR => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWADDR,
        I_AWLEN => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWLEN,
        I_WVALID => can_addr_WVALID,
        I_WREADY => can_addr_WREADY,
        I_WDATA => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_WDATA,
        I_WSTRB => grp_recvFrame_logic_1_fu_428_m_axi_can_addr_WSTRB,
        I_BVALID => can_addr_BVALID,
        I_BREADY => can_addr_BREADY);

    lin_addr_m_axi_U : component clu_lin_addr_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_LIN_ADDR_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_LIN_ADDR_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_LIN_ADDR_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_LIN_ADDR_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_LIN_ADDR_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_LIN_ADDR_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_LIN_ADDR_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_LIN_ADDR_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_LIN_ADDR_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_LIN_ADDR_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_LIN_ADDR_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 32,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_lin_addr_AWVALID,
        AWREADY => m_axi_lin_addr_AWREADY,
        AWADDR => m_axi_lin_addr_AWADDR,
        AWID => m_axi_lin_addr_AWID,
        AWLEN => m_axi_lin_addr_AWLEN,
        AWSIZE => m_axi_lin_addr_AWSIZE,
        AWBURST => m_axi_lin_addr_AWBURST,
        AWLOCK => m_axi_lin_addr_AWLOCK,
        AWCACHE => m_axi_lin_addr_AWCACHE,
        AWPROT => m_axi_lin_addr_AWPROT,
        AWQOS => m_axi_lin_addr_AWQOS,
        AWREGION => m_axi_lin_addr_AWREGION,
        AWUSER => m_axi_lin_addr_AWUSER,
        WVALID => m_axi_lin_addr_WVALID,
        WREADY => m_axi_lin_addr_WREADY,
        WDATA => m_axi_lin_addr_WDATA,
        WSTRB => m_axi_lin_addr_WSTRB,
        WLAST => m_axi_lin_addr_WLAST,
        WID => m_axi_lin_addr_WID,
        WUSER => m_axi_lin_addr_WUSER,
        ARVALID => m_axi_lin_addr_ARVALID,
        ARREADY => m_axi_lin_addr_ARREADY,
        ARADDR => m_axi_lin_addr_ARADDR,
        ARID => m_axi_lin_addr_ARID,
        ARLEN => m_axi_lin_addr_ARLEN,
        ARSIZE => m_axi_lin_addr_ARSIZE,
        ARBURST => m_axi_lin_addr_ARBURST,
        ARLOCK => m_axi_lin_addr_ARLOCK,
        ARCACHE => m_axi_lin_addr_ARCACHE,
        ARPROT => m_axi_lin_addr_ARPROT,
        ARQOS => m_axi_lin_addr_ARQOS,
        ARREGION => m_axi_lin_addr_ARREGION,
        ARUSER => m_axi_lin_addr_ARUSER,
        RVALID => m_axi_lin_addr_RVALID,
        RREADY => m_axi_lin_addr_RREADY,
        RDATA => m_axi_lin_addr_RDATA,
        RLAST => m_axi_lin_addr_RLAST,
        RID => m_axi_lin_addr_RID,
        RUSER => m_axi_lin_addr_RUSER,
        RRESP => m_axi_lin_addr_RRESP,
        BVALID => m_axi_lin_addr_BVALID,
        BREADY => m_axi_lin_addr_BREADY,
        BRESP => m_axi_lin_addr_BRESP,
        BID => m_axi_lin_addr_BID,
        BUSER => m_axi_lin_addr_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => lin_addr_ARVALID,
        I_ARREADY => lin_addr_ARREADY,
        I_ARADDR => grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARADDR,
        I_ARLEN => grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARLEN,
        I_RVALID => lin_addr_RVALID,
        I_RREADY => lin_addr_RREADY,
        I_RDATA => lin_addr_RDATA,
        I_RFIFONUM => lin_addr_RFIFONUM,
        I_AWVALID => lin_addr_AWVALID,
        I_AWREADY => lin_addr_AWREADY,
        I_AWADDR => grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWADDR,
        I_AWLEN => grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWLEN,
        I_WVALID => lin_addr_WVALID,
        I_WREADY => lin_addr_WREADY,
        I_WDATA => grp_single_lin_process_1_fu_362_m_axi_lin_addr_WDATA,
        I_WSTRB => grp_single_lin_process_1_fu_362_m_axi_lin_addr_WSTRB,
        I_BVALID => lin_addr_BVALID,
        I_BREADY => lin_addr_BREADY);

    ps_ddr_m_axi_U : component clu_ps_ddr_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_PS_DDR_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_PS_DDR_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_PS_DDR_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_PS_DDR_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_PS_DDR_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_PS_DDR_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_PS_DDR_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_PS_DDR_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_PS_DDR_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_PS_DDR_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_PS_DDR_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 11,
        USER_DW => 8,
        USER_AW => 32,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_ps_ddr_AWVALID,
        AWREADY => m_axi_ps_ddr_AWREADY,
        AWADDR => m_axi_ps_ddr_AWADDR,
        AWID => m_axi_ps_ddr_AWID,
        AWLEN => m_axi_ps_ddr_AWLEN,
        AWSIZE => m_axi_ps_ddr_AWSIZE,
        AWBURST => m_axi_ps_ddr_AWBURST,
        AWLOCK => m_axi_ps_ddr_AWLOCK,
        AWCACHE => m_axi_ps_ddr_AWCACHE,
        AWPROT => m_axi_ps_ddr_AWPROT,
        AWQOS => m_axi_ps_ddr_AWQOS,
        AWREGION => m_axi_ps_ddr_AWREGION,
        AWUSER => m_axi_ps_ddr_AWUSER,
        WVALID => m_axi_ps_ddr_WVALID,
        WREADY => m_axi_ps_ddr_WREADY,
        WDATA => m_axi_ps_ddr_WDATA,
        WSTRB => m_axi_ps_ddr_WSTRB,
        WLAST => m_axi_ps_ddr_WLAST,
        WID => m_axi_ps_ddr_WID,
        WUSER => m_axi_ps_ddr_WUSER,
        ARVALID => m_axi_ps_ddr_ARVALID,
        ARREADY => m_axi_ps_ddr_ARREADY,
        ARADDR => m_axi_ps_ddr_ARADDR,
        ARID => m_axi_ps_ddr_ARID,
        ARLEN => m_axi_ps_ddr_ARLEN,
        ARSIZE => m_axi_ps_ddr_ARSIZE,
        ARBURST => m_axi_ps_ddr_ARBURST,
        ARLOCK => m_axi_ps_ddr_ARLOCK,
        ARCACHE => m_axi_ps_ddr_ARCACHE,
        ARPROT => m_axi_ps_ddr_ARPROT,
        ARQOS => m_axi_ps_ddr_ARQOS,
        ARREGION => m_axi_ps_ddr_ARREGION,
        ARUSER => m_axi_ps_ddr_ARUSER,
        RVALID => m_axi_ps_ddr_RVALID,
        RREADY => m_axi_ps_ddr_RREADY,
        RDATA => m_axi_ps_ddr_RDATA,
        RLAST => m_axi_ps_ddr_RLAST,
        RID => m_axi_ps_ddr_RID,
        RUSER => m_axi_ps_ddr_RUSER,
        RRESP => m_axi_ps_ddr_RRESP,
        BVALID => m_axi_ps_ddr_BVALID,
        BREADY => m_axi_ps_ddr_BREADY,
        BRESP => m_axi_ps_ddr_BRESP,
        BID => m_axi_ps_ddr_BID,
        BUSER => m_axi_ps_ddr_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ps_ddr_ARVALID,
        I_ARREADY => ps_ddr_ARREADY,
        I_ARADDR => ps_ddr_ARADDR,
        I_ARLEN => ps_ddr_ARLEN,
        I_RVALID => ps_ddr_RVALID,
        I_RREADY => ps_ddr_RREADY,
        I_RDATA => ps_ddr_RDATA,
        I_RFIFONUM => ps_ddr_RFIFONUM,
        I_AWVALID => ps_ddr_AWVALID,
        I_AWREADY => ps_ddr_AWREADY,
        I_AWADDR => ps_ddr_AWADDR,
        I_AWLEN => ps_ddr_AWLEN,
        I_WVALID => ps_ddr_WVALID,
        I_WREADY => ps_ddr_WREADY,
        I_WDATA => ps_ddr_WDATA,
        I_WSTRB => ps_ddr_WSTRB,
        I_BVALID => ps_ddr_BVALID,
        I_BREADY => ps_ddr_BREADY);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_recvFrame_logic_1_fu_428_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_recvFrame_logic_1_fu_428_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln306_2_fu_718_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    grp_recvFrame_logic_1_fu_428_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_recvFrame_logic_1_fu_428_ap_ready = ap_const_logic_1)) then 
                    grp_recvFrame_logic_1_fu_428_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_single_lin_process_1_fu_362_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_single_lin_process_1_fu_362_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln378_fu_499_p2 = ap_const_lv1_0) and (icmp_ln323_fu_526_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_single_lin_process_1_fu_362_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_single_lin_process_1_fu_362_ap_ready = ap_const_logic_1)) then 
                    grp_single_lin_process_1_fu_362_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    jj_fu_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((mode_nr_load_load_fu_467_p1 = ap_const_lv2_1)) and not((mode_nr_load_load_fu_467_p1 = ap_const_lv2_2)) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                jj_fu_304 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14_on_subcall_done))) then 
                jj_fu_304 <= add_ln337_reg_843;
            end if; 
        end if;
    end process;

    lin_0_received_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lin_0_received_1_vld_in = ap_const_logic_1) and (lin_0_received_1_vld_reg = ap_const_logic_0))) then 
                lin_0_received_1_vld_reg <= ap_const_logic_1;
            elsif (((ap_const_logic_1 = ap_const_logic_1) and (lin_0_received_1_vld_in = ap_const_logic_0) and (lin_0_received_1_vld_reg = ap_const_logic_1))) then 
                lin_0_received_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    lin_1_received_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lin_1_received_1_vld_in = ap_const_logic_1) and (lin_1_received_1_vld_reg = ap_const_logic_0))) then 
                lin_1_received_1_vld_reg <= ap_const_logic_1;
            elsif (((ap_const_logic_1 = ap_const_logic_1) and (lin_1_received_1_vld_in = ap_const_logic_0) and (lin_1_received_1_vld_reg = ap_const_logic_1))) then 
                lin_1_received_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    lin_2_received_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lin_2_received_1_vld_in = ap_const_logic_1) and (lin_2_received_1_vld_reg = ap_const_logic_0))) then 
                lin_2_received_1_vld_reg <= ap_const_logic_1;
            elsif (((ap_const_logic_1 = ap_const_logic_1) and (lin_2_received_1_vld_in = ap_const_logic_0) and (lin_2_received_1_vld_reg = ap_const_logic_1))) then 
                lin_2_received_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    lin_3_received_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lin_3_received_1_vld_in = ap_const_logic_1) and (lin_3_received_1_vld_reg = ap_const_logic_0))) then 
                lin_3_received_1_vld_reg <= ap_const_logic_1;
            elsif (((ap_const_logic_1 = ap_const_logic_1) and (lin_3_received_1_vld_in = ap_const_logic_0) and (lin_3_received_1_vld_reg = ap_const_logic_1))) then 
                lin_3_received_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    lin_4_received_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lin_4_received_1_vld_in = ap_const_logic_1) and (lin_4_received_1_vld_reg = ap_const_logic_0))) then 
                lin_4_received_1_vld_reg <= ap_const_logic_1;
            elsif (((ap_const_logic_1 = ap_const_logic_1) and (lin_4_received_1_vld_in = ap_const_logic_0) and (lin_4_received_1_vld_reg = ap_const_logic_1))) then 
                lin_4_received_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    lin_5_received_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lin_5_received_1_vld_in = ap_const_logic_1) and (lin_5_received_1_vld_reg = ap_const_logic_0))) then 
                lin_5_received_1_vld_reg <= ap_const_logic_1;
            elsif (((ap_const_logic_1 = ap_const_logic_1) and (lin_5_received_1_vld_in = ap_const_logic_0) and (lin_5_received_1_vld_reg = ap_const_logic_1))) then 
                lin_5_received_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    lin_6_received_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lin_6_received_1_vld_in = ap_const_logic_1) and (lin_6_received_1_vld_reg = ap_const_logic_0))) then 
                lin_6_received_1_vld_reg <= ap_const_logic_1;
            elsif (((ap_const_logic_1 = ap_const_logic_1) and (lin_6_received_1_vld_in = ap_const_logic_0) and (lin_6_received_1_vld_reg = ap_const_logic_1))) then 
                lin_6_received_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    lin_7_received_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lin_7_received_1_vld_in = ap_const_logic_1) and (lin_7_received_1_vld_reg = ap_const_logic_0))) then 
                lin_7_received_1_vld_reg <= ap_const_logic_1;
            elsif (((ap_const_logic_1 = ap_const_logic_1) and (lin_7_received_1_vld_in = ap_const_logic_0) and (lin_7_received_1_vld_reg = ap_const_logic_1))) then 
                lin_7_received_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    lin_8_received_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lin_8_received_1_vld_in = ap_const_logic_1) and (lin_8_received_1_vld_reg = ap_const_logic_0))) then 
                lin_8_received_1_vld_reg <= ap_const_logic_1;
            elsif (((ap_const_logic_1 = ap_const_logic_1) and (lin_8_received_1_vld_in = ap_const_logic_0) and (lin_8_received_1_vld_reg = ap_const_logic_1))) then 
                lin_8_received_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    lin_9_received_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lin_9_received_1_vld_in = ap_const_logic_1) and (lin_9_received_1_vld_reg = ap_const_logic_0))) then 
                lin_9_received_1_vld_reg <= ap_const_logic_1;
            elsif (((ap_const_logic_1 = ap_const_logic_1) and (lin_9_received_1_vld_in = ap_const_logic_0) and (lin_9_received_1_vld_reg = ap_const_logic_1))) then 
                lin_9_received_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    lin_dropped_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lin_dropped_1_vld_in = ap_const_logic_1) and (lin_dropped_1_vld_reg = ap_const_logic_0))) then 
                lin_dropped_1_vld_reg <= ap_const_logic_1;
            elsif (((ap_const_logic_1 = ap_const_logic_1) and (lin_dropped_1_vld_in = ap_const_logic_0) and (lin_dropped_1_vld_reg = ap_const_logic_1))) then 
                lin_dropped_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    lin_nr_fu_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((mode_nr_load_load_fu_467_p1 = ap_const_lv2_2) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                lin_nr_fu_300 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_on_subcall_done))) then 
                lin_nr_fu_300 <= lin_nr_2_reg_823;
            end if; 
        end if;
    end process;

    mode_nr_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((mode_nr_load_load_fu_467_p1 = ap_const_lv2_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                mode_nr <= ap_const_lv2_2;
            elsif (((icmp_ln378_fu_499_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                mode_nr <= ap_const_lv2_0;
            elsif (((icmp_ln337_fu_563_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                mode_nr <= ap_const_lv2_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln337_reg_843 <= add_ln337_fu_569_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                can_ddr_read_reg_774 <= can_ddr;
                can_ptr_read_reg_784 <= can_ptr;
                lin_ddr_read_reg_769 <= lin_ddr;
                lin_ptr_read_reg_779 <= lin_ptr;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln337_fu_563_p2 = ap_const_lv1_0) and (icmp_ln301_fu_590_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                canaddr_mod_reg_852 <= canaddr_mod_fu_608_p2;
                trunc_ln_reg_857 <= add_ln304_fu_623_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln337_fu_563_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                icmp_ln301_reg_848 <= icmp_ln301_fu_590_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                icmp_ln306_2_reg_898 <= icmp_ln306_2_fu_718_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln378_fu_499_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln323_reg_828 <= icmp_ln323_fu_526_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (lin_0_received_1_vld_in = ap_const_logic_1) and (lin_0_received_1_vld_reg = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lin_0_received_1_vld_in = ap_const_logic_1) and (lin_0_received_1_vld_reg = ap_const_logic_0)))) then
                lin_0_received_1_data_reg <= grp_single_lin_process_1_fu_362_lin_0_received;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (lin_1_received_1_vld_in = ap_const_logic_1) and (lin_1_received_1_vld_reg = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lin_1_received_1_vld_in = ap_const_logic_1) and (lin_1_received_1_vld_reg = ap_const_logic_0)))) then
                lin_1_received_1_data_reg <= grp_single_lin_process_1_fu_362_lin_1_received;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (lin_2_received_1_vld_in = ap_const_logic_1) and (lin_2_received_1_vld_reg = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lin_2_received_1_vld_in = ap_const_logic_1) and (lin_2_received_1_vld_reg = ap_const_logic_0)))) then
                lin_2_received_1_data_reg <= grp_single_lin_process_1_fu_362_lin_2_received;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (lin_3_received_1_vld_in = ap_const_logic_1) and (lin_3_received_1_vld_reg = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lin_3_received_1_vld_in = ap_const_logic_1) and (lin_3_received_1_vld_reg = ap_const_logic_0)))) then
                lin_3_received_1_data_reg <= grp_single_lin_process_1_fu_362_lin_3_received;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (lin_4_received_1_vld_in = ap_const_logic_1) and (lin_4_received_1_vld_reg = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lin_4_received_1_vld_in = ap_const_logic_1) and (lin_4_received_1_vld_reg = ap_const_logic_0)))) then
                lin_4_received_1_data_reg <= grp_single_lin_process_1_fu_362_lin_4_received;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (lin_5_received_1_vld_in = ap_const_logic_1) and (lin_5_received_1_vld_reg = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lin_5_received_1_vld_in = ap_const_logic_1) and (lin_5_received_1_vld_reg = ap_const_logic_0)))) then
                lin_5_received_1_data_reg <= grp_single_lin_process_1_fu_362_lin_5_received;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (lin_6_received_1_vld_in = ap_const_logic_1) and (lin_6_received_1_vld_reg = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lin_6_received_1_vld_in = ap_const_logic_1) and (lin_6_received_1_vld_reg = ap_const_logic_0)))) then
                lin_6_received_1_data_reg <= grp_single_lin_process_1_fu_362_lin_6_received;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (lin_7_received_1_vld_in = ap_const_logic_1) and (lin_7_received_1_vld_reg = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lin_7_received_1_vld_in = ap_const_logic_1) and (lin_7_received_1_vld_reg = ap_const_logic_0)))) then
                lin_7_received_1_data_reg <= grp_single_lin_process_1_fu_362_lin_7_received;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (lin_8_received_1_vld_in = ap_const_logic_1) and (lin_8_received_1_vld_reg = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lin_8_received_1_vld_in = ap_const_logic_1) and (lin_8_received_1_vld_reg = ap_const_logic_0)))) then
                lin_8_received_1_data_reg <= grp_single_lin_process_1_fu_362_lin_8_received;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (lin_9_received_1_vld_in = ap_const_logic_1) and (lin_9_received_1_vld_reg = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lin_9_received_1_vld_in = ap_const_logic_1) and (lin_9_received_1_vld_reg = ap_const_logic_0)))) then
                lin_9_received_1_data_reg <= grp_single_lin_process_1_fu_362_lin_9_received;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (lin_dropped_1_vld_in = ap_const_logic_1) and (lin_dropped_1_vld_reg = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lin_dropped_1_vld_in = ap_const_logic_1) and (lin_dropped_1_vld_reg = ap_const_logic_0)))) then
                lin_dropped_1_data_reg <= grp_single_lin_process_1_fu_362_lin_dropped;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                lin_nr_2_reg_823 <= lin_nr_2_fu_505_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln378_fu_499_p2 = ap_const_lv1_0) and (icmp_ln323_fu_526_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                linbase_mod_reg_832 <= linbase_mod_fu_544_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln306_2_fu_718_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    readIndex_2_reg_902(5 downto 0) <= readIndex_2_fu_750_p3(5 downto 0);    readIndex_2_reg_902(7) <= readIndex_2_fu_750_p3(7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                result_reg_868 <= can_addr_RDATA;
                tmp_10_reg_883 <= can_addr_RDATA(30 downto 24);
                tmp_8_reg_893 <= can_addr_RDATA(14 downto 8);
                tmp_9_reg_878 <= can_addr_RDATA(14 downto 8);
                tmp_reg_888 <= can_addr_RDATA(30 downto 24);
                trunc_ln304_reg_873 <= trunc_ln304_fu_654_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((mode_nr_load_load_fu_467_p1 = ap_const_lv2_1)) and not((mode_nr_load_load_fu_467_p1 = ap_const_lv2_2)) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                trunc_ln337_reg_812 <= trunc_ln337_fu_486_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((mode_nr_load_load_fu_467_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                trunc_ln378_reg_800 <= trunc_ln378_fu_477_p1;
            end if;
        end if;
    end process;
    readIndex_2_reg_902(6) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, lin_0_received_1_ack_in, lin_1_received_1_ack_in, lin_2_received_1_ack_in, lin_3_received_1_ack_in, lin_4_received_1_ack_in, lin_5_received_1_ack_in, lin_6_received_1_ack_in, lin_7_received_1_ack_in, lin_8_received_1_ack_in, lin_9_received_1_ack_in, lin_dropped_1_ack_in, ap_CS_fsm_state5, ap_CS_fsm_state12, mode_nr_load_load_fu_467_p1, ap_CS_fsm_state2, icmp_ln378_fu_499_p2, ap_CS_fsm_state4, icmp_ln301_fu_590_p2, icmp_ln337_fu_563_p2, can_addr_ARREADY, can_addr_RVALID, ap_CS_fsm_state3, ap_block_state3_on_subcall_done, ap_CS_fsm_state14, ap_block_state14_on_subcall_done, ap_CS_fsm_state15)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not((mode_nr_load_load_fu_467_p1 = ap_const_lv2_1)) and not((mode_nr_load_load_fu_467_p1 = ap_const_lv2_2)) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((mode_nr_load_load_fu_467_p1 = ap_const_lv2_2) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((mode_nr_load_load_fu_467_p1 = ap_const_lv2_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln378_fu_499_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln337_fu_563_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                elsif (((icmp_ln337_fu_563_p2 = ap_const_lv1_0) and (icmp_ln301_fu_590_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((can_addr_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (can_addr_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if ((not(((lin_dropped_1_ack_in = ap_const_logic_0) or (lin_9_received_1_ack_in = ap_const_logic_0) or (lin_8_received_1_ack_in = ap_const_logic_0) or (lin_7_received_1_ack_in = ap_const_logic_0) or (lin_6_received_1_ack_in = ap_const_logic_0) or (lin_5_received_1_ack_in = ap_const_logic_0) or (lin_4_received_1_ack_in = ap_const_logic_0) or (lin_3_received_1_ack_in = ap_const_logic_0) or (lin_2_received_1_ack_in = ap_const_logic_0) or (lin_1_received_1_ack_in = ap_const_logic_0) or (lin_0_received_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln304_fu_623_p2 <= std_logic_vector(unsigned(zext_ln304_fu_619_p1) + unsigned(can_ptr_read_reg_784));
    add_ln337_fu_569_p2 <= std_logic_vector(unsigned(jj_fu_304) + unsigned(ap_const_lv4_1));
    and_ln301_fu_585_p2 <= (trunc_ln337_reg_812 and shl_ln301_fu_579_p2);
    and_ln323_fu_521_p2 <= (trunc_ln378_reg_800 and shl_ln323_fu_515_p2);
    and_ln_fu_708_p5 <= (((tmp_reg_888 & ap_const_lv9_0) & tmp_8_reg_893) & ap_const_lv8_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(can_addr_RVALID)
    begin
        if ((can_addr_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state14_blk_assign_proc : process(ap_block_state14_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state14_on_subcall_done)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state15_blk_assign_proc : process(lin_0_received_1_ack_in, lin_1_received_1_ack_in, lin_2_received_1_ack_in, lin_3_received_1_ack_in, lin_4_received_1_ack_in, lin_5_received_1_ack_in, lin_6_received_1_ack_in, lin_7_received_1_ack_in, lin_8_received_1_ack_in, lin_9_received_1_ack_in, lin_dropped_1_ack_in)
    begin
        if (((lin_dropped_1_ack_in = ap_const_logic_0) or (lin_9_received_1_ack_in = ap_const_logic_0) or (lin_8_received_1_ack_in = ap_const_logic_0) or (lin_7_received_1_ack_in = ap_const_logic_0) or (lin_6_received_1_ack_in = ap_const_logic_0) or (lin_5_received_1_ack_in = ap_const_logic_0) or (lin_4_received_1_ack_in = ap_const_logic_0) or (lin_3_received_1_ack_in = ap_const_logic_0) or (lin_2_received_1_ack_in = ap_const_logic_0) or (lin_1_received_1_ack_in = ap_const_logic_0) or (lin_0_received_1_ack_in = ap_const_logic_0))) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(ap_block_state3_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state3_on_subcall_done)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(can_addr_ARREADY)
    begin
        if ((can_addr_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state14_on_subcall_done_assign_proc : process(grp_recvFrame_logic_1_fu_428_ap_done, ap_predicate_op192_call_state14)
    begin
                ap_block_state14_on_subcall_done <= ((grp_recvFrame_logic_1_fu_428_ap_done = ap_const_logic_0) and (ap_predicate_op192_call_state14 = ap_const_boolean_1));
    end process;


    ap_block_state15_assign_proc : process(lin_0_received_1_ack_in, lin_1_received_1_ack_in, lin_2_received_1_ack_in, lin_3_received_1_ack_in, lin_4_received_1_ack_in, lin_5_received_1_ack_in, lin_6_received_1_ack_in, lin_7_received_1_ack_in, lin_8_received_1_ack_in, lin_9_received_1_ack_in, lin_dropped_1_ack_in)
    begin
                ap_block_state15 <= ((lin_dropped_1_ack_in = ap_const_logic_0) or (lin_9_received_1_ack_in = ap_const_logic_0) or (lin_8_received_1_ack_in = ap_const_logic_0) or (lin_7_received_1_ack_in = ap_const_logic_0) or (lin_6_received_1_ack_in = ap_const_logic_0) or (lin_5_received_1_ack_in = ap_const_logic_0) or (lin_4_received_1_ack_in = ap_const_logic_0) or (lin_3_received_1_ack_in = ap_const_logic_0) or (lin_2_received_1_ack_in = ap_const_logic_0) or (lin_1_received_1_ack_in = ap_const_logic_0) or (lin_0_received_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state3_on_subcall_done_assign_proc : process(icmp_ln323_reg_828, grp_single_lin_process_1_fu_362_ap_done)
    begin
                ap_block_state3_on_subcall_done <= ((grp_single_lin_process_1_fu_362_ap_done = ap_const_logic_0) and (icmp_ln323_reg_828 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(lin_0_received_1_ack_in, lin_1_received_1_ack_in, lin_2_received_1_ack_in, lin_3_received_1_ack_in, lin_4_received_1_ack_in, lin_5_received_1_ack_in, lin_6_received_1_ack_in, lin_7_received_1_ack_in, lin_8_received_1_ack_in, lin_9_received_1_ack_in, lin_dropped_1_ack_in, ap_CS_fsm_state15)
    begin
        if ((not(((lin_dropped_1_ack_in = ap_const_logic_0) or (lin_9_received_1_ack_in = ap_const_logic_0) or (lin_8_received_1_ack_in = ap_const_logic_0) or (lin_7_received_1_ack_in = ap_const_logic_0) or (lin_6_received_1_ack_in = ap_const_logic_0) or (lin_5_received_1_ack_in = ap_const_logic_0) or (lin_4_received_1_ack_in = ap_const_logic_0) or (lin_3_received_1_ack_in = ap_const_logic_0) or (lin_2_received_1_ack_in = ap_const_logic_0) or (lin_1_received_1_ack_in = ap_const_logic_0) or (lin_0_received_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op192_call_state14_assign_proc : process(icmp_ln301_reg_848, icmp_ln306_2_reg_898)
    begin
                ap_predicate_op192_call_state14 <= ((icmp_ln306_2_reg_898 = ap_const_lv1_0) and (icmp_ln301_reg_848 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(lin_0_received_1_ack_in, lin_1_received_1_ack_in, lin_2_received_1_ack_in, lin_3_received_1_ack_in, lin_4_received_1_ack_in, lin_5_received_1_ack_in, lin_6_received_1_ack_in, lin_7_received_1_ack_in, lin_8_received_1_ack_in, lin_9_received_1_ack_in, lin_dropped_1_ack_in, ap_CS_fsm_state15)
    begin
        if ((not(((lin_dropped_1_ack_in = ap_const_logic_0) or (lin_9_received_1_ack_in = ap_const_logic_0) or (lin_8_received_1_ack_in = ap_const_logic_0) or (lin_7_received_1_ack_in = ap_const_logic_0) or (lin_6_received_1_ack_in = ap_const_logic_0) or (lin_5_received_1_ack_in = ap_const_logic_0) or (lin_4_received_1_ack_in = ap_const_logic_0) or (lin_3_received_1_ack_in = ap_const_logic_0) or (lin_2_received_1_ack_in = ap_const_logic_0) or (lin_1_received_1_ack_in = ap_const_logic_0) or (lin_0_received_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    can_addr_ARADDR_assign_proc : process(ap_CS_fsm_state5, icmp_ln301_reg_848, icmp_ln306_2_fu_718_p2, icmp_ln306_2_reg_898, ap_CS_fsm_state13, grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARADDR, can_addr_ARREADY, ap_CS_fsm_state14, sext_ln304_fu_644_p1)
    begin
        if (((can_addr_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            can_addr_ARADDR <= sext_ln304_fu_644_p1;
        elsif ((((icmp_ln306_2_fu_718_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln306_2_reg_898 = ap_const_lv1_0) and (icmp_ln301_reg_848 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            can_addr_ARADDR <= grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARADDR;
        else 
            can_addr_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    can_addr_ARLEN_assign_proc : process(ap_CS_fsm_state5, icmp_ln301_reg_848, icmp_ln306_2_fu_718_p2, icmp_ln306_2_reg_898, ap_CS_fsm_state13, grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARLEN, can_addr_ARREADY, ap_CS_fsm_state14)
    begin
        if (((can_addr_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            can_addr_ARLEN <= ap_const_lv32_1;
        elsif ((((icmp_ln306_2_fu_718_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln306_2_reg_898 = ap_const_lv1_0) and (icmp_ln301_reg_848 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            can_addr_ARLEN <= grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARLEN;
        else 
            can_addr_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    can_addr_ARVALID_assign_proc : process(ap_CS_fsm_state5, icmp_ln301_reg_848, icmp_ln306_2_fu_718_p2, icmp_ln306_2_reg_898, ap_CS_fsm_state13, grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARVALID, can_addr_ARREADY, ap_CS_fsm_state14)
    begin
        if (((can_addr_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            can_addr_ARVALID <= ap_const_logic_1;
        elsif ((((icmp_ln306_2_fu_718_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln306_2_reg_898 = ap_const_lv1_0) and (icmp_ln301_reg_848 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            can_addr_ARVALID <= grp_recvFrame_logic_1_fu_428_m_axi_can_addr_ARVALID;
        else 
            can_addr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    can_addr_AWVALID_assign_proc : process(icmp_ln301_reg_848, icmp_ln306_2_fu_718_p2, icmp_ln306_2_reg_898, ap_CS_fsm_state13, grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWVALID, ap_CS_fsm_state14)
    begin
        if ((((icmp_ln306_2_fu_718_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln306_2_reg_898 = ap_const_lv1_0) and (icmp_ln301_reg_848 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            can_addr_AWVALID <= grp_recvFrame_logic_1_fu_428_m_axi_can_addr_AWVALID;
        else 
            can_addr_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    can_addr_BREADY_assign_proc : process(icmp_ln301_reg_848, icmp_ln306_2_fu_718_p2, icmp_ln306_2_reg_898, ap_CS_fsm_state13, grp_recvFrame_logic_1_fu_428_m_axi_can_addr_BREADY, ap_CS_fsm_state14)
    begin
        if ((((icmp_ln306_2_fu_718_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln306_2_reg_898 = ap_const_lv1_0) and (icmp_ln301_reg_848 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            can_addr_BREADY <= grp_recvFrame_logic_1_fu_428_m_axi_can_addr_BREADY;
        else 
            can_addr_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    can_addr_RREADY_assign_proc : process(ap_CS_fsm_state12, icmp_ln301_reg_848, icmp_ln306_2_fu_718_p2, icmp_ln306_2_reg_898, ap_CS_fsm_state13, grp_recvFrame_logic_1_fu_428_m_axi_can_addr_RREADY, can_addr_RVALID, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (can_addr_RVALID = ap_const_logic_1))) then 
            can_addr_RREADY <= ap_const_logic_1;
        elsif ((((icmp_ln306_2_fu_718_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln306_2_reg_898 = ap_const_lv1_0) and (icmp_ln301_reg_848 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            can_addr_RREADY <= grp_recvFrame_logic_1_fu_428_m_axi_can_addr_RREADY;
        else 
            can_addr_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    can_addr_WVALID_assign_proc : process(icmp_ln301_reg_848, icmp_ln306_2_fu_718_p2, icmp_ln306_2_reg_898, ap_CS_fsm_state13, grp_recvFrame_logic_1_fu_428_m_axi_can_addr_WVALID, ap_CS_fsm_state14)
    begin
        if ((((icmp_ln306_2_fu_718_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln306_2_reg_898 = ap_const_lv1_0) and (icmp_ln301_reg_848 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            can_addr_WVALID <= grp_recvFrame_logic_1_fu_428_m_axi_can_addr_WVALID;
        else 
            can_addr_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    can_addr_blk_n_AR_assign_proc : process(m_axi_can_addr_ARREADY, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            can_addr_blk_n_AR <= m_axi_can_addr_ARREADY;
        else 
            can_addr_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    can_addr_blk_n_R_assign_proc : process(m_axi_can_addr_RVALID, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            can_addr_blk_n_R <= m_axi_can_addr_RVALID;
        else 
            can_addr_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    canaddr_mod_fu_608_p2 <= std_logic_vector(unsigned(zext_ln303_fu_604_p1) + unsigned(can_ptr_read_reg_784));
    grp_recvFrame_logic_1_fu_428_ap_start <= grp_recvFrame_logic_1_fu_428_ap_start_reg;
    grp_single_lin_process_1_fu_362_ap_start <= grp_single_lin_process_1_fu_362_ap_start_reg;
    icmp_ln301_fu_590_p2 <= "1" when (and_ln301_fu_585_p2 = ap_const_lv12_0) else "0";
    icmp_ln306_1_fu_703_p2 <= "0" when (tmp_10_reg_883 = ap_const_lv7_0) else "1";
    icmp_ln306_2_fu_718_p2 <= "1" when (and_ln_fu_708_p5 = ap_const_lv31_0) else "0";
    icmp_ln306_fu_698_p2 <= "0" when (tmp_9_reg_878 = ap_const_lv7_0) else "1";
    icmp_ln323_fu_526_p2 <= "1" when (and_ln323_fu_521_p2 = ap_const_lv10_0) else "0";
    icmp_ln337_fu_563_p2 <= "1" when (jj_fu_304 = ap_const_lv4_C) else "0";
    icmp_ln378_fu_499_p2 <= "1" when (lin_nr_fu_300 = ap_const_lv4_A) else "0";

    lin_0_received_1_ack_in_assign_proc : process(lin_0_received_1_vld_reg)
    begin
        if (((lin_0_received_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (lin_0_received_1_vld_reg = ap_const_logic_1)))) then 
            lin_0_received_1_ack_in <= ap_const_logic_1;
        else 
            lin_0_received_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;

    lin_0_received_1_vld_in <= grp_single_lin_process_1_fu_362_lin_0_received_ap_vld;

    lin_1_received_1_ack_in_assign_proc : process(lin_1_received_1_vld_reg)
    begin
        if (((lin_1_received_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (lin_1_received_1_vld_reg = ap_const_logic_1)))) then 
            lin_1_received_1_ack_in <= ap_const_logic_1;
        else 
            lin_1_received_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;

    lin_1_received_1_vld_in <= grp_single_lin_process_1_fu_362_lin_1_received_ap_vld;

    lin_2_received_1_ack_in_assign_proc : process(lin_2_received_1_vld_reg)
    begin
        if (((lin_2_received_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (lin_2_received_1_vld_reg = ap_const_logic_1)))) then 
            lin_2_received_1_ack_in <= ap_const_logic_1;
        else 
            lin_2_received_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;

    lin_2_received_1_vld_in <= grp_single_lin_process_1_fu_362_lin_2_received_ap_vld;

    lin_3_received_1_ack_in_assign_proc : process(lin_3_received_1_vld_reg)
    begin
        if (((lin_3_received_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (lin_3_received_1_vld_reg = ap_const_logic_1)))) then 
            lin_3_received_1_ack_in <= ap_const_logic_1;
        else 
            lin_3_received_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;

    lin_3_received_1_vld_in <= grp_single_lin_process_1_fu_362_lin_3_received_ap_vld;

    lin_4_received_1_ack_in_assign_proc : process(lin_4_received_1_vld_reg)
    begin
        if (((lin_4_received_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (lin_4_received_1_vld_reg = ap_const_logic_1)))) then 
            lin_4_received_1_ack_in <= ap_const_logic_1;
        else 
            lin_4_received_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;

    lin_4_received_1_vld_in <= grp_single_lin_process_1_fu_362_lin_4_received_ap_vld;

    lin_5_received_1_ack_in_assign_proc : process(lin_5_received_1_vld_reg)
    begin
        if (((lin_5_received_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (lin_5_received_1_vld_reg = ap_const_logic_1)))) then 
            lin_5_received_1_ack_in <= ap_const_logic_1;
        else 
            lin_5_received_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;

    lin_5_received_1_vld_in <= grp_single_lin_process_1_fu_362_lin_5_received_ap_vld;

    lin_6_received_1_ack_in_assign_proc : process(lin_6_received_1_vld_reg)
    begin
        if (((lin_6_received_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (lin_6_received_1_vld_reg = ap_const_logic_1)))) then 
            lin_6_received_1_ack_in <= ap_const_logic_1;
        else 
            lin_6_received_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;

    lin_6_received_1_vld_in <= grp_single_lin_process_1_fu_362_lin_6_received_ap_vld;

    lin_7_received_1_ack_in_assign_proc : process(lin_7_received_1_vld_reg)
    begin
        if (((lin_7_received_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (lin_7_received_1_vld_reg = ap_const_logic_1)))) then 
            lin_7_received_1_ack_in <= ap_const_logic_1;
        else 
            lin_7_received_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;

    lin_7_received_1_vld_in <= grp_single_lin_process_1_fu_362_lin_7_received_ap_vld;

    lin_8_received_1_ack_in_assign_proc : process(lin_8_received_1_vld_reg)
    begin
        if (((lin_8_received_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (lin_8_received_1_vld_reg = ap_const_logic_1)))) then 
            lin_8_received_1_ack_in <= ap_const_logic_1;
        else 
            lin_8_received_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;

    lin_8_received_1_vld_in <= grp_single_lin_process_1_fu_362_lin_8_received_ap_vld;

    lin_9_received_1_ack_in_assign_proc : process(lin_9_received_1_vld_reg)
    begin
        if (((lin_9_received_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (lin_9_received_1_vld_reg = ap_const_logic_1)))) then 
            lin_9_received_1_ack_in <= ap_const_logic_1;
        else 
            lin_9_received_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;

    lin_9_received_1_vld_in <= grp_single_lin_process_1_fu_362_lin_9_received_ap_vld;

    lin_addr_ARVALID_assign_proc : process(ap_CS_fsm_state2, icmp_ln323_fu_526_p2, icmp_ln323_reg_828, icmp_ln378_fu_499_p2, grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARVALID, ap_CS_fsm_state3)
    begin
        if ((((icmp_ln378_fu_499_p2 = ap_const_lv1_0) and (icmp_ln323_fu_526_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln323_reg_828 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            lin_addr_ARVALID <= grp_single_lin_process_1_fu_362_m_axi_lin_addr_ARVALID;
        else 
            lin_addr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    lin_addr_AWVALID_assign_proc : process(ap_CS_fsm_state2, icmp_ln323_fu_526_p2, icmp_ln323_reg_828, icmp_ln378_fu_499_p2, grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWVALID, ap_CS_fsm_state3)
    begin
        if ((((icmp_ln378_fu_499_p2 = ap_const_lv1_0) and (icmp_ln323_fu_526_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln323_reg_828 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            lin_addr_AWVALID <= grp_single_lin_process_1_fu_362_m_axi_lin_addr_AWVALID;
        else 
            lin_addr_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    lin_addr_BREADY_assign_proc : process(ap_CS_fsm_state2, icmp_ln323_fu_526_p2, icmp_ln323_reg_828, icmp_ln378_fu_499_p2, grp_single_lin_process_1_fu_362_m_axi_lin_addr_BREADY, ap_CS_fsm_state3)
    begin
        if ((((icmp_ln378_fu_499_p2 = ap_const_lv1_0) and (icmp_ln323_fu_526_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln323_reg_828 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            lin_addr_BREADY <= grp_single_lin_process_1_fu_362_m_axi_lin_addr_BREADY;
        else 
            lin_addr_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    lin_addr_RREADY_assign_proc : process(ap_CS_fsm_state2, icmp_ln323_fu_526_p2, icmp_ln323_reg_828, icmp_ln378_fu_499_p2, grp_single_lin_process_1_fu_362_m_axi_lin_addr_RREADY, ap_CS_fsm_state3)
    begin
        if ((((icmp_ln378_fu_499_p2 = ap_const_lv1_0) and (icmp_ln323_fu_526_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln323_reg_828 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            lin_addr_RREADY <= grp_single_lin_process_1_fu_362_m_axi_lin_addr_RREADY;
        else 
            lin_addr_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    lin_addr_WVALID_assign_proc : process(ap_CS_fsm_state2, icmp_ln323_fu_526_p2, icmp_ln323_reg_828, icmp_ln378_fu_499_p2, grp_single_lin_process_1_fu_362_m_axi_lin_addr_WVALID, ap_CS_fsm_state3)
    begin
        if ((((icmp_ln378_fu_499_p2 = ap_const_lv1_0) and (icmp_ln323_fu_526_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln323_reg_828 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            lin_addr_WVALID <= grp_single_lin_process_1_fu_362_m_axi_lin_addr_WVALID;
        else 
            lin_addr_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    lin_dropped_1_ack_in_assign_proc : process(lin_dropped_1_vld_reg)
    begin
        if (((lin_dropped_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (lin_dropped_1_vld_reg = ap_const_logic_1)))) then 
            lin_dropped_1_ack_in <= ap_const_logic_1;
        else 
            lin_dropped_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;

    lin_dropped_1_vld_in <= grp_single_lin_process_1_fu_362_lin_dropped_ap_vld;
    lin_nr_2_fu_505_p2 <= std_logic_vector(unsigned(lin_nr_fu_300) + unsigned(ap_const_lv4_1));
    linbase_mod_fu_544_p2 <= std_logic_vector(unsigned(zext_ln325_fu_540_p1) + unsigned(lin_ptr_read_reg_779));
    m_axi_uart_addr_ARADDR <= ap_const_lv32_0;
    m_axi_uart_addr_ARBURST <= ap_const_lv2_0;
    m_axi_uart_addr_ARCACHE <= ap_const_lv4_0;
    m_axi_uart_addr_ARID <= ap_const_lv1_0;
    m_axi_uart_addr_ARLEN <= ap_const_lv8_0;
    m_axi_uart_addr_ARLOCK <= ap_const_lv2_0;
    m_axi_uart_addr_ARPROT <= ap_const_lv3_0;
    m_axi_uart_addr_ARQOS <= ap_const_lv4_0;
    m_axi_uart_addr_ARREGION <= ap_const_lv4_0;
    m_axi_uart_addr_ARSIZE <= ap_const_lv3_0;
    m_axi_uart_addr_ARUSER <= ap_const_lv1_0;
    m_axi_uart_addr_ARVALID <= ap_const_logic_0;
    m_axi_uart_addr_AWADDR <= ap_const_lv32_0;
    m_axi_uart_addr_AWBURST <= ap_const_lv2_0;
    m_axi_uart_addr_AWCACHE <= ap_const_lv4_0;
    m_axi_uart_addr_AWID <= ap_const_lv1_0;
    m_axi_uart_addr_AWLEN <= ap_const_lv8_0;
    m_axi_uart_addr_AWLOCK <= ap_const_lv2_0;
    m_axi_uart_addr_AWPROT <= ap_const_lv3_0;
    m_axi_uart_addr_AWQOS <= ap_const_lv4_0;
    m_axi_uart_addr_AWREGION <= ap_const_lv4_0;
    m_axi_uart_addr_AWSIZE <= ap_const_lv3_0;
    m_axi_uart_addr_AWUSER <= ap_const_lv1_0;
    m_axi_uart_addr_AWVALID <= ap_const_logic_0;
    m_axi_uart_addr_BREADY <= ap_const_logic_0;
    m_axi_uart_addr_RREADY <= ap_const_logic_0;
    m_axi_uart_addr_WDATA <= ap_const_lv32_0;
    m_axi_uart_addr_WID <= ap_const_lv1_0;
    m_axi_uart_addr_WLAST <= ap_const_logic_0;
    m_axi_uart_addr_WSTRB <= ap_const_lv4_0;
    m_axi_uart_addr_WUSER <= ap_const_lv1_0;
    m_axi_uart_addr_WVALID <= ap_const_logic_0;
    mode_nr_load_load_fu_467_p1 <= mode_nr;
    or_ln304_fu_613_p2 <= (shl_ln_fu_596_p3 or ap_const_lv20_E8);

    ps_ddr_ARADDR_assign_proc : process(ap_CS_fsm_state2, icmp_ln323_fu_526_p2, icmp_ln323_reg_828, icmp_ln378_fu_499_p2, icmp_ln301_reg_848, icmp_ln306_2_fu_718_p2, icmp_ln306_2_reg_898, ap_CS_fsm_state13, grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARADDR, grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARADDR, ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if ((((icmp_ln306_2_fu_718_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln306_2_reg_898 = ap_const_lv1_0) and (icmp_ln301_reg_848 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            ps_ddr_ARADDR <= grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARADDR;
        elsif ((((icmp_ln378_fu_499_p2 = ap_const_lv1_0) and (icmp_ln323_fu_526_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln323_reg_828 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            ps_ddr_ARADDR <= grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARADDR;
        else 
            ps_ddr_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ps_ddr_ARLEN_assign_proc : process(ap_CS_fsm_state2, icmp_ln323_fu_526_p2, icmp_ln323_reg_828, icmp_ln378_fu_499_p2, icmp_ln301_reg_848, icmp_ln306_2_fu_718_p2, icmp_ln306_2_reg_898, ap_CS_fsm_state13, grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARLEN, grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARLEN, ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if ((((icmp_ln306_2_fu_718_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln306_2_reg_898 = ap_const_lv1_0) and (icmp_ln301_reg_848 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            ps_ddr_ARLEN <= grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARLEN;
        elsif ((((icmp_ln378_fu_499_p2 = ap_const_lv1_0) and (icmp_ln323_fu_526_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln323_reg_828 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            ps_ddr_ARLEN <= grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARLEN;
        else 
            ps_ddr_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ps_ddr_ARVALID_assign_proc : process(ap_CS_fsm_state2, icmp_ln323_fu_526_p2, icmp_ln323_reg_828, icmp_ln378_fu_499_p2, icmp_ln301_reg_848, icmp_ln306_2_fu_718_p2, icmp_ln306_2_reg_898, ap_CS_fsm_state13, grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARVALID, grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARVALID, ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if ((((icmp_ln306_2_fu_718_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln306_2_reg_898 = ap_const_lv1_0) and (icmp_ln301_reg_848 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            ps_ddr_ARVALID <= grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_ARVALID;
        elsif ((((icmp_ln378_fu_499_p2 = ap_const_lv1_0) and (icmp_ln323_fu_526_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln323_reg_828 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            ps_ddr_ARVALID <= grp_single_lin_process_1_fu_362_m_axi_ps_ddr_ARVALID;
        else 
            ps_ddr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    ps_ddr_AWADDR_assign_proc : process(ap_CS_fsm_state2, icmp_ln323_fu_526_p2, icmp_ln323_reg_828, icmp_ln378_fu_499_p2, icmp_ln301_reg_848, icmp_ln306_2_fu_718_p2, icmp_ln306_2_reg_898, ap_CS_fsm_state13, grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWADDR, grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWADDR, ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if ((((icmp_ln306_2_fu_718_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln306_2_reg_898 = ap_const_lv1_0) and (icmp_ln301_reg_848 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            ps_ddr_AWADDR <= grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWADDR;
        elsif ((((icmp_ln378_fu_499_p2 = ap_const_lv1_0) and (icmp_ln323_fu_526_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln323_reg_828 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            ps_ddr_AWADDR <= grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWADDR;
        else 
            ps_ddr_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ps_ddr_AWLEN_assign_proc : process(ap_CS_fsm_state2, icmp_ln323_fu_526_p2, icmp_ln323_reg_828, icmp_ln378_fu_499_p2, icmp_ln301_reg_848, icmp_ln306_2_fu_718_p2, icmp_ln306_2_reg_898, ap_CS_fsm_state13, grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWLEN, grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWLEN, ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if ((((icmp_ln306_2_fu_718_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln306_2_reg_898 = ap_const_lv1_0) and (icmp_ln301_reg_848 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            ps_ddr_AWLEN <= grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWLEN;
        elsif ((((icmp_ln378_fu_499_p2 = ap_const_lv1_0) and (icmp_ln323_fu_526_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln323_reg_828 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            ps_ddr_AWLEN <= grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWLEN;
        else 
            ps_ddr_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ps_ddr_AWVALID_assign_proc : process(ap_CS_fsm_state2, icmp_ln323_fu_526_p2, icmp_ln323_reg_828, icmp_ln378_fu_499_p2, icmp_ln301_reg_848, icmp_ln306_2_fu_718_p2, icmp_ln306_2_reg_898, ap_CS_fsm_state13, grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWVALID, grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWVALID, ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if ((((icmp_ln306_2_fu_718_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln306_2_reg_898 = ap_const_lv1_0) and (icmp_ln301_reg_848 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            ps_ddr_AWVALID <= grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_AWVALID;
        elsif ((((icmp_ln378_fu_499_p2 = ap_const_lv1_0) and (icmp_ln323_fu_526_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln323_reg_828 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            ps_ddr_AWVALID <= grp_single_lin_process_1_fu_362_m_axi_ps_ddr_AWVALID;
        else 
            ps_ddr_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    ps_ddr_BREADY_assign_proc : process(ap_CS_fsm_state2, icmp_ln323_fu_526_p2, icmp_ln323_reg_828, icmp_ln378_fu_499_p2, icmp_ln301_reg_848, icmp_ln306_2_fu_718_p2, icmp_ln306_2_reg_898, ap_CS_fsm_state13, grp_single_lin_process_1_fu_362_m_axi_ps_ddr_BREADY, grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_BREADY, ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if ((((icmp_ln306_2_fu_718_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln306_2_reg_898 = ap_const_lv1_0) and (icmp_ln301_reg_848 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            ps_ddr_BREADY <= grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_BREADY;
        elsif ((((icmp_ln378_fu_499_p2 = ap_const_lv1_0) and (icmp_ln323_fu_526_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln323_reg_828 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            ps_ddr_BREADY <= grp_single_lin_process_1_fu_362_m_axi_ps_ddr_BREADY;
        else 
            ps_ddr_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    ps_ddr_RREADY_assign_proc : process(ap_CS_fsm_state2, icmp_ln323_fu_526_p2, icmp_ln323_reg_828, icmp_ln378_fu_499_p2, icmp_ln301_reg_848, icmp_ln306_2_fu_718_p2, icmp_ln306_2_reg_898, ap_CS_fsm_state13, grp_single_lin_process_1_fu_362_m_axi_ps_ddr_RREADY, grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_RREADY, ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if ((((icmp_ln306_2_fu_718_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln306_2_reg_898 = ap_const_lv1_0) and (icmp_ln301_reg_848 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            ps_ddr_RREADY <= grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_RREADY;
        elsif ((((icmp_ln378_fu_499_p2 = ap_const_lv1_0) and (icmp_ln323_fu_526_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln323_reg_828 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            ps_ddr_RREADY <= grp_single_lin_process_1_fu_362_m_axi_ps_ddr_RREADY;
        else 
            ps_ddr_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    ps_ddr_WDATA_assign_proc : process(ap_CS_fsm_state2, icmp_ln323_fu_526_p2, icmp_ln323_reg_828, icmp_ln378_fu_499_p2, icmp_ln301_reg_848, icmp_ln306_2_fu_718_p2, icmp_ln306_2_reg_898, ap_CS_fsm_state13, grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WDATA, grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WDATA, ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if ((((icmp_ln306_2_fu_718_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln306_2_reg_898 = ap_const_lv1_0) and (icmp_ln301_reg_848 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            ps_ddr_WDATA <= grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WDATA;
        elsif ((((icmp_ln378_fu_499_p2 = ap_const_lv1_0) and (icmp_ln323_fu_526_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln323_reg_828 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            ps_ddr_WDATA <= grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WDATA;
        else 
            ps_ddr_WDATA <= "XXXXXXXX";
        end if; 
    end process;


    ps_ddr_WSTRB_assign_proc : process(ap_CS_fsm_state2, icmp_ln323_fu_526_p2, icmp_ln323_reg_828, icmp_ln378_fu_499_p2, icmp_ln301_reg_848, icmp_ln306_2_fu_718_p2, icmp_ln306_2_reg_898, ap_CS_fsm_state13, grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WSTRB, grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WSTRB, ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if ((((icmp_ln306_2_fu_718_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln306_2_reg_898 = ap_const_lv1_0) and (icmp_ln301_reg_848 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            ps_ddr_WSTRB <= grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WSTRB;
        elsif ((((icmp_ln378_fu_499_p2 = ap_const_lv1_0) and (icmp_ln323_fu_526_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln323_reg_828 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            ps_ddr_WSTRB <= grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WSTRB;
        else 
            ps_ddr_WSTRB <= "X";
        end if; 
    end process;


    ps_ddr_WVALID_assign_proc : process(ap_CS_fsm_state2, icmp_ln323_fu_526_p2, icmp_ln323_reg_828, icmp_ln378_fu_499_p2, icmp_ln301_reg_848, icmp_ln306_2_fu_718_p2, icmp_ln306_2_reg_898, ap_CS_fsm_state13, grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WVALID, grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WVALID, ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if ((((icmp_ln306_2_fu_718_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln306_2_reg_898 = ap_const_lv1_0) and (icmp_ln301_reg_848 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            ps_ddr_WVALID <= grp_recvFrame_logic_1_fu_428_m_axi_ps_ddr_WVALID;
        elsif ((((icmp_ln378_fu_499_p2 = ap_const_lv1_0) and (icmp_ln323_fu_526_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln323_reg_828 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            ps_ddr_WVALID <= grp_single_lin_process_1_fu_362_m_axi_ps_ddr_WVALID;
        else 
            ps_ddr_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    readIndex_1_fu_742_p3 <= (tmp_11_fu_735_p3 & ap_const_lv7_0);
    readIndex_2_fu_750_p3 <= 
        readIndex_1_fu_742_p3 when (icmp_ln306_1_fu_703_p2(0) = '1') else 
        zext_ln305_fu_731_p1;
    readIndex_fu_724_p3 <= 
        trunc_ln304_reg_873 when (icmp_ln306_fu_698_p2(0) = '1') else 
        ap_const_lv6_0;
        sext_ln304_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_857),32));

    shl_ln301_fu_579_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv12_1),to_integer(unsigned('0' & zext_ln301_fu_575_p1(12-1 downto 0)))));
    shl_ln323_fu_515_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv10_1),to_integer(unsigned('0' & zext_ln323_fu_511_p1(10-1 downto 0)))));
    shl_ln4_fu_532_p3 <= (lin_nr_fu_300 & ap_const_lv12_0);
    shl_ln_fu_596_p3 <= (jj_fu_304 & ap_const_lv16_0);
    tmp_11_fu_735_p3 <= result_reg_868(23 downto 23);
    trunc_ln304_fu_654_p1 <= can_addr_RDATA(6 - 1 downto 0);
    trunc_ln337_fu_486_p1 <= can_en(12 - 1 downto 0);
    trunc_ln378_fu_477_p1 <= lin_en(10 - 1 downto 0);
    zext_ln301_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(jj_fu_304),12));
    zext_ln303_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_596_p3),32));
    zext_ln304_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln304_fu_613_p2),32));
    zext_ln305_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(readIndex_fu_724_p3),8));
    zext_ln323_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lin_nr_fu_300),10));
    zext_ln325_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln4_fu_532_p3),32));
end behav;
