-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity clu_write_ddr_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_ps_ddr_AWVALID : OUT STD_LOGIC;
    m_axi_ps_ddr_AWREADY : IN STD_LOGIC;
    m_axi_ps_ddr_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ps_ddr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ps_ddr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ps_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ps_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ps_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ps_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ps_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ps_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ps_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ps_ddr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ps_ddr_WVALID : OUT STD_LOGIC;
    m_axi_ps_ddr_WREADY : IN STD_LOGIC;
    m_axi_ps_ddr_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ps_ddr_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ps_ddr_WLAST : OUT STD_LOGIC;
    m_axi_ps_ddr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ps_ddr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ps_ddr_ARVALID : OUT STD_LOGIC;
    m_axi_ps_ddr_ARREADY : IN STD_LOGIC;
    m_axi_ps_ddr_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ps_ddr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ps_ddr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ps_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ps_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ps_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ps_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ps_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ps_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ps_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ps_ddr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ps_ddr_RVALID : IN STD_LOGIC;
    m_axi_ps_ddr_RREADY : OUT STD_LOGIC;
    m_axi_ps_ddr_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ps_ddr_RLAST : IN STD_LOGIC;
    m_axi_ps_ddr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ps_ddr_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_ps_ddr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ps_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ps_ddr_BVALID : IN STD_LOGIC;
    m_axi_ps_ddr_BREADY : OUT STD_LOGIC;
    m_axi_ps_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ps_ddr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ps_ddr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    ddr_header : IN STD_LOGIC_VECTOR (31 downto 0);
    data_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    data_ce0 : OUT STD_LOGIC;
    data_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of clu_write_ddr_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (71 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (71 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (71 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (71 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (71 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (71 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (71 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (71 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (71 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (71 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (71 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (71 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dropped_can_counter : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ps_ddr_blk_n_AR : STD_LOGIC;
    signal ps_ddr_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ps_ddr_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ps_ddr_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ps_ddr_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal icmp_ln118_reg_627 : STD_LOGIC_VECTOR (0 downto 0);
    signal ringbuffer_header_bytes_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_292 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ringbuffer_header_bytes_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal reg_297 : STD_LOGIC_VECTOR (7 downto 0);
    signal loop_index4_load_reg_511 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exitcond66_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ps_ddr_addr_read_reg_529 : STD_LOGIC_VECTOR (7 downto 0);
    signal ringbuffer_header_bytes_load_13_reg_544 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ringbuffer_header_bytes_load_14_reg_549 : STD_LOGIC_VECTOR (7 downto 0);
    signal ringbuffer_header_bytes_load_19_reg_564 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ringbuffer_header_bytes_load_20_reg_569 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal writeCanIndex_fu_348_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal writeCanIndex_reg_589 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_fu_364_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal nextWriteCanIndex_reg_619 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal icmp_ln118_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln126_fu_388_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln126_reg_631 : STD_LOGIC_VECTOR (31 downto 0);
    signal ps_ddr_addr_4_reg_636 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln126_1_fu_409_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln126_1_reg_642 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal add_ln17_fu_420_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_reg_653 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal write_index_array_0_reg_664 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal write_index_array_1_reg_669 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_index_array_2_reg_674 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_index_array_3_fu_461_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_index_array_3_reg_679 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln120_1_fu_485_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln120_1_reg_684 : STD_LOGIC_VECTOR (7 downto 0);
    signal ringbuffer_header_bytes_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ringbuffer_header_bytes_ce0 : STD_LOGIC;
    signal ringbuffer_header_bytes_we0 : STD_LOGIC;
    signal ringbuffer_header_bytes_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ringbuffer_header_bytes_ce1 : STD_LOGIC;
    signal grp_write_ddr_1_Pipeline_1_fu_272_ap_start : STD_LOGIC;
    signal grp_write_ddr_1_Pipeline_1_fu_272_ap_done : STD_LOGIC;
    signal grp_write_ddr_1_Pipeline_1_fu_272_ap_idle : STD_LOGIC;
    signal grp_write_ddr_1_Pipeline_1_fu_272_ap_ready : STD_LOGIC;
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWVALID : STD_LOGIC;
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_WVALID : STD_LOGIC;
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_WLAST : STD_LOGIC;
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_ARVALID : STD_LOGIC;
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_RREADY : STD_LOGIC;
    signal grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_BREADY : STD_LOGIC;
    signal grp_write_ddr_1_Pipeline_1_fu_272_data_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_write_ddr_1_Pipeline_1_fu_272_data_ce0 : STD_LOGIC;
    signal grp_write_ddr_1_Pipeline_2_fu_281_ap_start : STD_LOGIC;
    signal grp_write_ddr_1_Pipeline_2_fu_281_ap_done : STD_LOGIC;
    signal grp_write_ddr_1_Pipeline_2_fu_281_ap_idle : STD_LOGIC;
    signal grp_write_ddr_1_Pipeline_2_fu_281_ap_ready : STD_LOGIC;
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWVALID : STD_LOGIC;
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_WVALID : STD_LOGIC;
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_WLAST : STD_LOGIC;
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_ARVALID : STD_LOGIC;
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_RREADY : STD_LOGIC;
    signal grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_BREADY : STD_LOGIC;
    signal grp_write_ddr_1_Pipeline_1_fu_272_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal grp_write_ddr_1_Pipeline_2_fu_281_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal loop_index4_cast_fu_334_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln120_fu_393_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state65 : BOOLEAN;
    signal add_ln119_fu_473_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal loop_index4_fu_102 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_81_fu_323_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_364_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_364_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal readCanIndex_fu_370_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln126_fu_388_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln126_fu_404_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln119_fu_469_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_364_ap_start : STD_LOGIC;
    signal grp_fu_364_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (71 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component clu_write_ddr_1_Pipeline_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_ps_ddr_AWVALID : OUT STD_LOGIC;
        m_axi_ps_ddr_AWREADY : IN STD_LOGIC;
        m_axi_ps_ddr_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ps_ddr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ps_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ps_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ps_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_WVALID : OUT STD_LOGIC;
        m_axi_ps_ddr_WREADY : IN STD_LOGIC;
        m_axi_ps_ddr_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_ps_ddr_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_WLAST : OUT STD_LOGIC;
        m_axi_ps_ddr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_ARVALID : OUT STD_LOGIC;
        m_axi_ps_ddr_ARREADY : IN STD_LOGIC;
        m_axi_ps_ddr_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ps_ddr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ps_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ps_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ps_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_RVALID : IN STD_LOGIC;
        m_axi_ps_ddr_RREADY : OUT STD_LOGIC;
        m_axi_ps_ddr_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_ps_ddr_RLAST : IN STD_LOGIC;
        m_axi_ps_ddr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_ps_ddr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_BVALID : IN STD_LOGIC;
        m_axi_ps_ddr_BREADY : OUT STD_LOGIC;
        m_axi_ps_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        add_ln126_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_ce0 : OUT STD_LOGIC;
        data_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clu_write_ddr_1_Pipeline_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_ps_ddr_AWVALID : OUT STD_LOGIC;
        m_axi_ps_ddr_AWREADY : IN STD_LOGIC;
        m_axi_ps_ddr_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ps_ddr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ps_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ps_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ps_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_WVALID : OUT STD_LOGIC;
        m_axi_ps_ddr_WREADY : IN STD_LOGIC;
        m_axi_ps_ddr_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_ps_ddr_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_WLAST : OUT STD_LOGIC;
        m_axi_ps_ddr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_ARVALID : OUT STD_LOGIC;
        m_axi_ps_ddr_ARREADY : IN STD_LOGIC;
        m_axi_ps_ddr_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ps_ddr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ps_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ps_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ps_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_RVALID : IN STD_LOGIC;
        m_axi_ps_ddr_RREADY : OUT STD_LOGIC;
        m_axi_ps_ddr_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_ps_ddr_RLAST : IN STD_LOGIC;
        m_axi_ps_ddr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_ps_ddr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_BVALID : IN STD_LOGIC;
        m_axi_ps_ddr_BREADY : OUT STD_LOGIC;
        m_axi_ps_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        add_ln17 : IN STD_LOGIC_VECTOR (31 downto 0);
        write_index_array_0 : IN STD_LOGIC_VECTOR (7 downto 0);
        write_index_array_1 : IN STD_LOGIC_VECTOR (7 downto 0);
        write_index_array_2 : IN STD_LOGIC_VECTOR (7 downto 0);
        write_index_array_3 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clu_urem_32ns_32ns_32_36_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component clu_mul_32s_8ns_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component clu_write_lin_ddr_1_ringbuffer_header_bytes_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ringbuffer_header_bytes_U : component clu_write_lin_ddr_1_ringbuffer_header_bytes_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ringbuffer_header_bytes_address0,
        ce0 => ringbuffer_header_bytes_ce0,
        we0 => ringbuffer_header_bytes_we0,
        d0 => ps_ddr_addr_read_reg_529,
        q0 => ringbuffer_header_bytes_q0,
        address1 => ringbuffer_header_bytes_address1,
        ce1 => ringbuffer_header_bytes_ce1,
        q1 => ringbuffer_header_bytes_q1);

    grp_write_ddr_1_Pipeline_1_fu_272 : component clu_write_ddr_1_Pipeline_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_write_ddr_1_Pipeline_1_fu_272_ap_start,
        ap_done => grp_write_ddr_1_Pipeline_1_fu_272_ap_done,
        ap_idle => grp_write_ddr_1_Pipeline_1_fu_272_ap_idle,
        ap_ready => grp_write_ddr_1_Pipeline_1_fu_272_ap_ready,
        m_axi_ps_ddr_AWVALID => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWVALID,
        m_axi_ps_ddr_AWREADY => m_axi_ps_ddr_AWREADY,
        m_axi_ps_ddr_AWADDR => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWADDR,
        m_axi_ps_ddr_AWID => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWID,
        m_axi_ps_ddr_AWLEN => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWLEN,
        m_axi_ps_ddr_AWSIZE => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWSIZE,
        m_axi_ps_ddr_AWBURST => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWBURST,
        m_axi_ps_ddr_AWLOCK => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWLOCK,
        m_axi_ps_ddr_AWCACHE => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWCACHE,
        m_axi_ps_ddr_AWPROT => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWPROT,
        m_axi_ps_ddr_AWQOS => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWQOS,
        m_axi_ps_ddr_AWREGION => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWREGION,
        m_axi_ps_ddr_AWUSER => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWUSER,
        m_axi_ps_ddr_WVALID => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_WVALID,
        m_axi_ps_ddr_WREADY => m_axi_ps_ddr_WREADY,
        m_axi_ps_ddr_WDATA => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_WDATA,
        m_axi_ps_ddr_WSTRB => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_WSTRB,
        m_axi_ps_ddr_WLAST => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_WLAST,
        m_axi_ps_ddr_WID => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_WID,
        m_axi_ps_ddr_WUSER => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_WUSER,
        m_axi_ps_ddr_ARVALID => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_ARVALID,
        m_axi_ps_ddr_ARREADY => ap_const_logic_0,
        m_axi_ps_ddr_ARADDR => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_ARADDR,
        m_axi_ps_ddr_ARID => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_ARID,
        m_axi_ps_ddr_ARLEN => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_ARLEN,
        m_axi_ps_ddr_ARSIZE => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_ARSIZE,
        m_axi_ps_ddr_ARBURST => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_ARBURST,
        m_axi_ps_ddr_ARLOCK => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_ARLOCK,
        m_axi_ps_ddr_ARCACHE => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_ARCACHE,
        m_axi_ps_ddr_ARPROT => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_ARPROT,
        m_axi_ps_ddr_ARQOS => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_ARQOS,
        m_axi_ps_ddr_ARREGION => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_ARREGION,
        m_axi_ps_ddr_ARUSER => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_ARUSER,
        m_axi_ps_ddr_RVALID => ap_const_logic_0,
        m_axi_ps_ddr_RREADY => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_RREADY,
        m_axi_ps_ddr_RDATA => ap_const_lv8_0,
        m_axi_ps_ddr_RLAST => ap_const_logic_0,
        m_axi_ps_ddr_RID => ap_const_lv1_0,
        m_axi_ps_ddr_RFIFONUM => ap_const_lv11_0,
        m_axi_ps_ddr_RUSER => ap_const_lv1_0,
        m_axi_ps_ddr_RRESP => ap_const_lv2_0,
        m_axi_ps_ddr_BVALID => m_axi_ps_ddr_BVALID,
        m_axi_ps_ddr_BREADY => grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_BREADY,
        m_axi_ps_ddr_BRESP => m_axi_ps_ddr_BRESP,
        m_axi_ps_ddr_BID => m_axi_ps_ddr_BID,
        m_axi_ps_ddr_BUSER => m_axi_ps_ddr_BUSER,
        add_ln126_1 => add_ln126_1_reg_642,
        data_address0 => grp_write_ddr_1_Pipeline_1_fu_272_data_address0,
        data_ce0 => grp_write_ddr_1_Pipeline_1_fu_272_data_ce0,
        data_q0 => data_q0);

    grp_write_ddr_1_Pipeline_2_fu_281 : component clu_write_ddr_1_Pipeline_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_write_ddr_1_Pipeline_2_fu_281_ap_start,
        ap_done => grp_write_ddr_1_Pipeline_2_fu_281_ap_done,
        ap_idle => grp_write_ddr_1_Pipeline_2_fu_281_ap_idle,
        ap_ready => grp_write_ddr_1_Pipeline_2_fu_281_ap_ready,
        m_axi_ps_ddr_AWVALID => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWVALID,
        m_axi_ps_ddr_AWREADY => m_axi_ps_ddr_AWREADY,
        m_axi_ps_ddr_AWADDR => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWADDR,
        m_axi_ps_ddr_AWID => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWID,
        m_axi_ps_ddr_AWLEN => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWLEN,
        m_axi_ps_ddr_AWSIZE => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWSIZE,
        m_axi_ps_ddr_AWBURST => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWBURST,
        m_axi_ps_ddr_AWLOCK => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWLOCK,
        m_axi_ps_ddr_AWCACHE => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWCACHE,
        m_axi_ps_ddr_AWPROT => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWPROT,
        m_axi_ps_ddr_AWQOS => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWQOS,
        m_axi_ps_ddr_AWREGION => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWREGION,
        m_axi_ps_ddr_AWUSER => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWUSER,
        m_axi_ps_ddr_WVALID => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_WVALID,
        m_axi_ps_ddr_WREADY => m_axi_ps_ddr_WREADY,
        m_axi_ps_ddr_WDATA => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_WDATA,
        m_axi_ps_ddr_WSTRB => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_WSTRB,
        m_axi_ps_ddr_WLAST => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_WLAST,
        m_axi_ps_ddr_WID => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_WID,
        m_axi_ps_ddr_WUSER => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_WUSER,
        m_axi_ps_ddr_ARVALID => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_ARVALID,
        m_axi_ps_ddr_ARREADY => ap_const_logic_0,
        m_axi_ps_ddr_ARADDR => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_ARADDR,
        m_axi_ps_ddr_ARID => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_ARID,
        m_axi_ps_ddr_ARLEN => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_ARLEN,
        m_axi_ps_ddr_ARSIZE => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_ARSIZE,
        m_axi_ps_ddr_ARBURST => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_ARBURST,
        m_axi_ps_ddr_ARLOCK => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_ARLOCK,
        m_axi_ps_ddr_ARCACHE => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_ARCACHE,
        m_axi_ps_ddr_ARPROT => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_ARPROT,
        m_axi_ps_ddr_ARQOS => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_ARQOS,
        m_axi_ps_ddr_ARREGION => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_ARREGION,
        m_axi_ps_ddr_ARUSER => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_ARUSER,
        m_axi_ps_ddr_RVALID => ap_const_logic_0,
        m_axi_ps_ddr_RREADY => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_RREADY,
        m_axi_ps_ddr_RDATA => ap_const_lv8_0,
        m_axi_ps_ddr_RLAST => ap_const_logic_0,
        m_axi_ps_ddr_RID => ap_const_lv1_0,
        m_axi_ps_ddr_RFIFONUM => ap_const_lv11_0,
        m_axi_ps_ddr_RUSER => ap_const_lv1_0,
        m_axi_ps_ddr_RRESP => ap_const_lv2_0,
        m_axi_ps_ddr_BVALID => m_axi_ps_ddr_BVALID,
        m_axi_ps_ddr_BREADY => grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_BREADY,
        m_axi_ps_ddr_BRESP => m_axi_ps_ddr_BRESP,
        m_axi_ps_ddr_BID => m_axi_ps_ddr_BID,
        m_axi_ps_ddr_BUSER => m_axi_ps_ddr_BUSER,
        add_ln17 => add_ln17_reg_653,
        write_index_array_0 => write_index_array_0_reg_664,
        write_index_array_1 => write_index_array_1_reg_669,
        write_index_array_2 => write_index_array_2_reg_674,
        write_index_array_3 => write_index_array_3_reg_679);

    urem_32ns_32ns_32_36_seq_1_U59 : component clu_urem_32ns_32ns_32_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_364_ap_start,
        done => grp_fu_364_ap_done,
        din0 => grp_fu_364_p0,
        din1 => grp_fu_364_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_364_p2);

    mul_32s_8ns_32_1_1_U60 : component clu_mul_32s_8ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 32)
    port map (
        din0 => writeCanIndex_reg_589,
        din1 => mul_ln126_fu_388_p1,
        dout => mul_ln126_fu_388_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_write_ddr_1_Pipeline_1_fu_272_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_write_ddr_1_Pipeline_1_fu_272_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                    grp_write_ddr_1_Pipeline_1_fu_272_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_write_ddr_1_Pipeline_1_fu_272_ap_ready = ap_const_logic_1)) then 
                    grp_write_ddr_1_Pipeline_1_fu_272_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_write_ddr_1_Pipeline_2_fu_281_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_write_ddr_1_Pipeline_2_fu_281_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
                    grp_write_ddr_1_Pipeline_2_fu_281_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_write_ddr_1_Pipeline_2_fu_281_ap_ready = ap_const_logic_1)) then 
                    grp_write_ddr_1_Pipeline_2_fu_281_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    loop_index4_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (m_axi_ps_ddr_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                loop_index4_fu_102 <= ap_const_lv5_0;
            elsif (((exitcond66_fu_317_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                loop_index4_fu_102 <= empty_81_fu_323_p2;
            end if; 
        end if;
    end process;

    reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                reg_292 <= ringbuffer_header_bytes_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                reg_292 <= ringbuffer_header_bytes_q1;
            end if; 
        end if;
    end process;

    reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                reg_297 <= ringbuffer_header_bytes_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                reg_297 <= ringbuffer_header_bytes_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                add_ln120_1_reg_684 <= add_ln120_1_fu_485_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                add_ln126_1_reg_642 <= add_ln126_1_fu_409_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then
                add_ln17_reg_653 <= add_ln17_fu_420_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_ps_ddr_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                dropped_can_counter <= add_ln119_fu_473_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                icmp_ln118_reg_627 <= icmp_ln118_fu_382_p2;
                nextWriteCanIndex_reg_619 <= grp_fu_364_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                loop_index4_load_reg_511 <= loop_index4_fu_102;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln118_fu_382_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                mul_ln126_reg_631 <= mul_ln126_fu_388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln118_fu_382_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                ps_ddr_addr_4_reg_636 <= add_ln120_fu_393_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                ps_ddr_addr_read_reg_529 <= m_axi_ps_ddr_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                ringbuffer_header_bytes_load_13_reg_544 <= ringbuffer_header_bytes_q0;
                ringbuffer_header_bytes_load_14_reg_549 <= ringbuffer_header_bytes_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                ringbuffer_header_bytes_load_19_reg_564 <= ringbuffer_header_bytes_q0;
                ringbuffer_header_bytes_load_20_reg_569 <= ringbuffer_header_bytes_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                writeCanIndex_reg_589 <= writeCanIndex_fu_348_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                write_index_array_0_reg_664 <= nextWriteCanIndex_reg_619(31 downto 24);
                write_index_array_1_reg_669 <= nextWriteCanIndex_reg_619(23 downto 16);
                write_index_array_2_reg_674 <= nextWriteCanIndex_reg_619(15 downto 8);
                write_index_array_3_reg_679 <= write_index_array_3_fu_461_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_ps_ddr_AWREADY, m_axi_ps_ddr_WREADY, m_axi_ps_ddr_ARREADY, m_axi_ps_ddr_RVALID, m_axi_ps_ddr_BVALID, ap_CS_fsm_state9, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state51, ap_CS_fsm_state58, ap_CS_fsm_state65, icmp_ln118_reg_627, ap_CS_fsm_state8, exitcond66_fu_317_p2, ap_CS_fsm_state49, icmp_ln118_fu_382_p2, grp_write_ddr_1_Pipeline_1_fu_272_ap_done, grp_write_ddr_1_Pipeline_2_fu_281_ap_done, ap_CS_fsm_state53, ap_CS_fsm_state60)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (m_axi_ps_ddr_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((exitcond66_fu_317_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (m_axi_ps_ddr_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                if (((icmp_ln118_fu_382_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                if (((m_axi_ps_ddr_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                if (((grp_write_ddr_1_Pipeline_1_fu_272_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                if ((not(((m_axi_ps_ddr_AWREADY = ap_const_logic_0) or (m_axi_ps_ddr_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                if (((grp_write_ddr_1_Pipeline_2_fu_281_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state60))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                if ((not(((icmp_ln118_reg_627 = ap_const_lv1_0) and (m_axi_ps_ddr_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state66 => 
                if (((m_axi_ps_ddr_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state67 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state67) and (m_axi_ps_ddr_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state72) and (m_axi_ps_ddr_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln119_fu_473_p2 <= std_logic_vector(unsigned(dropped_can_counter) + unsigned(ap_const_lv16_1));
    add_ln120_1_fu_485_p2 <= std_logic_vector(unsigned(trunc_ln119_fu_469_p1) + unsigned(ap_const_lv8_1));
    add_ln120_fu_393_p2 <= std_logic_vector(unsigned(ddr_header) + unsigned(ap_const_lv32_4));
    add_ln126_1_fu_409_p2 <= std_logic_vector(unsigned(add_ln126_fu_404_p2) + unsigned(ddr_header));
    add_ln126_fu_404_p2 <= std_logic_vector(unsigned(mul_ln126_reg_631) + unsigned(ap_const_lv32_1C));
    add_ln17_fu_420_p2 <= std_logic_vector(unsigned(ddr_header) + unsigned(ap_const_lv32_18));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, m_axi_ps_ddr_ARREADY)
    begin
        if (((ap_start = ap_const_logic_0) or (m_axi_ps_ddr_ARREADY = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;

    ap_ST_fsm_state51_blk_assign_proc : process(m_axi_ps_ddr_AWREADY)
    begin
        if ((m_axi_ps_ddr_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state51_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state51_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state52_blk <= ap_const_logic_0;

    ap_ST_fsm_state53_blk_assign_proc : process(grp_write_ddr_1_Pipeline_1_fu_272_ap_done)
    begin
        if ((grp_write_ddr_1_Pipeline_1_fu_272_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state53_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state53_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;

    ap_ST_fsm_state58_blk_assign_proc : process(m_axi_ps_ddr_AWREADY, m_axi_ps_ddr_BVALID)
    begin
        if (((m_axi_ps_ddr_AWREADY = ap_const_logic_0) or (m_axi_ps_ddr_BVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state58_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state58_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state60_blk_assign_proc : process(grp_write_ddr_1_Pipeline_2_fu_281_ap_done)
    begin
        if ((grp_write_ddr_1_Pipeline_2_fu_281_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state60_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state60_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;

    ap_ST_fsm_state65_blk_assign_proc : process(m_axi_ps_ddr_BVALID, icmp_ln118_reg_627)
    begin
        if (((icmp_ln118_reg_627 = ap_const_lv1_0) and (m_axi_ps_ddr_BVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state65_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state65_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state66_blk_assign_proc : process(m_axi_ps_ddr_AWREADY)
    begin
        if ((m_axi_ps_ddr_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state66_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state66_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state67_blk_assign_proc : process(m_axi_ps_ddr_WREADY)
    begin
        if ((m_axi_ps_ddr_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state67_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state67_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;

    ap_ST_fsm_state72_blk_assign_proc : process(m_axi_ps_ddr_BVALID)
    begin
        if ((m_axi_ps_ddr_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state72_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state72_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_ST_fsm_state9_blk_assign_proc : process(m_axi_ps_ddr_RVALID)
    begin
        if ((m_axi_ps_ddr_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state65_assign_proc : process(m_axi_ps_ddr_BVALID, icmp_ln118_reg_627)
    begin
                ap_block_state65 <= ((icmp_ln118_reg_627 = ap_const_lv1_0) and (m_axi_ps_ddr_BVALID = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_ps_ddr_BVALID, ap_CS_fsm_state65, icmp_ln118_reg_627)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((icmp_ln118_reg_627 = ap_const_lv1_0) and (m_axi_ps_ddr_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state65)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_ps_ddr_BVALID, ap_CS_fsm_state65, icmp_ln118_reg_627)
    begin
        if ((not(((icmp_ln118_reg_627 = ap_const_lv1_0) and (m_axi_ps_ddr_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state65))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    data_address0 <= grp_write_ddr_1_Pipeline_1_fu_272_data_address0;
    data_ce0 <= grp_write_ddr_1_Pipeline_1_fu_272_data_ce0;
    empty_81_fu_323_p2 <= std_logic_vector(unsigned(loop_index4_fu_102) + unsigned(ap_const_lv5_1));
    exitcond66_fu_317_p2 <= "1" when (loop_index4_fu_102 = ap_const_lv5_1C) else "0";

    grp_fu_364_ap_start_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_364_ap_start <= ap_const_logic_1;
        else 
            grp_fu_364_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_364_p0 <= std_logic_vector(signed(writeCanIndex_fu_348_p5) + signed(ap_const_lv32_1));
    grp_fu_364_p1 <= (((reg_292 & reg_297) & ringbuffer_header_bytes_load_13_reg_544) & ringbuffer_header_bytes_load_14_reg_549);
    grp_write_ddr_1_Pipeline_1_fu_272_ap_start <= grp_write_ddr_1_Pipeline_1_fu_272_ap_start_reg;
    grp_write_ddr_1_Pipeline_2_fu_281_ap_start <= grp_write_ddr_1_Pipeline_2_fu_281_ap_start_reg;
    icmp_ln118_fu_382_p2 <= "1" when (grp_fu_364_p2 = readCanIndex_fu_370_p5) else "0";
    loop_index4_cast_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index4_load_reg_511),32));
    m_axi_ps_ddr_ARADDR <= ddr_header;
    m_axi_ps_ddr_ARBURST <= ap_const_lv2_0;
    m_axi_ps_ddr_ARCACHE <= ap_const_lv4_0;
    m_axi_ps_ddr_ARID <= ap_const_lv1_0;
    m_axi_ps_ddr_ARLEN <= ap_const_lv32_1C;
    m_axi_ps_ddr_ARLOCK <= ap_const_lv2_0;
    m_axi_ps_ddr_ARPROT <= ap_const_lv3_0;
    m_axi_ps_ddr_ARQOS <= ap_const_lv4_0;
    m_axi_ps_ddr_ARREGION <= ap_const_lv4_0;
    m_axi_ps_ddr_ARSIZE <= ap_const_lv3_0;
    m_axi_ps_ddr_ARUSER <= ap_const_lv1_0;

    m_axi_ps_ddr_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_ps_ddr_ARREADY)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (m_axi_ps_ddr_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_ps_ddr_ARVALID <= ap_const_logic_1;
        else 
            m_axi_ps_ddr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_ps_ddr_AWADDR_assign_proc : process(m_axi_ps_ddr_AWREADY, m_axi_ps_ddr_BVALID, ap_CS_fsm_state66, ap_CS_fsm_state51, ap_CS_fsm_state58, ps_ddr_addr_4_reg_636, add_ln126_1_reg_642, add_ln17_reg_653, ap_CS_fsm_state59, grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWADDR, grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWADDR, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state60)
    begin
        if (((m_axi_ps_ddr_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            m_axi_ps_ddr_AWADDR <= ps_ddr_addr_4_reg_636;
        elsif ((not(((m_axi_ps_ddr_AWREADY = ap_const_logic_0) or (m_axi_ps_ddr_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            m_axi_ps_ddr_AWADDR <= add_ln17_reg_653;
        elsif (((m_axi_ps_ddr_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            m_axi_ps_ddr_AWADDR <= add_ln126_1_reg_642;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            m_axi_ps_ddr_AWADDR <= grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            m_axi_ps_ddr_AWADDR <= grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWADDR;
        else 
            m_axi_ps_ddr_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_ps_ddr_AWBURST_assign_proc : process(ap_CS_fsm_state59, grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWBURST, grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWBURST, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            m_axi_ps_ddr_AWBURST <= grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            m_axi_ps_ddr_AWBURST <= grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWBURST;
        else 
            m_axi_ps_ddr_AWBURST <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_ps_ddr_AWCACHE_assign_proc : process(ap_CS_fsm_state59, grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWCACHE, grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWCACHE, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            m_axi_ps_ddr_AWCACHE <= grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            m_axi_ps_ddr_AWCACHE <= grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWCACHE;
        else 
            m_axi_ps_ddr_AWCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_ps_ddr_AWID_assign_proc : process(ap_CS_fsm_state59, grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWID, grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWID, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            m_axi_ps_ddr_AWID <= grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            m_axi_ps_ddr_AWID <= grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWID;
        else 
            m_axi_ps_ddr_AWID <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_ps_ddr_AWLEN_assign_proc : process(m_axi_ps_ddr_AWREADY, m_axi_ps_ddr_BVALID, ap_CS_fsm_state66, ap_CS_fsm_state51, ap_CS_fsm_state58, ap_CS_fsm_state59, grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWLEN, grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWLEN, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state60)
    begin
        if (((m_axi_ps_ddr_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            m_axi_ps_ddr_AWLEN <= ap_const_lv32_1;
        elsif ((not(((m_axi_ps_ddr_AWREADY = ap_const_logic_0) or (m_axi_ps_ddr_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            m_axi_ps_ddr_AWLEN <= ap_const_lv32_4;
        elsif (((m_axi_ps_ddr_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            m_axi_ps_ddr_AWLEN <= ap_const_lv32_5C;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            m_axi_ps_ddr_AWLEN <= grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            m_axi_ps_ddr_AWLEN <= grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWLEN;
        else 
            m_axi_ps_ddr_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_ps_ddr_AWLOCK_assign_proc : process(ap_CS_fsm_state59, grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWLOCK, grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWLOCK, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            m_axi_ps_ddr_AWLOCK <= grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            m_axi_ps_ddr_AWLOCK <= grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWLOCK;
        else 
            m_axi_ps_ddr_AWLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_ps_ddr_AWPROT_assign_proc : process(ap_CS_fsm_state59, grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWPROT, grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWPROT, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            m_axi_ps_ddr_AWPROT <= grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            m_axi_ps_ddr_AWPROT <= grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWPROT;
        else 
            m_axi_ps_ddr_AWPROT <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_ps_ddr_AWQOS_assign_proc : process(ap_CS_fsm_state59, grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWQOS, grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWQOS, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            m_axi_ps_ddr_AWQOS <= grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            m_axi_ps_ddr_AWQOS <= grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWQOS;
        else 
            m_axi_ps_ddr_AWQOS <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_ps_ddr_AWREGION_assign_proc : process(ap_CS_fsm_state59, grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWREGION, grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWREGION, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            m_axi_ps_ddr_AWREGION <= grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            m_axi_ps_ddr_AWREGION <= grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWREGION;
        else 
            m_axi_ps_ddr_AWREGION <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_ps_ddr_AWSIZE_assign_proc : process(ap_CS_fsm_state59, grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWSIZE, grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWSIZE, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            m_axi_ps_ddr_AWSIZE <= grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            m_axi_ps_ddr_AWSIZE <= grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWSIZE;
        else 
            m_axi_ps_ddr_AWSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_ps_ddr_AWUSER_assign_proc : process(ap_CS_fsm_state59, grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWUSER, grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWUSER, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            m_axi_ps_ddr_AWUSER <= grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            m_axi_ps_ddr_AWUSER <= grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWUSER;
        else 
            m_axi_ps_ddr_AWUSER <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_ps_ddr_AWVALID_assign_proc : process(m_axi_ps_ddr_AWREADY, m_axi_ps_ddr_BVALID, ap_CS_fsm_state66, ap_CS_fsm_state51, ap_CS_fsm_state58, ap_CS_fsm_state59, grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWVALID, grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWVALID, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state60)
    begin
        if (((not(((m_axi_ps_ddr_AWREADY = ap_const_logic_0) or (m_axi_ps_ddr_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state58)) or ((m_axi_ps_ddr_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((m_axi_ps_ddr_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66)))) then 
            m_axi_ps_ddr_AWVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            m_axi_ps_ddr_AWVALID <= grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_AWVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            m_axi_ps_ddr_AWVALID <= grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_AWVALID;
        else 
            m_axi_ps_ddr_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_ps_ddr_BREADY_assign_proc : process(m_axi_ps_ddr_AWREADY, m_axi_ps_ddr_BVALID, ap_CS_fsm_state72, ap_CS_fsm_state58, ap_CS_fsm_state65, icmp_ln118_reg_627, ap_CS_fsm_state59, grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_BREADY, grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_BREADY, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state60)
    begin
        if (((not(((icmp_ln118_reg_627 = ap_const_lv1_0) and (m_axi_ps_ddr_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state65) and (icmp_ln118_reg_627 = ap_const_lv1_0)) or (not(((m_axi_ps_ddr_AWREADY = ap_const_logic_0) or (m_axi_ps_ddr_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state58)) or ((ap_const_logic_1 = ap_CS_fsm_state72) and (m_axi_ps_ddr_BVALID = ap_const_logic_1)))) then 
            m_axi_ps_ddr_BREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            m_axi_ps_ddr_BREADY <= grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_BREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            m_axi_ps_ddr_BREADY <= grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_BREADY;
        else 
            m_axi_ps_ddr_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_ps_ddr_RREADY_assign_proc : process(m_axi_ps_ddr_RVALID, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (m_axi_ps_ddr_RVALID = ap_const_logic_1))) then 
            m_axi_ps_ddr_RREADY <= ap_const_logic_1;
        else 
            m_axi_ps_ddr_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_ps_ddr_WDATA_assign_proc : process(ap_CS_fsm_state67, ap_CS_fsm_state59, add_ln120_1_reg_684, grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_WDATA, grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_WDATA, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            m_axi_ps_ddr_WDATA <= add_ln120_1_reg_684;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            m_axi_ps_ddr_WDATA <= grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_WDATA;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            m_axi_ps_ddr_WDATA <= grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_WDATA;
        else 
            m_axi_ps_ddr_WDATA <= "XXXXXXXX";
        end if; 
    end process;


    m_axi_ps_ddr_WID_assign_proc : process(ap_CS_fsm_state59, grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_WID, grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_WID, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            m_axi_ps_ddr_WID <= grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_WID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            m_axi_ps_ddr_WID <= grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_WID;
        else 
            m_axi_ps_ddr_WID <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_ps_ddr_WLAST_assign_proc : process(ap_CS_fsm_state59, grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_WLAST, grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_WLAST, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            m_axi_ps_ddr_WLAST <= grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_WLAST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            m_axi_ps_ddr_WLAST <= grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_WLAST;
        else 
            m_axi_ps_ddr_WLAST <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_ps_ddr_WSTRB_assign_proc : process(ap_CS_fsm_state67, ap_CS_fsm_state59, grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_WSTRB, grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_WSTRB, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            m_axi_ps_ddr_WSTRB <= ap_const_lv1_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            m_axi_ps_ddr_WSTRB <= grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_WSTRB;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            m_axi_ps_ddr_WSTRB <= grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_WSTRB;
        else 
            m_axi_ps_ddr_WSTRB <= "X";
        end if; 
    end process;


    m_axi_ps_ddr_WUSER_assign_proc : process(ap_CS_fsm_state59, grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_WUSER, grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_WUSER, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            m_axi_ps_ddr_WUSER <= grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_WUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            m_axi_ps_ddr_WUSER <= grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_WUSER;
        else 
            m_axi_ps_ddr_WUSER <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_ps_ddr_WVALID_assign_proc : process(m_axi_ps_ddr_WREADY, ap_CS_fsm_state67, ap_CS_fsm_state59, grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_WVALID, grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_WVALID, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state67) and (m_axi_ps_ddr_WREADY = ap_const_logic_1))) then 
            m_axi_ps_ddr_WVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            m_axi_ps_ddr_WVALID <= grp_write_ddr_1_Pipeline_2_fu_281_m_axi_ps_ddr_WVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            m_axi_ps_ddr_WVALID <= grp_write_ddr_1_Pipeline_1_fu_272_m_axi_ps_ddr_WVALID;
        else 
            m_axi_ps_ddr_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln126_fu_388_p1 <= ap_const_lv32_5C(8 - 1 downto 0);

    ps_ddr_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_ps_ddr_ARREADY)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ps_ddr_blk_n_AR <= m_axi_ps_ddr_ARREADY;
        else 
            ps_ddr_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    ps_ddr_blk_n_AW_assign_proc : process(m_axi_ps_ddr_AWREADY, ap_CS_fsm_state66, ap_CS_fsm_state51, ap_CS_fsm_state58)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            ps_ddr_blk_n_AW <= m_axi_ps_ddr_AWREADY;
        else 
            ps_ddr_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    ps_ddr_blk_n_B_assign_proc : process(m_axi_ps_ddr_BVALID, ap_CS_fsm_state72, ap_CS_fsm_state58, ap_CS_fsm_state65, icmp_ln118_reg_627)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state72) or ((ap_const_logic_1 = ap_CS_fsm_state65) and (icmp_ln118_reg_627 = ap_const_lv1_0)))) then 
            ps_ddr_blk_n_B <= m_axi_ps_ddr_BVALID;
        else 
            ps_ddr_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    ps_ddr_blk_n_R_assign_proc : process(m_axi_ps_ddr_RVALID, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ps_ddr_blk_n_R <= m_axi_ps_ddr_RVALID;
        else 
            ps_ddr_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    ps_ddr_blk_n_W_assign_proc : process(m_axi_ps_ddr_WREADY, ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            ps_ddr_blk_n_W <= m_axi_ps_ddr_WREADY;
        else 
            ps_ddr_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    readCanIndex_fu_370_p5 <= (((reg_292 & reg_297) & ringbuffer_header_bytes_q0) & ringbuffer_header_bytes_q1);

    ringbuffer_header_bytes_address0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state48, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state47, loop_index4_cast_fu_334_p1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            ringbuffer_header_bytes_address0 <= ap_const_lv32_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            ringbuffer_header_bytes_address0 <= ap_const_lv32_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ringbuffer_header_bytes_address0 <= ap_const_lv32_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ringbuffer_header_bytes_address0 <= ap_const_lv32_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ringbuffer_header_bytes_address0 <= ap_const_lv32_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ringbuffer_header_bytes_address0 <= loop_index4_cast_fu_334_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ringbuffer_header_bytes_address0 <= ap_const_lv32_D(5 - 1 downto 0);
        else 
            ringbuffer_header_bytes_address0 <= "XXXXX";
        end if; 
    end process;


    ringbuffer_header_bytes_address1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state48, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            ringbuffer_header_bytes_address1 <= ap_const_lv32_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            ringbuffer_header_bytes_address1 <= ap_const_lv32_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ringbuffer_header_bytes_address1 <= ap_const_lv32_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ringbuffer_header_bytes_address1 <= ap_const_lv32_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ringbuffer_header_bytes_address1 <= ap_const_lv32_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ringbuffer_header_bytes_address1 <= ap_const_lv32_C(5 - 1 downto 0);
        else 
            ringbuffer_header_bytes_address1 <= "XXXXX";
        end if; 
    end process;


    ringbuffer_header_bytes_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state48, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state47, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ringbuffer_header_bytes_ce0 <= ap_const_logic_1;
        else 
            ringbuffer_header_bytes_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ringbuffer_header_bytes_ce1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state48, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ringbuffer_header_bytes_ce1 <= ap_const_logic_1;
        else 
            ringbuffer_header_bytes_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ringbuffer_header_bytes_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ringbuffer_header_bytes_we0 <= ap_const_logic_1;
        else 
            ringbuffer_header_bytes_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln119_fu_469_p1 <= dropped_can_counter(8 - 1 downto 0);
    writeCanIndex_fu_348_p5 <= (((ringbuffer_header_bytes_load_19_reg_564 & ringbuffer_header_bytes_load_20_reg_569) & ringbuffer_header_bytes_q0) & ringbuffer_header_bytes_q1);
    write_index_array_3_fu_461_p1 <= nextWriteCanIndex_reg_619(8 - 1 downto 0);
end behav;
