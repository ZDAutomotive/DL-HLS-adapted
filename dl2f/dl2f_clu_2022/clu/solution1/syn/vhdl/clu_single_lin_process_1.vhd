-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity clu_single_lin_process_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_lin_addr_AWVALID : OUT STD_LOGIC;
    m_axi_lin_addr_AWREADY : IN STD_LOGIC;
    m_axi_lin_addr_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_lin_addr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lin_addr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_lin_addr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_lin_addr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_lin_addr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_lin_addr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lin_addr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_lin_addr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lin_addr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lin_addr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lin_addr_WVALID : OUT STD_LOGIC;
    m_axi_lin_addr_WREADY : IN STD_LOGIC;
    m_axi_lin_addr_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_lin_addr_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lin_addr_WLAST : OUT STD_LOGIC;
    m_axi_lin_addr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lin_addr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lin_addr_ARVALID : OUT STD_LOGIC;
    m_axi_lin_addr_ARREADY : IN STD_LOGIC;
    m_axi_lin_addr_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_lin_addr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lin_addr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_lin_addr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_lin_addr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_lin_addr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_lin_addr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lin_addr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_lin_addr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lin_addr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lin_addr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lin_addr_RVALID : IN STD_LOGIC;
    m_axi_lin_addr_RREADY : OUT STD_LOGIC;
    m_axi_lin_addr_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_lin_addr_RLAST : IN STD_LOGIC;
    m_axi_lin_addr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lin_addr_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_lin_addr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lin_addr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_lin_addr_BVALID : IN STD_LOGIC;
    m_axi_lin_addr_BREADY : OUT STD_LOGIC;
    m_axi_lin_addr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_lin_addr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lin_addr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    linbase : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ps_ddr_AWVALID : OUT STD_LOGIC;
    m_axi_ps_ddr_AWREADY : IN STD_LOGIC;
    m_axi_ps_ddr_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ps_ddr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ps_ddr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ps_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ps_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ps_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ps_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ps_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ps_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ps_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ps_ddr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ps_ddr_WVALID : OUT STD_LOGIC;
    m_axi_ps_ddr_WREADY : IN STD_LOGIC;
    m_axi_ps_ddr_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ps_ddr_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ps_ddr_WLAST : OUT STD_LOGIC;
    m_axi_ps_ddr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ps_ddr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ps_ddr_ARVALID : OUT STD_LOGIC;
    m_axi_ps_ddr_ARREADY : IN STD_LOGIC;
    m_axi_ps_ddr_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ps_ddr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ps_ddr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ps_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ps_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ps_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ps_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ps_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ps_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ps_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ps_ddr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ps_ddr_RVALID : IN STD_LOGIC;
    m_axi_ps_ddr_RREADY : OUT STD_LOGIC;
    m_axi_ps_ddr_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ps_ddr_RLAST : IN STD_LOGIC;
    m_axi_ps_ddr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ps_ddr_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_ps_ddr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ps_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ps_ddr_BVALID : IN STD_LOGIC;
    m_axi_ps_ddr_BREADY : OUT STD_LOGIC;
    m_axi_ps_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ps_ddr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ps_ddr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    ddr : IN STD_LOGIC_VECTOR (31 downto 0);
    timestamp : IN STD_LOGIC_VECTOR (63 downto 0);
    EN : IN STD_LOGIC_VECTOR (3 downto 0);
    received_lin : OUT STD_LOGIC_VECTOR (31 downto 0);
    received_lin_ap_vld : OUT STD_LOGIC );
end;


architecture behav of clu_single_lin_process_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (43 downto 0) := "00000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (43 downto 0) := "00000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (43 downto 0) := "00000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (43 downto 0) := "00000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (43 downto 0) := "00000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (43 downto 0) := "00000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (43 downto 0) := "00001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (43 downto 0) := "00010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (43 downto 0) := "00100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (43 downto 0) := "01000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (43 downto 0) := "10000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal PLIN_Ctrl_run_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal PLIN_Ctrl_run_state_ce0 : STD_LOGIC;
    signal PLIN_Ctrl_run_state_we0 : STD_LOGIC;
    signal PLIN_Ctrl_run_state_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal PLIN_Ctrl_run_state_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal PL_Data : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal internal_lin_counter : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal lin_addr_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal lin_addr_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal lin_addr_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal lin_addr_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal lin_addr_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal reg_459 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal icmp_ln164_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal EN_cast_fu_463_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal EN_cast_reg_790 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln_reg_798 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond181_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lin_addr_addr_reg_803 : STD_LOGIC_VECTOR (31 downto 0);
    signal PLIN_Ctrl_run_state_addr_reg_810 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal PLIN_Ctrl_run_state_load_reg_815 : STD_LOGIC_VECTOR (0 downto 0);
    signal lin_addr_addr_read_reg_819 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln140_fu_526_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln81_2_reg_830 : STD_LOGIC_VECTOR (29 downto 0);
    signal icmp_ln164_reg_847 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_851 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln_reg_855 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln81_4_reg_867 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal zext_ln176_fu_652_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln176_reg_872 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal add_ln176_fu_655_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln176_reg_877 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln6_reg_882 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal trunc_ln7_reg_887 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln8_reg_892 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln9_reg_897 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1_reg_902 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln189_fu_727_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln189_reg_907 : STD_LOGIC_VECTOR (7 downto 0);
    signal lin_frame_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal lin_frame_ce0 : STD_LOGIC;
    signal lin_frame_we0 : STD_LOGIC;
    signal lin_frame_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lin_frame_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lin_frame_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal lin_frame_ce1 : STD_LOGIC;
    signal lin_frame_we1 : STD_LOGIC;
    signal lin_frame_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_ap_start : STD_LOGIC;
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_ap_done : STD_LOGIC;
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_ap_idle : STD_LOGIC;
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_ap_ready : STD_LOGIC;
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_AWVALID : STD_LOGIC;
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_WVALID : STD_LOGIC;
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_WLAST : STD_LOGIC;
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARVALID : STD_LOGIC;
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_RREADY : STD_LOGIC;
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_BREADY : STD_LOGIC;
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_lin_frame_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_lin_frame_ce0 : STD_LOGIC;
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_lin_frame_we0 : STD_LOGIC;
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_lin_frame_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_write_lin_ddr_1_fu_434_ap_start : STD_LOGIC;
    signal grp_write_lin_ddr_1_fu_434_ap_done : STD_LOGIC;
    signal grp_write_lin_ddr_1_fu_434_ap_idle : STD_LOGIC;
    signal grp_write_lin_ddr_1_fu_434_ap_ready : STD_LOGIC;
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWVALID : STD_LOGIC;
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_WVALID : STD_LOGIC;
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_WLAST : STD_LOGIC;
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARVALID : STD_LOGIC;
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_RREADY : STD_LOGIC;
    signal grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_BREADY : STD_LOGIC;
    signal grp_write_lin_ddr_1_fu_434_data_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_write_lin_ddr_1_fu_434_data_ce0 : STD_LOGIC;
    signal grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_write_lin_ddr_1_fu_434_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_predicate_op193_call_state44 : BOOLEAN;
    signal ap_block_state44_on_subcall_done : BOOLEAN;
    signal p_cast_fu_487_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln140_fu_522_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal sext_ln81_fu_512_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln81_1_fu_545_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln87_fu_555_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln87_1_fu_632_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state18_io : BOOLEAN;
    signal reg_lid_fu_566_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln200_fu_619_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_156 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_66_fu_481_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln193_fu_735_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln196_fu_744_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln172_fu_749_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_444_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln81_fu_497_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln81_1_fu_530_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_576_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_591_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln193_fu_730_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (43 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component clu_single_lin_process_1_Pipeline_VITIS_LOOP_176_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_lin_addr_AWVALID : OUT STD_LOGIC;
        m_axi_lin_addr_AWREADY : IN STD_LOGIC;
        m_axi_lin_addr_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_lin_addr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lin_addr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_lin_addr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_lin_addr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_lin_addr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_lin_addr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_lin_addr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_lin_addr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_lin_addr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_lin_addr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lin_addr_WVALID : OUT STD_LOGIC;
        m_axi_lin_addr_WREADY : IN STD_LOGIC;
        m_axi_lin_addr_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_lin_addr_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_lin_addr_WLAST : OUT STD_LOGIC;
        m_axi_lin_addr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lin_addr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lin_addr_ARVALID : OUT STD_LOGIC;
        m_axi_lin_addr_ARREADY : IN STD_LOGIC;
        m_axi_lin_addr_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_lin_addr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lin_addr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_lin_addr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_lin_addr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_lin_addr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_lin_addr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_lin_addr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_lin_addr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_lin_addr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_lin_addr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lin_addr_RVALID : IN STD_LOGIC;
        m_axi_lin_addr_RREADY : OUT STD_LOGIC;
        m_axi_lin_addr_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_lin_addr_RLAST : IN STD_LOGIC;
        m_axi_lin_addr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lin_addr_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_lin_addr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lin_addr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_lin_addr_BVALID : IN STD_LOGIC;
        m_axi_lin_addr_BREADY : OUT STD_LOGIC;
        m_axi_lin_addr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_lin_addr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lin_addr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln81_2 : IN STD_LOGIC_VECTOR (29 downto 0);
        add_ln176 : IN STD_LOGIC_VECTOR (4 downto 0);
        lin_frame_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        lin_frame_ce0 : OUT STD_LOGIC;
        lin_frame_we0 : OUT STD_LOGIC;
        lin_frame_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clu_write_lin_ddr_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_ps_ddr_AWVALID : OUT STD_LOGIC;
        m_axi_ps_ddr_AWREADY : IN STD_LOGIC;
        m_axi_ps_ddr_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ps_ddr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ps_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ps_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ps_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_WVALID : OUT STD_LOGIC;
        m_axi_ps_ddr_WREADY : IN STD_LOGIC;
        m_axi_ps_ddr_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_ps_ddr_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_WLAST : OUT STD_LOGIC;
        m_axi_ps_ddr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_ARVALID : OUT STD_LOGIC;
        m_axi_ps_ddr_ARREADY : IN STD_LOGIC;
        m_axi_ps_ddr_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ps_ddr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ps_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ps_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ps_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ps_ddr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_RVALID : IN STD_LOGIC;
        m_axi_ps_ddr_RREADY : OUT STD_LOGIC;
        m_axi_ps_ddr_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_ps_ddr_RLAST : IN STD_LOGIC;
        m_axi_ps_ddr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_ps_ddr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_BVALID : IN STD_LOGIC;
        m_axi_ps_ddr_BREADY : OUT STD_LOGIC;
        m_axi_ps_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ps_ddr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ps_ddr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        ddr_header : IN STD_LOGIC_VECTOR (31 downto 0);
        data_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_ce0 : OUT STD_LOGIC;
        data_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clu_single_lin_process_1_PLIN_Ctrl_run_state_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component clu_single_lin_process_1_lin_frame_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    PLIN_Ctrl_run_state_U : component clu_single_lin_process_1_PLIN_Ctrl_run_state_RAM_AUTO_1R1W
    generic map (
        DataWidth => 1,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => PLIN_Ctrl_run_state_address0,
        ce0 => PLIN_Ctrl_run_state_ce0,
        we0 => PLIN_Ctrl_run_state_we0,
        d0 => PLIN_Ctrl_run_state_d0,
        q0 => PLIN_Ctrl_run_state_q0);

    lin_frame_U : component clu_single_lin_process_1_lin_frame_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lin_frame_address0,
        ce0 => lin_frame_ce0,
        we0 => lin_frame_we0,
        d0 => lin_frame_d0,
        q0 => lin_frame_q0,
        address1 => lin_frame_address1,
        ce1 => lin_frame_ce1,
        we1 => lin_frame_we1,
        d1 => lin_frame_d1);

    grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425 : component clu_single_lin_process_1_Pipeline_VITIS_LOOP_176_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_ap_start,
        ap_done => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_ap_done,
        ap_idle => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_ap_idle,
        ap_ready => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_ap_ready,
        m_axi_lin_addr_AWVALID => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_AWVALID,
        m_axi_lin_addr_AWREADY => ap_const_logic_0,
        m_axi_lin_addr_AWADDR => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_AWADDR,
        m_axi_lin_addr_AWID => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_AWID,
        m_axi_lin_addr_AWLEN => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_AWLEN,
        m_axi_lin_addr_AWSIZE => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_AWSIZE,
        m_axi_lin_addr_AWBURST => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_AWBURST,
        m_axi_lin_addr_AWLOCK => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_AWLOCK,
        m_axi_lin_addr_AWCACHE => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_AWCACHE,
        m_axi_lin_addr_AWPROT => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_AWPROT,
        m_axi_lin_addr_AWQOS => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_AWQOS,
        m_axi_lin_addr_AWREGION => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_AWREGION,
        m_axi_lin_addr_AWUSER => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_AWUSER,
        m_axi_lin_addr_WVALID => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_WVALID,
        m_axi_lin_addr_WREADY => ap_const_logic_0,
        m_axi_lin_addr_WDATA => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_WDATA,
        m_axi_lin_addr_WSTRB => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_WSTRB,
        m_axi_lin_addr_WLAST => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_WLAST,
        m_axi_lin_addr_WID => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_WID,
        m_axi_lin_addr_WUSER => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_WUSER,
        m_axi_lin_addr_ARVALID => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARVALID,
        m_axi_lin_addr_ARREADY => m_axi_lin_addr_ARREADY,
        m_axi_lin_addr_ARADDR => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARADDR,
        m_axi_lin_addr_ARID => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARID,
        m_axi_lin_addr_ARLEN => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARLEN,
        m_axi_lin_addr_ARSIZE => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARSIZE,
        m_axi_lin_addr_ARBURST => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARBURST,
        m_axi_lin_addr_ARLOCK => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARLOCK,
        m_axi_lin_addr_ARCACHE => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARCACHE,
        m_axi_lin_addr_ARPROT => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARPROT,
        m_axi_lin_addr_ARQOS => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARQOS,
        m_axi_lin_addr_ARREGION => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARREGION,
        m_axi_lin_addr_ARUSER => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARUSER,
        m_axi_lin_addr_RVALID => m_axi_lin_addr_RVALID,
        m_axi_lin_addr_RREADY => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_RREADY,
        m_axi_lin_addr_RDATA => m_axi_lin_addr_RDATA,
        m_axi_lin_addr_RLAST => m_axi_lin_addr_RLAST,
        m_axi_lin_addr_RID => m_axi_lin_addr_RID,
        m_axi_lin_addr_RFIFONUM => m_axi_lin_addr_RFIFONUM,
        m_axi_lin_addr_RUSER => m_axi_lin_addr_RUSER,
        m_axi_lin_addr_RRESP => m_axi_lin_addr_RRESP,
        m_axi_lin_addr_BVALID => ap_const_logic_0,
        m_axi_lin_addr_BREADY => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_BREADY,
        m_axi_lin_addr_BRESP => ap_const_lv2_0,
        m_axi_lin_addr_BID => ap_const_lv1_0,
        m_axi_lin_addr_BUSER => ap_const_lv1_0,
        sext_ln81_2 => trunc_ln81_4_reg_867,
        add_ln176 => add_ln176_reg_877,
        lin_frame_address0 => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_lin_frame_address0,
        lin_frame_ce0 => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_lin_frame_ce0,
        lin_frame_we0 => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_lin_frame_we0,
        lin_frame_d0 => grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_lin_frame_d0);

    grp_write_lin_ddr_1_fu_434 : component clu_write_lin_ddr_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_write_lin_ddr_1_fu_434_ap_start,
        ap_done => grp_write_lin_ddr_1_fu_434_ap_done,
        ap_idle => grp_write_lin_ddr_1_fu_434_ap_idle,
        ap_ready => grp_write_lin_ddr_1_fu_434_ap_ready,
        m_axi_ps_ddr_AWVALID => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWVALID,
        m_axi_ps_ddr_AWREADY => m_axi_ps_ddr_AWREADY,
        m_axi_ps_ddr_AWADDR => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWADDR,
        m_axi_ps_ddr_AWID => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWID,
        m_axi_ps_ddr_AWLEN => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWLEN,
        m_axi_ps_ddr_AWSIZE => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWSIZE,
        m_axi_ps_ddr_AWBURST => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWBURST,
        m_axi_ps_ddr_AWLOCK => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWLOCK,
        m_axi_ps_ddr_AWCACHE => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWCACHE,
        m_axi_ps_ddr_AWPROT => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWPROT,
        m_axi_ps_ddr_AWQOS => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWQOS,
        m_axi_ps_ddr_AWREGION => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWREGION,
        m_axi_ps_ddr_AWUSER => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWUSER,
        m_axi_ps_ddr_WVALID => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_WVALID,
        m_axi_ps_ddr_WREADY => m_axi_ps_ddr_WREADY,
        m_axi_ps_ddr_WDATA => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_WDATA,
        m_axi_ps_ddr_WSTRB => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_WSTRB,
        m_axi_ps_ddr_WLAST => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_WLAST,
        m_axi_ps_ddr_WID => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_WID,
        m_axi_ps_ddr_WUSER => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_WUSER,
        m_axi_ps_ddr_ARVALID => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARVALID,
        m_axi_ps_ddr_ARREADY => m_axi_ps_ddr_ARREADY,
        m_axi_ps_ddr_ARADDR => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARADDR,
        m_axi_ps_ddr_ARID => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARID,
        m_axi_ps_ddr_ARLEN => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARLEN,
        m_axi_ps_ddr_ARSIZE => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARSIZE,
        m_axi_ps_ddr_ARBURST => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARBURST,
        m_axi_ps_ddr_ARLOCK => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARLOCK,
        m_axi_ps_ddr_ARCACHE => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARCACHE,
        m_axi_ps_ddr_ARPROT => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARPROT,
        m_axi_ps_ddr_ARQOS => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARQOS,
        m_axi_ps_ddr_ARREGION => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARREGION,
        m_axi_ps_ddr_ARUSER => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARUSER,
        m_axi_ps_ddr_RVALID => m_axi_ps_ddr_RVALID,
        m_axi_ps_ddr_RREADY => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_RREADY,
        m_axi_ps_ddr_RDATA => m_axi_ps_ddr_RDATA,
        m_axi_ps_ddr_RLAST => m_axi_ps_ddr_RLAST,
        m_axi_ps_ddr_RID => m_axi_ps_ddr_RID,
        m_axi_ps_ddr_RFIFONUM => m_axi_ps_ddr_RFIFONUM,
        m_axi_ps_ddr_RUSER => m_axi_ps_ddr_RUSER,
        m_axi_ps_ddr_RRESP => m_axi_ps_ddr_RRESP,
        m_axi_ps_ddr_BVALID => m_axi_ps_ddr_BVALID,
        m_axi_ps_ddr_BREADY => grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_BREADY,
        m_axi_ps_ddr_BRESP => m_axi_ps_ddr_BRESP,
        m_axi_ps_ddr_BID => m_axi_ps_ddr_BID,
        m_axi_ps_ddr_BUSER => m_axi_ps_ddr_BUSER,
        ddr_header => ddr,
        data_address0 => grp_write_lin_ddr_1_fu_434_data_address0,
        data_ce0 => grp_write_lin_ddr_1_fu_434_data_ce0,
        data_q0 => lin_frame_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                    grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_ap_ready = ap_const_logic_1)) then 
                    grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_write_lin_ddr_1_fu_434_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_write_lin_ddr_1_fu_434_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                    grp_write_lin_ddr_1_fu_434_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_write_lin_ddr_1_fu_434_ap_ready = ap_const_logic_1)) then 
                    grp_write_lin_ddr_1_fu_434_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_fu_156 <= ap_const_lv5_0;
            elsif (((exitcond181_fu_475_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                empty_fu_156 <= empty_66_fu_481_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    EN_cast_reg_790(3 downto 0) <= EN_cast_fu_463_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                PLIN_Ctrl_run_state_addr_reg_810 <= zext_ln140_fu_522_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                PLIN_Ctrl_run_state_load_reg_815 <= PLIN_Ctrl_run_state_q0;
                lin_addr_addr_read_reg_819 <= m_axi_lin_addr_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state18_io) or (m_axi_lin_addr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                PL_Data <= reg_lid_fu_566_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                add_ln176_reg_877 <= add_ln176_fu_655_p2;
                    zext_ln176_reg_872(3 downto 0) <= zext_ln176_fu_652_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                icmp_ln164_reg_847 <= icmp_ln164_fu_585_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln164_fu_585_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                icmp_ln167_reg_851 <= icmp_ln167_fu_600_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln167_fu_600_p2 = ap_const_lv1_1) and (icmp_ln164_fu_585_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                internal_lin_counter <= add_ln200_fu_619_p2;
                lshr_ln_reg_855 <= lin_addr_addr_read_reg_819(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                lin_addr_addr_reg_803 <= sext_ln81_fu_512_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((icmp_ln167_fu_600_p2 = ap_const_lv1_1) and (icmp_ln164_fu_585_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25)))) then
                reg_459 <= grp_fu_444_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                trunc_ln189_reg_907 <= trunc_ln189_fu_727_p1;
                trunc_ln1_reg_902 <= timestamp(15 downto 8);
                trunc_ln6_reg_882 <= timestamp(47 downto 40);
                trunc_ln7_reg_887 <= timestamp(39 downto 32);
                trunc_ln8_reg_892 <= timestamp(31 downto 24);
                trunc_ln9_reg_897 <= timestamp(23 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln140_fu_526_p1 = ap_const_lv1_1) and (ap_const_lv1_0 = PLIN_Ctrl_run_state_q0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                trunc_ln81_2_reg_830 <= add_ln81_1_fu_530_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                trunc_ln81_4_reg_867 <= linbase(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond181_fu_475_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln_reg_798 <= add_ln81_fu_497_p2(31 downto 2);
            end if;
        end if;
    end process;
    EN_cast_reg_790(7 downto 4) <= "0000";
    zext_ln176_reg_872(4) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_lin_addr_AWREADY, m_axi_lin_addr_WREADY, m_axi_lin_addr_ARREADY, m_axi_lin_addr_RVALID, m_axi_lin_addr_BVALID, PLIN_Ctrl_run_state_q0, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state24, ap_CS_fsm_state11, ap_CS_fsm_state17, ap_CS_fsm_state23, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state25, icmp_ln164_fu_585_p2, icmp_ln167_fu_600_p2, ap_CS_fsm_state2, exitcond181_fu_475_p2, trunc_ln140_fu_526_p1, grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_ap_done, ap_CS_fsm_state34, ap_CS_fsm_state44, ap_block_state44_on_subcall_done, ap_block_state18_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond181_fu_475_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((m_axi_lin_addr_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((trunc_ln140_fu_526_p1 = ap_const_lv1_0) and (ap_const_lv1_0 = PLIN_Ctrl_run_state_q0) and (ap_const_logic_1 = ap_CS_fsm_state10) and (m_axi_lin_addr_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                elsif (((trunc_ln140_fu_526_p1 = ap_const_lv1_1) and (ap_const_lv1_0 = PLIN_Ctrl_run_state_q0) and (ap_const_logic_1 = ap_CS_fsm_state10) and (m_axi_lin_addr_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                elsif (((ap_const_lv1_1 = PLIN_Ctrl_run_state_q0) and (ap_const_logic_1 = ap_CS_fsm_state10) and (m_axi_lin_addr_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((m_axi_lin_addr_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((m_axi_lin_addr_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if ((not(((ap_const_boolean_1 = ap_block_state18_io) or (m_axi_lin_addr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((m_axi_lin_addr_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (m_axi_lin_addr_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (m_axi_lin_addr_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if (((icmp_ln167_fu_600_p2 = ap_const_lv1_1) and (icmp_ln164_fu_585_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state26 => 
                if (((m_axi_lin_addr_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if (((m_axi_lin_addr_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (m_axi_lin_addr_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((ap_const_boolean_0 = ap_block_state44_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    EN_cast_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(EN),8));

    PLIN_Ctrl_run_state_address0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state25, PLIN_Ctrl_run_state_addr_reg_810, ap_CS_fsm_state9, zext_ln140_fu_522_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            PLIN_Ctrl_run_state_address0 <= PLIN_Ctrl_run_state_addr_reg_810;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            PLIN_Ctrl_run_state_address0 <= zext_ln140_fu_522_p1(4 - 1 downto 0);
        else 
            PLIN_Ctrl_run_state_address0 <= "XXXX";
        end if; 
    end process;


    PLIN_Ctrl_run_state_ce0_assign_proc : process(m_axi_lin_addr_ARREADY, ap_CS_fsm_state11, ap_CS_fsm_state25, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state25) or ((m_axi_lin_addr_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            PLIN_Ctrl_run_state_ce0 <= ap_const_logic_1;
        else 
            PLIN_Ctrl_run_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    PLIN_Ctrl_run_state_d0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            PLIN_Ctrl_run_state_d0 <= ap_const_lv1_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            PLIN_Ctrl_run_state_d0 <= ap_const_lv1_1;
        else 
            PLIN_Ctrl_run_state_d0 <= "X";
        end if; 
    end process;


    PLIN_Ctrl_run_state_we0_assign_proc : process(m_axi_lin_addr_ARREADY, ap_CS_fsm_state11, ap_CS_fsm_state25, icmp_ln164_fu_585_p2, icmp_ln167_fu_600_p2)
    begin
        if ((((m_axi_lin_addr_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((icmp_ln167_fu_600_p2 = ap_const_lv1_1) and (icmp_ln164_fu_585_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25)))) then 
            PLIN_Ctrl_run_state_we0 <= ap_const_logic_1;
        else 
            PLIN_Ctrl_run_state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln176_fu_655_p2 <= std_logic_vector(unsigned(zext_ln176_fu_652_p1) + unsigned(ap_const_lv5_1));
    add_ln193_fu_730_p2 <= std_logic_vector(unsigned(zext_ln176_reg_872) + unsigned(ap_const_lv5_4));
    add_ln200_fu_619_p2 <= std_logic_vector(unsigned(internal_lin_counter) + unsigned(ap_const_lv32_1));
    add_ln81_1_fu_530_p2 <= std_logic_vector(unsigned(linbase) + unsigned(ap_const_lv32_8));
    add_ln81_fu_497_p2 <= std_logic_vector(unsigned(linbase) + unsigned(ap_const_lv32_14));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(m_axi_lin_addr_RVALID)
    begin
        if ((m_axi_lin_addr_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state11_blk_assign_proc : process(m_axi_lin_addr_ARREADY)
    begin
        if ((m_axi_lin_addr_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;

    ap_ST_fsm_state17_blk_assign_proc : process(m_axi_lin_addr_AWREADY)
    begin
        if ((m_axi_lin_addr_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state17_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state17_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state18_blk_assign_proc : process(m_axi_lin_addr_RVALID, ap_block_state18_io)
    begin
        if (((ap_const_boolean_1 = ap_block_state18_io) or (m_axi_lin_addr_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state18_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state18_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state19_blk_assign_proc : process(m_axi_lin_addr_WREADY)
    begin
        if ((m_axi_lin_addr_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state19_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state19_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;

    ap_ST_fsm_state23_blk_assign_proc : process(m_axi_lin_addr_BVALID)
    begin
        if ((m_axi_lin_addr_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state23_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state23_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state24_blk_assign_proc : process(m_axi_lin_addr_BVALID)
    begin
        if ((m_axi_lin_addr_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state24_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state24_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state25_blk <= ap_const_logic_0;

    ap_ST_fsm_state26_blk_assign_proc : process(m_axi_lin_addr_AWREADY)
    begin
        if ((m_axi_lin_addr_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state26_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state26_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state27_blk_assign_proc : process(m_axi_lin_addr_WREADY)
    begin
        if ((m_axi_lin_addr_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state27_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state27_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;

    ap_ST_fsm_state32_blk_assign_proc : process(m_axi_lin_addr_BVALID)
    begin
        if ((m_axi_lin_addr_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state32_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state32_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state33_blk <= ap_const_logic_0;

    ap_ST_fsm_state34_blk_assign_proc : process(grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_ap_done)
    begin
        if ((grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state34_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state34_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(m_axi_lin_addr_ARREADY)
    begin
        if ((m_axi_lin_addr_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;

    ap_ST_fsm_state44_blk_assign_proc : process(ap_block_state44_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state44_on_subcall_done)) then 
            ap_ST_fsm_state44_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state44_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state18_io_assign_proc : process(m_axi_lin_addr_AWREADY, m_axi_lin_addr_WREADY)
    begin
                ap_block_state18_io <= ((m_axi_lin_addr_WREADY = ap_const_logic_0) or (m_axi_lin_addr_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state44_on_subcall_done_assign_proc : process(grp_write_lin_ddr_1_fu_434_ap_done, ap_predicate_op193_call_state44)
    begin
                ap_block_state44_on_subcall_done <= ((ap_predicate_op193_call_state44 = ap_const_boolean_1) and (grp_write_lin_ddr_1_fu_434_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state44, ap_block_state44_on_subcall_done)
    begin
        if ((((ap_const_boolean_0 = ap_block_state44_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op193_call_state44_assign_proc : process(PLIN_Ctrl_run_state_load_reg_815, icmp_ln164_reg_847, icmp_ln167_reg_851)
    begin
                ap_predicate_op193_call_state44 <= ((icmp_ln167_reg_851 = ap_const_lv1_1) and (icmp_ln164_reg_847 = ap_const_lv1_0) and (ap_const_lv1_1 = PLIN_Ctrl_run_state_load_reg_815));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state44, ap_block_state44_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state44_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_66_fu_481_p2 <= std_logic_vector(unsigned(empty_fu_156) + unsigned(ap_const_lv5_1));
    exitcond181_fu_475_p2 <= "1" when (empty_fu_156 = ap_const_lv5_1C) else "0";
    grp_fu_444_p2 <= std_logic_vector(unsigned(linbase) + unsigned(ap_const_lv32_4));
    grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_ap_start <= grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_ap_start_reg;
    grp_write_lin_ddr_1_fu_434_ap_start <= grp_write_lin_ddr_1_fu_434_ap_start_reg;
    icmp_ln164_fu_585_p2 <= "1" when (tmp_fu_576_p4 = ap_const_lv3_0) else "0";
    icmp_ln167_fu_600_p2 <= "1" when (tmp_1_fu_591_p4 = ap_const_lv2_0) else "0";

    lin_addr_blk_n_AR_assign_proc : process(m_axi_lin_addr_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            lin_addr_blk_n_AR <= m_axi_lin_addr_ARREADY;
        else 
            lin_addr_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    lin_addr_blk_n_AW_assign_proc : process(m_axi_lin_addr_AWREADY, ap_CS_fsm_state18, ap_CS_fsm_state17, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            lin_addr_blk_n_AW <= m_axi_lin_addr_AWREADY;
        else 
            lin_addr_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    lin_addr_blk_n_B_assign_proc : process(m_axi_lin_addr_BVALID, ap_CS_fsm_state24, ap_CS_fsm_state23, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            lin_addr_blk_n_B <= m_axi_lin_addr_BVALID;
        else 
            lin_addr_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    lin_addr_blk_n_R_assign_proc : process(m_axi_lin_addr_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            lin_addr_blk_n_R <= m_axi_lin_addr_RVALID;
        else 
            lin_addr_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    lin_addr_blk_n_W_assign_proc : process(m_axi_lin_addr_WREADY, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            lin_addr_blk_n_W <= m_axi_lin_addr_WREADY;
        else 
            lin_addr_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    lin_frame_address0_assign_proc : process(ap_CS_fsm_state2, PLIN_Ctrl_run_state_load_reg_815, icmp_ln164_reg_847, icmp_ln167_reg_851, ap_CS_fsm_state35, grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_lin_frame_address0, grp_write_lin_ddr_1_fu_434_data_address0, ap_CS_fsm_state34, ap_CS_fsm_state44, p_cast_fu_487_p1, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            lin_frame_address0 <= ap_const_lv32_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            lin_frame_address0 <= ap_const_lv32_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            lin_frame_address0 <= ap_const_lv32_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            lin_frame_address0 <= ap_const_lv32_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            lin_frame_address0 <= ap_const_lv32_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            lin_frame_address0 <= ap_const_lv32_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            lin_frame_address0 <= ap_const_lv32_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            lin_frame_address0 <= ap_const_lv32_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            lin_frame_address0 <= p_cast_fu_487_p1(5 - 1 downto 0);
        elsif (((icmp_ln167_reg_851 = ap_const_lv1_1) and (icmp_ln164_reg_847 = ap_const_lv1_0) and (ap_const_lv1_1 = PLIN_Ctrl_run_state_load_reg_815) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            lin_frame_address0 <= grp_write_lin_ddr_1_fu_434_data_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            lin_frame_address0 <= grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_lin_frame_address0;
        else 
            lin_frame_address0 <= "XXXXX";
        end if; 
    end process;


    lin_frame_address1_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            lin_frame_address1 <= ap_const_lv32_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            lin_frame_address1 <= ap_const_lv32_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            lin_frame_address1 <= ap_const_lv32_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            lin_frame_address1 <= ap_const_lv32_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            lin_frame_address1 <= ap_const_lv32_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            lin_frame_address1 <= ap_const_lv32_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            lin_frame_address1 <= ap_const_lv32_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            lin_frame_address1 <= ap_const_lv32_0(5 - 1 downto 0);
        else 
            lin_frame_address1 <= "XXXXX";
        end if; 
    end process;


    lin_frame_ce0_assign_proc : process(ap_CS_fsm_state2, PLIN_Ctrl_run_state_load_reg_815, icmp_ln164_reg_847, icmp_ln167_reg_851, ap_CS_fsm_state35, grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_lin_frame_ce0, grp_write_lin_ddr_1_fu_434_data_ce0, ap_CS_fsm_state34, ap_CS_fsm_state44, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            lin_frame_ce0 <= ap_const_logic_1;
        elsif (((icmp_ln167_reg_851 = ap_const_lv1_1) and (icmp_ln164_reg_847 = ap_const_lv1_0) and (ap_const_lv1_1 = PLIN_Ctrl_run_state_load_reg_815) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            lin_frame_ce0 <= grp_write_lin_ddr_1_fu_434_data_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            lin_frame_ce0 <= grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_lin_frame_ce0;
        else 
            lin_frame_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lin_frame_ce1_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            lin_frame_ce1 <= ap_const_logic_1;
        else 
            lin_frame_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lin_frame_d0_assign_proc : process(timestamp, ap_CS_fsm_state2, trunc_ln6_reg_882, ap_CS_fsm_state35, trunc_ln8_reg_892, trunc_ln1_reg_902, grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_lin_frame_d0, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            lin_frame_d0 <= ap_const_lv8_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            lin_frame_d0 <= trunc_ln1_reg_902;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            lin_frame_d0 <= trunc_ln8_reg_892;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            lin_frame_d0 <= trunc_ln6_reg_882;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            lin_frame_d0 <= timestamp(55 downto 48);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            lin_frame_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            lin_frame_d0 <= grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_lin_frame_d0;
        else 
            lin_frame_d0 <= "XXXXXXXX";
        end if; 
    end process;


    lin_frame_d1_assign_proc : process(timestamp, EN_cast_reg_790, ap_CS_fsm_state35, trunc_ln7_reg_887, trunc_ln9_reg_897, trunc_ln189_reg_907, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, zext_ln193_fu_735_p1, zext_ln196_fu_744_p1, zext_ln172_fu_749_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            lin_frame_d1 <= zext_ln172_fu_749_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            lin_frame_d1 <= zext_ln196_fu_744_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            lin_frame_d1 <= zext_ln193_fu_735_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            lin_frame_d1 <= EN_cast_reg_790;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            lin_frame_d1 <= trunc_ln189_reg_907;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            lin_frame_d1 <= trunc_ln9_reg_897;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            lin_frame_d1 <= trunc_ln7_reg_887;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            lin_frame_d1 <= timestamp(63 downto 56);
        else 
            lin_frame_d1 <= "XXXXXXXX";
        end if; 
    end process;


    lin_frame_we0_assign_proc : process(ap_CS_fsm_state2, exitcond181_fu_475_p2, ap_CS_fsm_state35, grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_lin_frame_we0, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or ((exitcond181_fu_475_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            lin_frame_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            lin_frame_we0 <= grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_lin_frame_we0;
        else 
            lin_frame_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lin_frame_we1_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            lin_frame_we1 <= ap_const_logic_1;
        else 
            lin_frame_we1 <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_lin_addr_ARADDR_assign_proc : process(m_axi_lin_addr_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state11, ap_CS_fsm_state33, grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARADDR, ap_CS_fsm_state34, sext_ln81_fu_512_p1, sext_ln81_1_fu_545_p1)
    begin
        if (((m_axi_lin_addr_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            m_axi_lin_addr_ARADDR <= sext_ln81_1_fu_545_p1;
        elsif (((m_axi_lin_addr_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_lin_addr_ARADDR <= sext_ln81_fu_512_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            m_axi_lin_addr_ARADDR <= grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARADDR;
        else 
            m_axi_lin_addr_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_lin_addr_ARBURST_assign_proc : process(ap_CS_fsm_state33, grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARBURST, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            m_axi_lin_addr_ARBURST <= grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARBURST;
        else 
            m_axi_lin_addr_ARBURST <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_lin_addr_ARCACHE_assign_proc : process(ap_CS_fsm_state33, grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARCACHE, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            m_axi_lin_addr_ARCACHE <= grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARCACHE;
        else 
            m_axi_lin_addr_ARCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_lin_addr_ARID_assign_proc : process(ap_CS_fsm_state33, grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARID, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            m_axi_lin_addr_ARID <= grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARID;
        else 
            m_axi_lin_addr_ARID <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_lin_addr_ARLEN_assign_proc : process(m_axi_lin_addr_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state11, ap_CS_fsm_state33, grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARLEN, ap_CS_fsm_state34)
    begin
        if ((((m_axi_lin_addr_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((m_axi_lin_addr_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_lin_addr_ARLEN <= ap_const_lv32_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            m_axi_lin_addr_ARLEN <= grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARLEN;
        else 
            m_axi_lin_addr_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_lin_addr_ARLOCK_assign_proc : process(ap_CS_fsm_state33, grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARLOCK, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            m_axi_lin_addr_ARLOCK <= grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARLOCK;
        else 
            m_axi_lin_addr_ARLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_lin_addr_ARPROT_assign_proc : process(ap_CS_fsm_state33, grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARPROT, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            m_axi_lin_addr_ARPROT <= grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARPROT;
        else 
            m_axi_lin_addr_ARPROT <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_lin_addr_ARQOS_assign_proc : process(ap_CS_fsm_state33, grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARQOS, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            m_axi_lin_addr_ARQOS <= grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARQOS;
        else 
            m_axi_lin_addr_ARQOS <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_lin_addr_ARREGION_assign_proc : process(ap_CS_fsm_state33, grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARREGION, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            m_axi_lin_addr_ARREGION <= grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARREGION;
        else 
            m_axi_lin_addr_ARREGION <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_lin_addr_ARSIZE_assign_proc : process(ap_CS_fsm_state33, grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARSIZE, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            m_axi_lin_addr_ARSIZE <= grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARSIZE;
        else 
            m_axi_lin_addr_ARSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_lin_addr_ARUSER_assign_proc : process(ap_CS_fsm_state33, grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARUSER, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            m_axi_lin_addr_ARUSER <= grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARUSER;
        else 
            m_axi_lin_addr_ARUSER <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_lin_addr_ARVALID_assign_proc : process(m_axi_lin_addr_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state11, ap_CS_fsm_state33, grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARVALID, ap_CS_fsm_state34)
    begin
        if ((((m_axi_lin_addr_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((m_axi_lin_addr_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_lin_addr_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            m_axi_lin_addr_ARVALID <= grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_ARVALID;
        else 
            m_axi_lin_addr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_lin_addr_AWADDR_assign_proc : process(m_axi_lin_addr_AWREADY, m_axi_lin_addr_RVALID, ap_CS_fsm_state18, ap_CS_fsm_state17, ap_CS_fsm_state26, lin_addr_addr_reg_803, sext_ln87_fu_555_p1, sext_ln87_1_fu_632_p1, ap_block_state18_io)
    begin
        if (((m_axi_lin_addr_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            m_axi_lin_addr_AWADDR <= sext_ln87_1_fu_632_p1;
        elsif (((m_axi_lin_addr_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            m_axi_lin_addr_AWADDR <= sext_ln87_fu_555_p1;
        elsif ((not(((ap_const_boolean_1 = ap_block_state18_io) or (m_axi_lin_addr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            m_axi_lin_addr_AWADDR <= lin_addr_addr_reg_803;
        else 
            m_axi_lin_addr_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_lin_addr_AWBURST <= ap_const_lv2_0;
    m_axi_lin_addr_AWCACHE <= ap_const_lv4_0;
    m_axi_lin_addr_AWID <= ap_const_lv1_0;
    m_axi_lin_addr_AWLEN <= ap_const_lv32_1;
    m_axi_lin_addr_AWLOCK <= ap_const_lv2_0;
    m_axi_lin_addr_AWPROT <= ap_const_lv3_0;
    m_axi_lin_addr_AWQOS <= ap_const_lv4_0;
    m_axi_lin_addr_AWREGION <= ap_const_lv4_0;
    m_axi_lin_addr_AWSIZE <= ap_const_lv3_0;
    m_axi_lin_addr_AWUSER <= ap_const_lv1_0;

    m_axi_lin_addr_AWVALID_assign_proc : process(m_axi_lin_addr_AWREADY, m_axi_lin_addr_RVALID, ap_CS_fsm_state18, ap_CS_fsm_state17, ap_CS_fsm_state26, ap_block_state18_io)
    begin
        if ((((m_axi_lin_addr_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((m_axi_lin_addr_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or (not(((ap_const_boolean_1 = ap_block_state18_io) or (m_axi_lin_addr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            m_axi_lin_addr_AWVALID <= ap_const_logic_1;
        else 
            m_axi_lin_addr_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_lin_addr_BREADY_assign_proc : process(m_axi_lin_addr_BVALID, ap_CS_fsm_state24, ap_CS_fsm_state23, ap_CS_fsm_state32)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state32) and (m_axi_lin_addr_BVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (m_axi_lin_addr_BVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (m_axi_lin_addr_BVALID = ap_const_logic_1)))) then 
            m_axi_lin_addr_BREADY <= ap_const_logic_1;
        else 
            m_axi_lin_addr_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_lin_addr_RREADY_assign_proc : process(m_axi_lin_addr_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state18, ap_CS_fsm_state33, grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_RREADY, ap_CS_fsm_state34, ap_block_state18_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state18_io) or (m_axi_lin_addr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (m_axi_lin_addr_RVALID = ap_const_logic_1)))) then 
            m_axi_lin_addr_RREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            m_axi_lin_addr_RREADY <= grp_single_lin_process_1_Pipeline_VITIS_LOOP_176_1_fu_425_m_axi_lin_addr_RREADY;
        else 
            m_axi_lin_addr_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_lin_addr_WDATA_assign_proc : process(m_axi_lin_addr_RVALID, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            m_axi_lin_addr_WDATA <= ap_const_lv32_80;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            m_axi_lin_addr_WDATA <= ap_const_lv32_3B;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (m_axi_lin_addr_RVALID = ap_const_logic_1))) then 
            m_axi_lin_addr_WDATA <= ap_const_lv32_0;
        else 
            m_axi_lin_addr_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_lin_addr_WID <= ap_const_lv1_0;
    m_axi_lin_addr_WLAST <= ap_const_logic_0;
    m_axi_lin_addr_WSTRB <= ap_const_lv4_F;
    m_axi_lin_addr_WUSER <= ap_const_lv1_0;

    m_axi_lin_addr_WVALID_assign_proc : process(m_axi_lin_addr_WREADY, m_axi_lin_addr_RVALID, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state27, ap_block_state18_io)
    begin
        if ((((m_axi_lin_addr_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27)) or ((m_axi_lin_addr_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or (not(((ap_const_boolean_1 = ap_block_state18_io) or (m_axi_lin_addr_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            m_axi_lin_addr_WVALID <= ap_const_logic_1;
        else 
            m_axi_lin_addr_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_ps_ddr_ARADDR <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARADDR;
    m_axi_ps_ddr_ARBURST <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARBURST;
    m_axi_ps_ddr_ARCACHE <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARCACHE;
    m_axi_ps_ddr_ARID <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARID;
    m_axi_ps_ddr_ARLEN <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARLEN;
    m_axi_ps_ddr_ARLOCK <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARLOCK;
    m_axi_ps_ddr_ARPROT <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARPROT;
    m_axi_ps_ddr_ARQOS <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARQOS;
    m_axi_ps_ddr_ARREGION <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARREGION;
    m_axi_ps_ddr_ARSIZE <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARSIZE;
    m_axi_ps_ddr_ARUSER <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARUSER;

    m_axi_ps_ddr_ARVALID_assign_proc : process(PLIN_Ctrl_run_state_load_reg_815, icmp_ln164_reg_847, icmp_ln167_reg_851, grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARVALID, ap_CS_fsm_state43, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or ((icmp_ln167_reg_851 = ap_const_lv1_1) and (icmp_ln164_reg_847 = ap_const_lv1_0) and (ap_const_lv1_1 = PLIN_Ctrl_run_state_load_reg_815) and (ap_const_logic_1 = ap_CS_fsm_state44)))) then 
            m_axi_ps_ddr_ARVALID <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_ARVALID;
        else 
            m_axi_ps_ddr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_ps_ddr_AWADDR <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWADDR;
    m_axi_ps_ddr_AWBURST <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWBURST;
    m_axi_ps_ddr_AWCACHE <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWCACHE;
    m_axi_ps_ddr_AWID <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWID;
    m_axi_ps_ddr_AWLEN <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWLEN;
    m_axi_ps_ddr_AWLOCK <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWLOCK;
    m_axi_ps_ddr_AWPROT <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWPROT;
    m_axi_ps_ddr_AWQOS <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWQOS;
    m_axi_ps_ddr_AWREGION <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWREGION;
    m_axi_ps_ddr_AWSIZE <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWSIZE;
    m_axi_ps_ddr_AWUSER <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWUSER;

    m_axi_ps_ddr_AWVALID_assign_proc : process(PLIN_Ctrl_run_state_load_reg_815, icmp_ln164_reg_847, icmp_ln167_reg_851, grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWVALID, ap_CS_fsm_state43, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or ((icmp_ln167_reg_851 = ap_const_lv1_1) and (icmp_ln164_reg_847 = ap_const_lv1_0) and (ap_const_lv1_1 = PLIN_Ctrl_run_state_load_reg_815) and (ap_const_logic_1 = ap_CS_fsm_state44)))) then 
            m_axi_ps_ddr_AWVALID <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_AWVALID;
        else 
            m_axi_ps_ddr_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_ps_ddr_BREADY_assign_proc : process(PLIN_Ctrl_run_state_load_reg_815, icmp_ln164_reg_847, icmp_ln167_reg_851, grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_BREADY, ap_CS_fsm_state43, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or ((icmp_ln167_reg_851 = ap_const_lv1_1) and (icmp_ln164_reg_847 = ap_const_lv1_0) and (ap_const_lv1_1 = PLIN_Ctrl_run_state_load_reg_815) and (ap_const_logic_1 = ap_CS_fsm_state44)))) then 
            m_axi_ps_ddr_BREADY <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_BREADY;
        else 
            m_axi_ps_ddr_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_ps_ddr_RREADY_assign_proc : process(PLIN_Ctrl_run_state_load_reg_815, icmp_ln164_reg_847, icmp_ln167_reg_851, grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_RREADY, ap_CS_fsm_state43, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or ((icmp_ln167_reg_851 = ap_const_lv1_1) and (icmp_ln164_reg_847 = ap_const_lv1_0) and (ap_const_lv1_1 = PLIN_Ctrl_run_state_load_reg_815) and (ap_const_logic_1 = ap_CS_fsm_state44)))) then 
            m_axi_ps_ddr_RREADY <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_RREADY;
        else 
            m_axi_ps_ddr_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_ps_ddr_WDATA <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_WDATA;
    m_axi_ps_ddr_WID <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_WID;
    m_axi_ps_ddr_WLAST <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_WLAST;
    m_axi_ps_ddr_WSTRB <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_WSTRB;
    m_axi_ps_ddr_WUSER <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_WUSER;

    m_axi_ps_ddr_WVALID_assign_proc : process(PLIN_Ctrl_run_state_load_reg_815, icmp_ln164_reg_847, icmp_ln167_reg_851, grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_WVALID, ap_CS_fsm_state43, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or ((icmp_ln167_reg_851 = ap_const_lv1_1) and (icmp_ln164_reg_847 = ap_const_lv1_0) and (ap_const_lv1_1 = PLIN_Ctrl_run_state_load_reg_815) and (ap_const_logic_1 = ap_CS_fsm_state44)))) then 
            m_axi_ps_ddr_WVALID <= grp_write_lin_ddr_1_fu_434_m_axi_ps_ddr_WVALID;
        else 
            m_axi_ps_ddr_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    p_cast_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_156),32));
    received_lin <= std_logic_vector(unsigned(internal_lin_counter) + unsigned(ap_const_lv32_1));

    received_lin_ap_vld_assign_proc : process(ap_CS_fsm_state25, icmp_ln164_fu_585_p2, icmp_ln167_fu_600_p2)
    begin
        if (((icmp_ln167_fu_600_p2 = ap_const_lv1_1) and (icmp_ln164_fu_585_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            received_lin_ap_vld <= ap_const_logic_1;
        else 
            received_lin_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    reg_lid_fu_566_p1 <= m_axi_lin_addr_RDATA(6 - 1 downto 0);
        sext_ln81_1_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln81_2_reg_830),32));

        sext_ln81_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_798),32));

        sext_ln87_1_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_459),32));

        sext_ln87_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_459),32));

    tmp_1_fu_591_p4 <= lin_addr_addr_read_reg_819(3 downto 2);
    tmp_fu_576_p4 <= lin_addr_addr_read_reg_819(3 downto 1);
    trunc_ln140_fu_526_p1 <= m_axi_lin_addr_RDATA(1 - 1 downto 0);
    trunc_ln189_fu_727_p1 <= timestamp(8 - 1 downto 0);
    zext_ln140_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(EN),32));
    zext_ln172_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_855),8));
    zext_ln176_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_855),5));
    zext_ln193_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln193_fu_730_p2),8));
    zext_ln196_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(PL_Data),8));
end behav;
