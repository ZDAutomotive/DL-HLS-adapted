// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module clu_single_lin_process_1_Pipeline_VITIS_LOOP_178_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_lin_addr_AWVALID,
        m_axi_lin_addr_AWREADY,
        m_axi_lin_addr_AWADDR,
        m_axi_lin_addr_AWID,
        m_axi_lin_addr_AWLEN,
        m_axi_lin_addr_AWSIZE,
        m_axi_lin_addr_AWBURST,
        m_axi_lin_addr_AWLOCK,
        m_axi_lin_addr_AWCACHE,
        m_axi_lin_addr_AWPROT,
        m_axi_lin_addr_AWQOS,
        m_axi_lin_addr_AWREGION,
        m_axi_lin_addr_AWUSER,
        m_axi_lin_addr_WVALID,
        m_axi_lin_addr_WREADY,
        m_axi_lin_addr_WDATA,
        m_axi_lin_addr_WSTRB,
        m_axi_lin_addr_WLAST,
        m_axi_lin_addr_WID,
        m_axi_lin_addr_WUSER,
        m_axi_lin_addr_ARVALID,
        m_axi_lin_addr_ARREADY,
        m_axi_lin_addr_ARADDR,
        m_axi_lin_addr_ARID,
        m_axi_lin_addr_ARLEN,
        m_axi_lin_addr_ARSIZE,
        m_axi_lin_addr_ARBURST,
        m_axi_lin_addr_ARLOCK,
        m_axi_lin_addr_ARCACHE,
        m_axi_lin_addr_ARPROT,
        m_axi_lin_addr_ARQOS,
        m_axi_lin_addr_ARREGION,
        m_axi_lin_addr_ARUSER,
        m_axi_lin_addr_RVALID,
        m_axi_lin_addr_RREADY,
        m_axi_lin_addr_RDATA,
        m_axi_lin_addr_RLAST,
        m_axi_lin_addr_RID,
        m_axi_lin_addr_RFIFONUM,
        m_axi_lin_addr_RUSER,
        m_axi_lin_addr_RRESP,
        m_axi_lin_addr_BVALID,
        m_axi_lin_addr_BREADY,
        m_axi_lin_addr_BRESP,
        m_axi_lin_addr_BID,
        m_axi_lin_addr_BUSER,
        linbase,
        lin_frame_address0,
        lin_frame_ce0,
        lin_frame_we0,
        lin_frame_d0,
        PL_Data_1_load_out,
        PL_Data_1_load_out_ap_vld,
        zext_ln178_1_out,
        zext_ln178_1_out_ap_vld,
        PL_Data_1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_lin_addr_AWVALID;
input   m_axi_lin_addr_AWREADY;
output  [31:0] m_axi_lin_addr_AWADDR;
output  [0:0] m_axi_lin_addr_AWID;
output  [31:0] m_axi_lin_addr_AWLEN;
output  [2:0] m_axi_lin_addr_AWSIZE;
output  [1:0] m_axi_lin_addr_AWBURST;
output  [1:0] m_axi_lin_addr_AWLOCK;
output  [3:0] m_axi_lin_addr_AWCACHE;
output  [2:0] m_axi_lin_addr_AWPROT;
output  [3:0] m_axi_lin_addr_AWQOS;
output  [3:0] m_axi_lin_addr_AWREGION;
output  [0:0] m_axi_lin_addr_AWUSER;
output   m_axi_lin_addr_WVALID;
input   m_axi_lin_addr_WREADY;
output  [31:0] m_axi_lin_addr_WDATA;
output  [3:0] m_axi_lin_addr_WSTRB;
output   m_axi_lin_addr_WLAST;
output  [0:0] m_axi_lin_addr_WID;
output  [0:0] m_axi_lin_addr_WUSER;
output   m_axi_lin_addr_ARVALID;
input   m_axi_lin_addr_ARREADY;
output  [31:0] m_axi_lin_addr_ARADDR;
output  [0:0] m_axi_lin_addr_ARID;
output  [31:0] m_axi_lin_addr_ARLEN;
output  [2:0] m_axi_lin_addr_ARSIZE;
output  [1:0] m_axi_lin_addr_ARBURST;
output  [1:0] m_axi_lin_addr_ARLOCK;
output  [3:0] m_axi_lin_addr_ARCACHE;
output  [2:0] m_axi_lin_addr_ARPROT;
output  [3:0] m_axi_lin_addr_ARQOS;
output  [3:0] m_axi_lin_addr_ARREGION;
output  [0:0] m_axi_lin_addr_ARUSER;
input   m_axi_lin_addr_RVALID;
output   m_axi_lin_addr_RREADY;
input  [31:0] m_axi_lin_addr_RDATA;
input   m_axi_lin_addr_RLAST;
input  [0:0] m_axi_lin_addr_RID;
input  [8:0] m_axi_lin_addr_RFIFONUM;
input  [0:0] m_axi_lin_addr_RUSER;
input  [1:0] m_axi_lin_addr_RRESP;
input   m_axi_lin_addr_BVALID;
output   m_axi_lin_addr_BREADY;
input  [1:0] m_axi_lin_addr_BRESP;
input  [0:0] m_axi_lin_addr_BID;
input  [0:0] m_axi_lin_addr_BUSER;
input  [31:0] linbase;
output  [4:0] lin_frame_address0;
output   lin_frame_ce0;
output   lin_frame_we0;
output  [7:0] lin_frame_d0;
output  [3:0] PL_Data_1_load_out;
output   PL_Data_1_load_out_ap_vld;
output  [3:0] zext_ln178_1_out;
output   zext_ln178_1_out_ap_vld;
input  [3:0] PL_Data_1;

reg ap_idle;
reg m_axi_lin_addr_ARVALID;
reg m_axi_lin_addr_RREADY;
reg lin_frame_ce0;
reg lin_frame_we0;
reg PL_Data_1_load_out_ap_vld;
reg zext_ln178_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_state8_pp0_stage1_iter3;
wire    grp_read_lin_reg_1_fu_97_lin_addr_blk_n_AR;
wire    grp_read_lin_reg_1_fu_97_lin_addr_blk_n_R;
reg    ap_block_state10_pp0_stage1_iter4;
reg    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln178_reg_179;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    lin_addr_blk_n_AR;
reg    lin_addr_blk_n_R;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state11_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
reg   [3:0] PL_Data_1_load_reg_173;
reg   [3:0] PL_Data_1_load_reg_173_pp0_iter1_reg;
reg   [3:0] PL_Data_1_load_reg_173_pp0_iter2_reg;
reg   [3:0] PL_Data_1_load_reg_173_pp0_iter3_reg;
wire   [0:0] icmp_ln178_fu_128_p2;
reg   [0:0] icmp_ln178_reg_179_pp0_iter1_reg;
reg   [0:0] icmp_ln178_reg_179_pp0_iter2_reg;
reg   [0:0] icmp_ln178_reg_179_pp0_iter3_reg;
wire   [3:0] trunc_ln181_fu_140_p1;
reg   [3:0] trunc_ln181_reg_183;
reg   [3:0] trunc_ln181_reg_183_pp0_iter1_reg;
reg   [3:0] trunc_ln181_reg_183_pp0_iter2_reg;
reg   [3:0] trunc_ln181_reg_183_pp0_iter3_reg;
reg   [3:0] trunc_ln181_reg_183_pp0_iter4_reg;
wire   [7:0] grp_read_lin_reg_1_fu_97_ap_return;
reg   [7:0] reg_data_reg_188;
reg    ap_block_pp0_stage1_11001;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
wire    grp_read_lin_reg_1_fu_97_ap_start;
wire    grp_read_lin_reg_1_fu_97_ap_done;
wire    grp_read_lin_reg_1_fu_97_ap_idle;
wire    grp_read_lin_reg_1_fu_97_ap_ready;
wire    grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWVALID;
wire   [31:0] grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWADDR;
wire   [0:0] grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWID;
wire   [31:0] grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWLEN;
wire   [2:0] grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWSIZE;
wire   [1:0] grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWBURST;
wire   [1:0] grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWLOCK;
wire   [3:0] grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWCACHE;
wire   [2:0] grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWPROT;
wire   [3:0] grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWQOS;
wire   [3:0] grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWREGION;
wire   [0:0] grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWUSER;
wire    grp_read_lin_reg_1_fu_97_m_axi_lin_addr_WVALID;
wire   [31:0] grp_read_lin_reg_1_fu_97_m_axi_lin_addr_WDATA;
wire   [3:0] grp_read_lin_reg_1_fu_97_m_axi_lin_addr_WSTRB;
wire    grp_read_lin_reg_1_fu_97_m_axi_lin_addr_WLAST;
wire   [0:0] grp_read_lin_reg_1_fu_97_m_axi_lin_addr_WID;
wire   [0:0] grp_read_lin_reg_1_fu_97_m_axi_lin_addr_WUSER;
wire    grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARVALID;
wire   [31:0] grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARADDR;
wire   [0:0] grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARID;
wire   [31:0] grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARLEN;
wire   [2:0] grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARSIZE;
wire   [1:0] grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARBURST;
wire   [1:0] grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARLOCK;
wire   [3:0] grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARCACHE;
wire   [2:0] grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARPROT;
wire   [3:0] grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARQOS;
wire   [3:0] grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARREGION;
wire   [0:0] grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARUSER;
wire    grp_read_lin_reg_1_fu_97_m_axi_lin_addr_RREADY;
wire    grp_read_lin_reg_1_fu_97_m_axi_lin_addr_BREADY;
reg    grp_read_lin_reg_1_fu_97_ap_ce;
wire    ap_block_state2_pp0_stage1_iter0_ignore_call1;
wire    ap_block_state4_pp0_stage1_iter1_ignore_call1;
wire    ap_block_state6_pp0_stage1_iter2_ignore_call1;
wire    ap_block_state8_pp0_stage1_iter3_ignore_call1;
wire    ap_block_state10_pp0_stage1_iter4_ignore_call1;
wire    ap_block_pp0_stage1_11001_ignoreCallOp30;
wire    ap_block_state1_pp0_stage0_iter0_ignore_call1;
wire    ap_block_state3_pp0_stage0_iter1_ignore_call1;
wire    ap_block_state5_pp0_stage0_iter2_ignore_call1;
wire    ap_block_state7_pp0_stage0_iter3_ignore_call1;
wire    ap_block_state9_pp0_stage0_iter4_ignore_call1;
wire    ap_block_state11_pp0_stage0_iter5_ignore_call1;
wire    ap_block_pp0_stage0_11001_ignoreCallOp31;
reg    grp_read_lin_reg_1_fu_97_ap_start_reg;
wire   [31:0] zext_ln181_fu_156_p1;
reg   [4:0] i_fu_60;
wire   [4:0] add_ln178_1_fu_134_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i_1;
reg    ap_block_pp0_stage0_01001;
wire   [4:0] zext_ln178_fu_118_p1;
wire   [4:0] add_ln178_fu_122_p2;
wire   [4:0] zext_ln181_cast_fu_149_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter4_stage0;
reg    ap_idle_pp0_0to3;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to5;
reg    ap_done_pending_pp0;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 grp_read_lin_reg_1_fu_97_ap_start_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

clu_read_lin_reg_1 grp_read_lin_reg_1_fu_97(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_read_lin_reg_1_fu_97_ap_start),
    .ap_done(grp_read_lin_reg_1_fu_97_ap_done),
    .ap_idle(grp_read_lin_reg_1_fu_97_ap_idle),
    .ap_ready(grp_read_lin_reg_1_fu_97_ap_ready),
    .m_axi_lin_addr_AWVALID(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWVALID),
    .m_axi_lin_addr_AWREADY(1'b0),
    .m_axi_lin_addr_AWADDR(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWADDR),
    .m_axi_lin_addr_AWID(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWID),
    .m_axi_lin_addr_AWLEN(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWLEN),
    .m_axi_lin_addr_AWSIZE(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWSIZE),
    .m_axi_lin_addr_AWBURST(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWBURST),
    .m_axi_lin_addr_AWLOCK(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWLOCK),
    .m_axi_lin_addr_AWCACHE(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWCACHE),
    .m_axi_lin_addr_AWPROT(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWPROT),
    .m_axi_lin_addr_AWQOS(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWQOS),
    .m_axi_lin_addr_AWREGION(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWREGION),
    .m_axi_lin_addr_AWUSER(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_AWUSER),
    .m_axi_lin_addr_WVALID(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_WVALID),
    .m_axi_lin_addr_WREADY(1'b0),
    .m_axi_lin_addr_WDATA(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_WDATA),
    .m_axi_lin_addr_WSTRB(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_WSTRB),
    .m_axi_lin_addr_WLAST(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_WLAST),
    .m_axi_lin_addr_WID(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_WID),
    .m_axi_lin_addr_WUSER(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_WUSER),
    .m_axi_lin_addr_ARVALID(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARVALID),
    .m_axi_lin_addr_ARREADY(m_axi_lin_addr_ARREADY),
    .m_axi_lin_addr_ARADDR(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARADDR),
    .m_axi_lin_addr_ARID(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARID),
    .m_axi_lin_addr_ARLEN(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARLEN),
    .m_axi_lin_addr_ARSIZE(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARSIZE),
    .m_axi_lin_addr_ARBURST(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARBURST),
    .m_axi_lin_addr_ARLOCK(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARLOCK),
    .m_axi_lin_addr_ARCACHE(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARCACHE),
    .m_axi_lin_addr_ARPROT(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARPROT),
    .m_axi_lin_addr_ARQOS(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARQOS),
    .m_axi_lin_addr_ARREGION(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARREGION),
    .m_axi_lin_addr_ARUSER(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARUSER),
    .m_axi_lin_addr_RVALID(m_axi_lin_addr_RVALID),
    .m_axi_lin_addr_RREADY(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_RREADY),
    .m_axi_lin_addr_RDATA(m_axi_lin_addr_RDATA),
    .m_axi_lin_addr_RLAST(m_axi_lin_addr_RLAST),
    .m_axi_lin_addr_RID(m_axi_lin_addr_RID),
    .m_axi_lin_addr_RFIFONUM(m_axi_lin_addr_RFIFONUM),
    .m_axi_lin_addr_RUSER(m_axi_lin_addr_RUSER),
    .m_axi_lin_addr_RRESP(m_axi_lin_addr_RRESP),
    .m_axi_lin_addr_BVALID(1'b0),
    .m_axi_lin_addr_BREADY(grp_read_lin_reg_1_fu_97_m_axi_lin_addr_BREADY),
    .m_axi_lin_addr_BRESP(2'd0),
    .m_axi_lin_addr_BID(1'd0),
    .m_axi_lin_addr_BUSER(1'd0),
    .ap_ce(grp_read_lin_reg_1_fu_97_ap_ce),
    .lin_reg(linbase),
    .offset(5'd0),
    .ap_return(grp_read_lin_reg_1_fu_97_ap_return),
    .lin_addr_blk_n_AR(grp_read_lin_reg_1_fu_97_lin_addr_blk_n_AR),
    .lin_addr_blk_n_R(grp_read_lin_reg_1_fu_97_lin_addr_blk_n_R)
);

clu_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_read_lin_reg_1_fu_97_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln178_fu_128_p2 == 1'd1))) begin
            grp_read_lin_reg_1_fu_97_ap_start_reg <= 1'b1;
        end else if ((grp_read_lin_reg_1_fu_97_ap_ready == 1'b1)) begin
            grp_read_lin_reg_1_fu_97_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln178_fu_128_p2 == 1'd1))) begin
            i_fu_60 <= add_ln178_1_fu_134_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_60 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        PL_Data_1_load_reg_173 <= PL_Data_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        PL_Data_1_load_reg_173_pp0_iter1_reg <= PL_Data_1_load_reg_173;
        PL_Data_1_load_reg_173_pp0_iter2_reg <= PL_Data_1_load_reg_173_pp0_iter1_reg;
        PL_Data_1_load_reg_173_pp0_iter3_reg <= PL_Data_1_load_reg_173_pp0_iter2_reg;
        icmp_ln178_reg_179 <= icmp_ln178_fu_128_p2;
        icmp_ln178_reg_179_pp0_iter1_reg <= icmp_ln178_reg_179;
        icmp_ln178_reg_179_pp0_iter2_reg <= icmp_ln178_reg_179_pp0_iter1_reg;
        icmp_ln178_reg_179_pp0_iter3_reg <= icmp_ln178_reg_179_pp0_iter2_reg;
        trunc_ln181_reg_183_pp0_iter1_reg <= trunc_ln181_reg_183;
        trunc_ln181_reg_183_pp0_iter2_reg <= trunc_ln181_reg_183_pp0_iter1_reg;
        trunc_ln181_reg_183_pp0_iter3_reg <= trunc_ln181_reg_183_pp0_iter2_reg;
        trunc_ln181_reg_183_pp0_iter4_reg <= trunc_ln181_reg_183_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        reg_data_reg_188 <= grp_read_lin_reg_1_fu_97_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln178_fu_128_p2 == 1'd1))) begin
        trunc_ln181_reg_183 <= trunc_ln181_fu_140_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln178_reg_179_pp0_iter3_reg == 1'd0))) begin
        PL_Data_1_load_out_ap_vld = 1'b1;
    end else begin
        PL_Data_1_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln178_reg_179 == 1'd0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln178_reg_179_pp0_iter3_reg == 1'd0))) begin
        ap_condition_exit_pp0_iter4_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter4_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready == 1'b0) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to5 = 1'b1;
    end else begin
        ap_idle_pp0_1to5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_60;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp31) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001_ignoreCallOp30) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_read_lin_reg_1_fu_97_ap_ce = 1'b1;
    end else begin
        grp_read_lin_reg_1_fu_97_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln178_reg_179 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        lin_addr_blk_n_AR = grp_read_lin_reg_1_fu_97_lin_addr_blk_n_AR;
    end else begin
        lin_addr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln178_reg_179 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        lin_addr_blk_n_R = grp_read_lin_reg_1_fu_97_lin_addr_blk_n_R;
    end else begin
        lin_addr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lin_frame_ce0 = 1'b1;
    end else begin
        lin_frame_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lin_frame_we0 = 1'b1;
    end else begin
        lin_frame_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln178_reg_179 == 1'd1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln178_reg_179 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln178_reg_179_pp0_iter3_reg == 1'd1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln178_reg_179_pp0_iter2_reg == 1'd1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln178_reg_179_pp0_iter1_reg == 1'd1)))) begin
        m_axi_lin_addr_ARVALID = grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARVALID;
    end else begin
        m_axi_lin_addr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln178_reg_179 == 1'd1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln178_reg_179 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln178_reg_179_pp0_iter3_reg == 1'd1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln178_reg_179_pp0_iter2_reg == 1'd1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln178_reg_179_pp0_iter1_reg == 1'd1)))) begin
        m_axi_lin_addr_RREADY = grp_read_lin_reg_1_fu_97_m_axi_lin_addr_RREADY;
    end else begin
        m_axi_lin_addr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln178_reg_179_pp0_iter3_reg == 1'd0))) begin
        zext_ln178_1_out_ap_vld = 1'b1;
    end else begin
        zext_ln178_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to5 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign PL_Data_1_load_out = PL_Data_1_load_reg_173_pp0_iter3_reg;

assign add_ln178_1_fu_134_p2 = (ap_sig_allocacmp_i_1 + 5'd1);

assign add_ln178_fu_122_p2 = (zext_ln178_fu_118_p1 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln178_reg_179 == 1'd1) & ((grp_read_lin_reg_1_fu_97_lin_addr_blk_n_R & grp_read_lin_reg_1_fu_97_lin_addr_blk_n_AR) == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln178_reg_179 == 1'd1) & ((grp_read_lin_reg_1_fu_97_lin_addr_blk_n_R & grp_read_lin_reg_1_fu_97_lin_addr_blk_n_AR) == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage0_11001_ignoreCallOp31 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln178_reg_179 == 1'd1) & ((grp_read_lin_reg_1_fu_97_lin_addr_blk_n_R & grp_read_lin_reg_1_fu_97_lin_addr_blk_n_AR) == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((grp_read_lin_reg_1_fu_97_lin_addr_blk_n_R & grp_read_lin_reg_1_fu_97_lin_addr_blk_n_AR) == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

assign ap_block_pp0_stage1_11001_ignoreCallOp30 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((grp_read_lin_reg_1_fu_97_lin_addr_blk_n_R & grp_read_lin_reg_1_fu_97_lin_addr_blk_n_AR) == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage1_iter4 = ((grp_read_lin_reg_1_fu_97_lin_addr_blk_n_R & grp_read_lin_reg_1_fu_97_lin_addr_blk_n_AR) == 1'b0);
end

assign ap_block_state10_pp0_stage1_iter4_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter5_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0_ignore_call1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln178_reg_179 == 1'd1) & ((grp_read_lin_reg_1_fu_97_lin_addr_blk_n_R & grp_read_lin_reg_1_fu_97_lin_addr_blk_n_AR) == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter3_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign grp_read_lin_reg_1_fu_97_ap_start = grp_read_lin_reg_1_fu_97_ap_start_reg;

assign icmp_ln178_fu_128_p2 = ((ap_sig_allocacmp_i_1 < add_ln178_fu_122_p2) ? 1'b1 : 1'b0);

assign lin_frame_address0 = zext_ln181_fu_156_p1;

assign lin_frame_d0 = reg_data_reg_188;

assign m_axi_lin_addr_ARADDR = grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARADDR;

assign m_axi_lin_addr_ARBURST = grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARBURST;

assign m_axi_lin_addr_ARCACHE = grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARCACHE;

assign m_axi_lin_addr_ARID = grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARID;

assign m_axi_lin_addr_ARLEN = grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARLEN;

assign m_axi_lin_addr_ARLOCK = grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARLOCK;

assign m_axi_lin_addr_ARPROT = grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARPROT;

assign m_axi_lin_addr_ARQOS = grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARQOS;

assign m_axi_lin_addr_ARREGION = grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARREGION;

assign m_axi_lin_addr_ARSIZE = grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARSIZE;

assign m_axi_lin_addr_ARUSER = grp_read_lin_reg_1_fu_97_m_axi_lin_addr_ARUSER;

assign m_axi_lin_addr_AWADDR = 32'd0;

assign m_axi_lin_addr_AWBURST = 2'd0;

assign m_axi_lin_addr_AWCACHE = 4'd0;

assign m_axi_lin_addr_AWID = 1'd0;

assign m_axi_lin_addr_AWLEN = 32'd0;

assign m_axi_lin_addr_AWLOCK = 2'd0;

assign m_axi_lin_addr_AWPROT = 3'd0;

assign m_axi_lin_addr_AWQOS = 4'd0;

assign m_axi_lin_addr_AWREGION = 4'd0;

assign m_axi_lin_addr_AWSIZE = 3'd0;

assign m_axi_lin_addr_AWUSER = 1'd0;

assign m_axi_lin_addr_AWVALID = 1'b0;

assign m_axi_lin_addr_BREADY = 1'b0;

assign m_axi_lin_addr_WDATA = 32'd0;

assign m_axi_lin_addr_WID = 1'd0;

assign m_axi_lin_addr_WLAST = 1'b0;

assign m_axi_lin_addr_WSTRB = 4'd0;

assign m_axi_lin_addr_WUSER = 1'd0;

assign m_axi_lin_addr_WVALID = 1'b0;

assign trunc_ln181_fu_140_p1 = ap_sig_allocacmp_i_1[3:0];

assign zext_ln178_1_out = PL_Data_1_load_reg_173_pp0_iter3_reg;

assign zext_ln178_fu_118_p1 = PL_Data_1;

assign zext_ln181_cast_fu_149_p3 = {{1'd1}, {trunc_ln181_reg_183_pp0_iter4_reg}};

assign zext_ln181_fu_156_p1 = zext_ln181_cast_fu_149_p3;

endmodule //clu_single_lin_process_1_Pipeline_VITIS_LOOP_178_1
