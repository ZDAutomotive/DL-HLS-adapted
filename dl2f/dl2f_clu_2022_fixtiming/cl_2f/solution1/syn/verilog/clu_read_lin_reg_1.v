// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module clu_read_lin_reg_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_lin_addr_AWVALID,
        m_axi_lin_addr_AWREADY,
        m_axi_lin_addr_AWADDR,
        m_axi_lin_addr_AWID,
        m_axi_lin_addr_AWLEN,
        m_axi_lin_addr_AWSIZE,
        m_axi_lin_addr_AWBURST,
        m_axi_lin_addr_AWLOCK,
        m_axi_lin_addr_AWCACHE,
        m_axi_lin_addr_AWPROT,
        m_axi_lin_addr_AWQOS,
        m_axi_lin_addr_AWREGION,
        m_axi_lin_addr_AWUSER,
        m_axi_lin_addr_WVALID,
        m_axi_lin_addr_WREADY,
        m_axi_lin_addr_WDATA,
        m_axi_lin_addr_WSTRB,
        m_axi_lin_addr_WLAST,
        m_axi_lin_addr_WID,
        m_axi_lin_addr_WUSER,
        m_axi_lin_addr_ARVALID,
        m_axi_lin_addr_ARREADY,
        m_axi_lin_addr_ARADDR,
        m_axi_lin_addr_ARID,
        m_axi_lin_addr_ARLEN,
        m_axi_lin_addr_ARSIZE,
        m_axi_lin_addr_ARBURST,
        m_axi_lin_addr_ARLOCK,
        m_axi_lin_addr_ARCACHE,
        m_axi_lin_addr_ARPROT,
        m_axi_lin_addr_ARQOS,
        m_axi_lin_addr_ARREGION,
        m_axi_lin_addr_ARUSER,
        m_axi_lin_addr_RVALID,
        m_axi_lin_addr_RREADY,
        m_axi_lin_addr_RDATA,
        m_axi_lin_addr_RLAST,
        m_axi_lin_addr_RID,
        m_axi_lin_addr_RFIFONUM,
        m_axi_lin_addr_RUSER,
        m_axi_lin_addr_RRESP,
        m_axi_lin_addr_BVALID,
        m_axi_lin_addr_BREADY,
        m_axi_lin_addr_BRESP,
        m_axi_lin_addr_BID,
        m_axi_lin_addr_BUSER,
        ap_ce,
        lin_reg,
        offset,
        ap_return,
        lin_addr_blk_n_AR,
        lin_addr_blk_n_R
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_lin_addr_AWVALID;
input   m_axi_lin_addr_AWREADY;
output  [31:0] m_axi_lin_addr_AWADDR;
output  [0:0] m_axi_lin_addr_AWID;
output  [31:0] m_axi_lin_addr_AWLEN;
output  [2:0] m_axi_lin_addr_AWSIZE;
output  [1:0] m_axi_lin_addr_AWBURST;
output  [1:0] m_axi_lin_addr_AWLOCK;
output  [3:0] m_axi_lin_addr_AWCACHE;
output  [2:0] m_axi_lin_addr_AWPROT;
output  [3:0] m_axi_lin_addr_AWQOS;
output  [3:0] m_axi_lin_addr_AWREGION;
output  [0:0] m_axi_lin_addr_AWUSER;
output   m_axi_lin_addr_WVALID;
input   m_axi_lin_addr_WREADY;
output  [31:0] m_axi_lin_addr_WDATA;
output  [3:0] m_axi_lin_addr_WSTRB;
output   m_axi_lin_addr_WLAST;
output  [0:0] m_axi_lin_addr_WID;
output  [0:0] m_axi_lin_addr_WUSER;
output   m_axi_lin_addr_ARVALID;
input   m_axi_lin_addr_ARREADY;
output  [31:0] m_axi_lin_addr_ARADDR;
output  [0:0] m_axi_lin_addr_ARID;
output  [31:0] m_axi_lin_addr_ARLEN;
output  [2:0] m_axi_lin_addr_ARSIZE;
output  [1:0] m_axi_lin_addr_ARBURST;
output  [1:0] m_axi_lin_addr_ARLOCK;
output  [3:0] m_axi_lin_addr_ARCACHE;
output  [2:0] m_axi_lin_addr_ARPROT;
output  [3:0] m_axi_lin_addr_ARQOS;
output  [3:0] m_axi_lin_addr_ARREGION;
output  [0:0] m_axi_lin_addr_ARUSER;
input   m_axi_lin_addr_RVALID;
output   m_axi_lin_addr_RREADY;
input  [31:0] m_axi_lin_addr_RDATA;
input   m_axi_lin_addr_RLAST;
input  [0:0] m_axi_lin_addr_RID;
input  [8:0] m_axi_lin_addr_RFIFONUM;
input  [0:0] m_axi_lin_addr_RUSER;
input  [1:0] m_axi_lin_addr_RRESP;
input   m_axi_lin_addr_BVALID;
output   m_axi_lin_addr_BREADY;
input  [1:0] m_axi_lin_addr_BRESP;
input  [0:0] m_axi_lin_addr_BID;
input  [0:0] m_axi_lin_addr_BUSER;
input   ap_ce;
input  [31:0] lin_reg;
input  [4:0] offset;
output  [7:0] ap_return;
output   lin_addr_blk_n_AR;
output   lin_addr_blk_n_R;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_lin_addr_ARVALID;
reg m_axi_lin_addr_RREADY;
reg lin_addr_blk_n_AR;
reg lin_addr_blk_n_R;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_state8_pp0_stage1_iter3;
reg    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage0;
reg   [29:0] trunc_ln_reg_124;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
reg    ap_block_state9_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_pp0_stage1_11001;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
wire  signed [31:0] sext_ln83_fu_110_p1;
wire   [2:0] tmp_fu_72_p4;
wire   [4:0] and_ln_fu_82_p3;
wire   [31:0] zext_ln83_fu_90_p1;
wire   [31:0] add_ln83_fu_94_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to3;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0_1to4;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln_reg_124 <= {{add_ln83_fu_94_p2[31:2]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to4 = 1'b1;
    end else begin
        ap_idle_pp0_1to4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to3 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        lin_addr_blk_n_AR = m_axi_lin_addr_ARREADY;
    end else begin
        lin_addr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        lin_addr_blk_n_R = m_axi_lin_addr_RVALID;
    end else begin
        lin_addr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        m_axi_lin_addr_ARVALID = 1'b1;
    end else begin
        m_axi_lin_addr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_lin_addr_RREADY = 1'b1;
    end else begin
        m_axi_lin_addr_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to4 == 1'b1)) & (ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln83_fu_94_p2 = (zext_ln83_fu_90_p1 + lin_reg);

assign and_ln_fu_82_p3 = {{tmp_fu_72_p4}, {2'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_lin_addr_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((m_axi_lin_addr_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((m_axi_lin_addr_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((1'b0 == ap_ce) | ((m_axi_lin_addr_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter4 = (m_axi_lin_addr_RVALID == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = m_axi_lin_addr_RDATA[7:0];

assign m_axi_lin_addr_ARADDR = sext_ln83_fu_110_p1;

assign m_axi_lin_addr_ARBURST = 2'd0;

assign m_axi_lin_addr_ARCACHE = 4'd0;

assign m_axi_lin_addr_ARID = 1'd0;

assign m_axi_lin_addr_ARLEN = 32'd1;

assign m_axi_lin_addr_ARLOCK = 2'd0;

assign m_axi_lin_addr_ARPROT = 3'd0;

assign m_axi_lin_addr_ARQOS = 4'd0;

assign m_axi_lin_addr_ARREGION = 4'd0;

assign m_axi_lin_addr_ARSIZE = 3'd0;

assign m_axi_lin_addr_ARUSER = 1'd0;

assign m_axi_lin_addr_AWADDR = 32'd0;

assign m_axi_lin_addr_AWBURST = 2'd0;

assign m_axi_lin_addr_AWCACHE = 4'd0;

assign m_axi_lin_addr_AWID = 1'd0;

assign m_axi_lin_addr_AWLEN = 32'd0;

assign m_axi_lin_addr_AWLOCK = 2'd0;

assign m_axi_lin_addr_AWPROT = 3'd0;

assign m_axi_lin_addr_AWQOS = 4'd0;

assign m_axi_lin_addr_AWREGION = 4'd0;

assign m_axi_lin_addr_AWSIZE = 3'd0;

assign m_axi_lin_addr_AWUSER = 1'd0;

assign m_axi_lin_addr_AWVALID = 1'b0;

assign m_axi_lin_addr_BREADY = 1'b0;

assign m_axi_lin_addr_WDATA = 32'd0;

assign m_axi_lin_addr_WID = 1'd0;

assign m_axi_lin_addr_WLAST = 1'b0;

assign m_axi_lin_addr_WSTRB = 4'd0;

assign m_axi_lin_addr_WUSER = 1'd0;

assign m_axi_lin_addr_WVALID = 1'b0;

assign sext_ln83_fu_110_p1 = $signed(trunc_ln_reg_124);

assign tmp_fu_72_p4 = {{offset[4:2]}};

assign zext_ln83_fu_90_p1 = and_ln_fu_82_p3;

endmodule //clu_read_lin_reg_1
