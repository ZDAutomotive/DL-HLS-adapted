// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="timestamp_timestamp,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu5ev-sfvc784-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.658000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=419,HLS_SYN_LUT=889,HLS_VERSION=2020_2}" *)

module timestamp (
        ap_clk,
        ap_rst_n,
        timestamp_r,
        timestamp_r_ap_vld,
        s_axi_ts_base_AWVALID,
        s_axi_ts_base_AWREADY,
        s_axi_ts_base_AWADDR,
        s_axi_ts_base_WVALID,
        s_axi_ts_base_WREADY,
        s_axi_ts_base_WDATA,
        s_axi_ts_base_WSTRB,
        s_axi_ts_base_ARVALID,
        s_axi_ts_base_ARREADY,
        s_axi_ts_base_ARADDR,
        s_axi_ts_base_RVALID,
        s_axi_ts_base_RREADY,
        s_axi_ts_base_RDATA,
        s_axi_ts_base_RRESP,
        s_axi_ts_base_BVALID,
        s_axi_ts_base_BREADY,
        s_axi_ts_base_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 1'd1;
parameter    C_S_AXI_TS_BASE_DATA_WIDTH = 32;
parameter    C_S_AXI_TS_BASE_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_TS_BASE_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [63:0] timestamp_r;
output   timestamp_r_ap_vld;
input   s_axi_ts_base_AWVALID;
output   s_axi_ts_base_AWREADY;
input  [C_S_AXI_TS_BASE_ADDR_WIDTH - 1:0] s_axi_ts_base_AWADDR;
input   s_axi_ts_base_WVALID;
output   s_axi_ts_base_WREADY;
input  [C_S_AXI_TS_BASE_DATA_WIDTH - 1:0] s_axi_ts_base_WDATA;
input  [C_S_AXI_TS_BASE_WSTRB_WIDTH - 1:0] s_axi_ts_base_WSTRB;
input   s_axi_ts_base_ARVALID;
output   s_axi_ts_base_ARREADY;
input  [C_S_AXI_TS_BASE_ADDR_WIDTH - 1:0] s_axi_ts_base_ARADDR;
output   s_axi_ts_base_RVALID;
input   s_axi_ts_base_RREADY;
output  [C_S_AXI_TS_BASE_DATA_WIDTH - 1:0] s_axi_ts_base_RDATA;
output  [1:0] s_axi_ts_base_RRESP;
output   s_axi_ts_base_BVALID;
input   s_axi_ts_base_BREADY;
output  [1:0] s_axi_ts_base_BRESP;
output   interrupt;

reg timestamp_r_ap_vld;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] ts_base;
wire   [31:0] timestamp_high;
reg    timestamp_high_ap_vld;
wire   [31:0] timestamp_low;
reg    timestamp_low_ap_vld;
wire   [31:0] ts_base_10ns;
reg    timestamp_ps_ap_vld;
reg   [31:0] last_ts_base;
reg   [31:0] last_ts_base_10ns;
reg   [31:0] tick_s;
reg   [63:0] tick_10ns;
reg   [0:0] ap_phi_mux_tick_s_flag_0_phi_fu_119_p4;
wire   [0:0] or_ln33_fu_166_p2;
reg   [31:0] ap_phi_mux_tick_s_loc_0_phi_fu_130_p4;
wire   [63:0] zext_ln37_fu_194_p1;
reg   [63:0] ap_phi_mux_empty_phi_fu_140_p4;
wire   [31:0] select_ln40_fu_229_p3;
wire   [0:0] or_ln40_fu_223_p2;
wire   [63:0] select_ln40_2_fu_245_p3;
wire   [63:0] add_ln46_1_fu_278_p2;
wire   [0:0] icmp_ln33_fu_150_p2;
wire   [0:0] icmp_ln33_1_fu_160_p2;
wire   [0:0] icmp_ln40_fu_199_p2;
wire   [0:0] xor_ln40_fu_217_p2;
wire   [31:0] add_ln43_fu_211_p2;
wire   [63:0] add_ln41_fu_205_p2;
wire   [31:0] select_ln40_1_fu_237_p3;
wire   [31:0] add_ln46_fu_259_p2;
wire   [63:0] shl_ln_fu_265_p3;
reg   [0:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 last_ts_base = 32'd0;
#0 last_ts_base_10ns = 32'd0;
#0 tick_s = 32'd0;
#0 tick_10ns = 64'd0;
end

timestamp_ts_base_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_TS_BASE_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_TS_BASE_DATA_WIDTH ))
ts_base_s_axi_U(
    .AWVALID(s_axi_ts_base_AWVALID),
    .AWREADY(s_axi_ts_base_AWREADY),
    .AWADDR(s_axi_ts_base_AWADDR),
    .WVALID(s_axi_ts_base_WVALID),
    .WREADY(s_axi_ts_base_WREADY),
    .WDATA(s_axi_ts_base_WDATA),
    .WSTRB(s_axi_ts_base_WSTRB),
    .ARVALID(s_axi_ts_base_ARVALID),
    .ARREADY(s_axi_ts_base_ARREADY),
    .ARADDR(s_axi_ts_base_ARADDR),
    .RVALID(s_axi_ts_base_RVALID),
    .RREADY(s_axi_ts_base_RREADY),
    .RDATA(s_axi_ts_base_RDATA),
    .RRESP(s_axi_ts_base_RRESP),
    .BVALID(s_axi_ts_base_BVALID),
    .BREADY(s_axi_ts_base_BREADY),
    .BRESP(s_axi_ts_base_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ts_base(ts_base),
    .timestamp_high(timestamp_high),
    .timestamp_high_ap_vld(timestamp_high_ap_vld),
    .timestamp_low(timestamp_low),
    .timestamp_low_ap_vld(timestamp_low_ap_vld),
    .ts_base_10ns(ts_base_10ns),
    .timestamp_ps(add_ln46_1_fu_278_p2),
    .timestamp_ps_ap_vld(timestamp_ps_ap_vld),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (or_ln33_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        last_ts_base <= ts_base;
        last_ts_base_10ns <= ts_base_10ns;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tick_10ns <= select_ln40_2_fu_245_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (or_ln40_fu_223_p2 == 1'd1))) begin
        tick_s <= select_ln40_fu_229_p3;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((or_ln33_fu_166_p2 == 1'd0)) begin
            ap_phi_mux_empty_phi_fu_140_p4 = tick_10ns;
        end else if ((or_ln33_fu_166_p2 == 1'd1)) begin
            ap_phi_mux_empty_phi_fu_140_p4 = zext_ln37_fu_194_p1;
        end else begin
            ap_phi_mux_empty_phi_fu_140_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_empty_phi_fu_140_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((or_ln33_fu_166_p2 == 1'd0)) begin
            ap_phi_mux_tick_s_flag_0_phi_fu_119_p4 = 1'd0;
        end else if ((or_ln33_fu_166_p2 == 1'd1)) begin
            ap_phi_mux_tick_s_flag_0_phi_fu_119_p4 = 1'd1;
        end else begin
            ap_phi_mux_tick_s_flag_0_phi_fu_119_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_tick_s_flag_0_phi_fu_119_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((or_ln33_fu_166_p2 == 1'd0)) begin
            ap_phi_mux_tick_s_loc_0_phi_fu_130_p4 = tick_s;
        end else if ((or_ln33_fu_166_p2 == 1'd1)) begin
            ap_phi_mux_tick_s_loc_0_phi_fu_130_p4 = 32'd0;
        end else begin
            ap_phi_mux_tick_s_loc_0_phi_fu_130_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_tick_s_loc_0_phi_fu_130_p4 = 'bx;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        timestamp_high_ap_vld = 1'b1;
    end else begin
        timestamp_high_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        timestamp_low_ap_vld = 1'b1;
    end else begin
        timestamp_low_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        timestamp_ps_ap_vld = 1'b1;
    end else begin
        timestamp_ps_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        timestamp_r_ap_vld = 1'b1;
    end else begin
        timestamp_r_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln41_fu_205_p2 = (ap_phi_mux_empty_phi_fu_140_p4 + 64'd2);

assign add_ln43_fu_211_p2 = (ap_phi_mux_tick_s_loc_0_phi_fu_130_p4 + 32'd1);

assign add_ln46_1_fu_278_p2 = (shl_ln_fu_265_p3 + select_ln40_2_fu_245_p3);

assign add_ln46_fu_259_p2 = (ts_base + select_ln40_1_fu_237_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_ln33_1_fu_160_p2 = ((ts_base_10ns != last_ts_base_10ns) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_150_p2 = ((ts_base != last_ts_base) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_199_p2 = ((ap_phi_mux_empty_phi_fu_140_p4 < 64'd100000000) ? 1'b1 : 1'b0);

assign or_ln33_fu_166_p2 = (icmp_ln33_fu_150_p2 | icmp_ln33_1_fu_160_p2);

assign or_ln40_fu_223_p2 = (xor_ln40_fu_217_p2 | ap_phi_mux_tick_s_flag_0_phi_fu_119_p4);

assign select_ln40_1_fu_237_p3 = ((icmp_ln40_fu_199_p2[0:0] == 1'b1) ? ap_phi_mux_tick_s_loc_0_phi_fu_130_p4 : add_ln43_fu_211_p2);

assign select_ln40_2_fu_245_p3 = ((icmp_ln40_fu_199_p2[0:0] == 1'b1) ? add_ln41_fu_205_p2 : 64'd0);

assign select_ln40_fu_229_p3 = ((icmp_ln40_fu_199_p2[0:0] == 1'b1) ? 32'd0 : add_ln43_fu_211_p2);

assign shl_ln_fu_265_p3 = {{add_ln46_fu_259_p2}, {32'd0}};

assign timestamp_high = {{add_ln46_1_fu_278_p2[63:32]}};

assign timestamp_low = select_ln40_2_fu_245_p3[31:0];

assign timestamp_r = add_ln46_1_fu_278_p2;

assign xor_ln40_fu_217_p2 = (icmp_ln40_fu_199_p2 ^ 1'd1);

assign zext_ln37_fu_194_p1 = ts_base_10ns;

endmodule //timestamp
