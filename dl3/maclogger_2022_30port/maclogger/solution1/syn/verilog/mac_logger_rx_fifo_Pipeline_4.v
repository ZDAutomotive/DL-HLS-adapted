// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mac_logger_rx_fifo_Pipeline_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_fifo_axi_full_AWVALID,
        m_axi_fifo_axi_full_AWREADY,
        m_axi_fifo_axi_full_AWADDR,
        m_axi_fifo_axi_full_AWID,
        m_axi_fifo_axi_full_AWLEN,
        m_axi_fifo_axi_full_AWSIZE,
        m_axi_fifo_axi_full_AWBURST,
        m_axi_fifo_axi_full_AWLOCK,
        m_axi_fifo_axi_full_AWCACHE,
        m_axi_fifo_axi_full_AWPROT,
        m_axi_fifo_axi_full_AWQOS,
        m_axi_fifo_axi_full_AWREGION,
        m_axi_fifo_axi_full_AWUSER,
        m_axi_fifo_axi_full_WVALID,
        m_axi_fifo_axi_full_WREADY,
        m_axi_fifo_axi_full_WDATA,
        m_axi_fifo_axi_full_WSTRB,
        m_axi_fifo_axi_full_WLAST,
        m_axi_fifo_axi_full_WID,
        m_axi_fifo_axi_full_WUSER,
        m_axi_fifo_axi_full_ARVALID,
        m_axi_fifo_axi_full_ARREADY,
        m_axi_fifo_axi_full_ARADDR,
        m_axi_fifo_axi_full_ARID,
        m_axi_fifo_axi_full_ARLEN,
        m_axi_fifo_axi_full_ARSIZE,
        m_axi_fifo_axi_full_ARBURST,
        m_axi_fifo_axi_full_ARLOCK,
        m_axi_fifo_axi_full_ARCACHE,
        m_axi_fifo_axi_full_ARPROT,
        m_axi_fifo_axi_full_ARQOS,
        m_axi_fifo_axi_full_ARREGION,
        m_axi_fifo_axi_full_ARUSER,
        m_axi_fifo_axi_full_RVALID,
        m_axi_fifo_axi_full_RREADY,
        m_axi_fifo_axi_full_RDATA,
        m_axi_fifo_axi_full_RLAST,
        m_axi_fifo_axi_full_RID,
        m_axi_fifo_axi_full_RFIFONUM,
        m_axi_fifo_axi_full_RUSER,
        m_axi_fifo_axi_full_RRESP,
        m_axi_fifo_axi_full_BVALID,
        m_axi_fifo_axi_full_BREADY,
        m_axi_fifo_axi_full_BRESP,
        m_axi_fifo_axi_full_BID,
        m_axi_fifo_axi_full_BUSER,
        sext_ln73,
        or_ln3,
        data_buf_address0,
        data_buf_ce0,
        data_buf_we0,
        data_buf_d0,
        M
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_fifo_axi_full_AWVALID;
input   m_axi_fifo_axi_full_AWREADY;
output  [63:0] m_axi_fifo_axi_full_AWADDR;
output  [0:0] m_axi_fifo_axi_full_AWID;
output  [31:0] m_axi_fifo_axi_full_AWLEN;
output  [2:0] m_axi_fifo_axi_full_AWSIZE;
output  [1:0] m_axi_fifo_axi_full_AWBURST;
output  [1:0] m_axi_fifo_axi_full_AWLOCK;
output  [3:0] m_axi_fifo_axi_full_AWCACHE;
output  [2:0] m_axi_fifo_axi_full_AWPROT;
output  [3:0] m_axi_fifo_axi_full_AWQOS;
output  [3:0] m_axi_fifo_axi_full_AWREGION;
output  [0:0] m_axi_fifo_axi_full_AWUSER;
output   m_axi_fifo_axi_full_WVALID;
input   m_axi_fifo_axi_full_WREADY;
output  [31:0] m_axi_fifo_axi_full_WDATA;
output  [3:0] m_axi_fifo_axi_full_WSTRB;
output   m_axi_fifo_axi_full_WLAST;
output  [0:0] m_axi_fifo_axi_full_WID;
output  [0:0] m_axi_fifo_axi_full_WUSER;
output   m_axi_fifo_axi_full_ARVALID;
input   m_axi_fifo_axi_full_ARREADY;
output  [63:0] m_axi_fifo_axi_full_ARADDR;
output  [0:0] m_axi_fifo_axi_full_ARID;
output  [31:0] m_axi_fifo_axi_full_ARLEN;
output  [2:0] m_axi_fifo_axi_full_ARSIZE;
output  [1:0] m_axi_fifo_axi_full_ARBURST;
output  [1:0] m_axi_fifo_axi_full_ARLOCK;
output  [3:0] m_axi_fifo_axi_full_ARCACHE;
output  [2:0] m_axi_fifo_axi_full_ARPROT;
output  [3:0] m_axi_fifo_axi_full_ARQOS;
output  [3:0] m_axi_fifo_axi_full_ARREGION;
output  [0:0] m_axi_fifo_axi_full_ARUSER;
input   m_axi_fifo_axi_full_RVALID;
output   m_axi_fifo_axi_full_RREADY;
input  [31:0] m_axi_fifo_axi_full_RDATA;
input   m_axi_fifo_axi_full_RLAST;
input  [0:0] m_axi_fifo_axi_full_RID;
input  [8:0] m_axi_fifo_axi_full_RFIFONUM;
input  [0:0] m_axi_fifo_axi_full_RUSER;
input  [1:0] m_axi_fifo_axi_full_RRESP;
input   m_axi_fifo_axi_full_BVALID;
output   m_axi_fifo_axi_full_BREADY;
input  [1:0] m_axi_fifo_axi_full_BRESP;
input  [0:0] m_axi_fifo_axi_full_BID;
input  [0:0] m_axi_fifo_axi_full_BUSER;
input  [61:0] sext_ln73;
input  [8:0] or_ln3;
output  [8:0] data_buf_address0;
output   data_buf_ce0;
output   data_buf_we0;
output  [31:0] data_buf_d0;
input  [3:0] M;

reg ap_idle;
reg m_axi_fifo_axi_full_RREADY;
reg data_buf_ce0;
reg data_buf_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] exitcond_fu_119_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    fifo_axi_full_blk_n_R;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [3:0] loop_index_load_reg_155;
reg   [31:0] fifo_axi_full_addr_read_reg_160;
wire   [63:0] arrayidx103_sum3_cast_fu_138_p1;
reg   [3:0] loop_index_fu_54;
wire   [3:0] empty_fu_113_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_loop_index_load;
wire   [8:0] loop_index_cast_fu_130_p1;
wire   [8:0] arrayidx103_sum3_fu_133_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

mac_logger_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((exitcond_fu_119_p2 == 1'd0) & (ap_start_int == 1'b1))) begin
            loop_index_fu_54 <= empty_fu_113_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            loop_index_fu_54 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo_axi_full_addr_read_reg_160 <= m_axi_fifo_axi_full_RDATA;
        loop_index_load_reg_155 <= ap_sig_allocacmp_loop_index_load;
    end
end

always @ (*) begin
    if (((exitcond_fu_119_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_loop_index_load = 4'd0;
    end else begin
        ap_sig_allocacmp_loop_index_load = loop_index_fu_54;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_buf_ce0 = 1'b1;
    end else begin
        data_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_buf_we0 = 1'b1;
    end else begin
        data_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo_axi_full_blk_n_R = m_axi_fifo_axi_full_RVALID;
    end else begin
        fifo_axi_full_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_fifo_axi_full_RREADY = 1'b1;
    end else begin
        m_axi_fifo_axi_full_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_fifo_axi_full_RVALID == 1'b0) & (ap_start_int == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_fifo_axi_full_RVALID == 1'b0) & (ap_start_int == 1'b1));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (m_axi_fifo_axi_full_RVALID == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign arrayidx103_sum3_cast_fu_138_p1 = arrayidx103_sum3_fu_133_p2;

assign arrayidx103_sum3_fu_133_p2 = (or_ln3 + loop_index_cast_fu_130_p1);

assign data_buf_address0 = arrayidx103_sum3_cast_fu_138_p1;

assign data_buf_d0 = fifo_axi_full_addr_read_reg_160;

assign empty_fu_113_p2 = (ap_sig_allocacmp_loop_index_load + 4'd1);

assign exitcond_fu_119_p2 = ((empty_fu_113_p2 == M) ? 1'b1 : 1'b0);

assign loop_index_cast_fu_130_p1 = loop_index_load_reg_155;

assign m_axi_fifo_axi_full_ARADDR = 64'd0;

assign m_axi_fifo_axi_full_ARBURST = 2'd0;

assign m_axi_fifo_axi_full_ARCACHE = 4'd0;

assign m_axi_fifo_axi_full_ARID = 1'd0;

assign m_axi_fifo_axi_full_ARLEN = 32'd0;

assign m_axi_fifo_axi_full_ARLOCK = 2'd0;

assign m_axi_fifo_axi_full_ARPROT = 3'd0;

assign m_axi_fifo_axi_full_ARQOS = 4'd0;

assign m_axi_fifo_axi_full_ARREGION = 4'd0;

assign m_axi_fifo_axi_full_ARSIZE = 3'd0;

assign m_axi_fifo_axi_full_ARUSER = 1'd0;

assign m_axi_fifo_axi_full_ARVALID = 1'b0;

assign m_axi_fifo_axi_full_AWADDR = 64'd0;

assign m_axi_fifo_axi_full_AWBURST = 2'd0;

assign m_axi_fifo_axi_full_AWCACHE = 4'd0;

assign m_axi_fifo_axi_full_AWID = 1'd0;

assign m_axi_fifo_axi_full_AWLEN = 32'd0;

assign m_axi_fifo_axi_full_AWLOCK = 2'd0;

assign m_axi_fifo_axi_full_AWPROT = 3'd0;

assign m_axi_fifo_axi_full_AWQOS = 4'd0;

assign m_axi_fifo_axi_full_AWREGION = 4'd0;

assign m_axi_fifo_axi_full_AWSIZE = 3'd0;

assign m_axi_fifo_axi_full_AWUSER = 1'd0;

assign m_axi_fifo_axi_full_AWVALID = 1'b0;

assign m_axi_fifo_axi_full_BREADY = 1'b0;

assign m_axi_fifo_axi_full_WDATA = 32'd0;

assign m_axi_fifo_axi_full_WID = 1'd0;

assign m_axi_fifo_axi_full_WLAST = 1'b0;

assign m_axi_fifo_axi_full_WSTRB = 4'd0;

assign m_axi_fifo_axi_full_WUSER = 1'd0;

assign m_axi_fifo_axi_full_WVALID = 1'b0;

endmodule //mac_logger_rx_fifo_Pipeline_4
