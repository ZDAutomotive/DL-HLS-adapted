// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mac_logger_rx_ringbuffer_header_Pipeline_VITIS_LOOP_32_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_ps_AWVALID,
        m_axi_ps_AWREADY,
        m_axi_ps_AWADDR,
        m_axi_ps_AWID,
        m_axi_ps_AWLEN,
        m_axi_ps_AWSIZE,
        m_axi_ps_AWBURST,
        m_axi_ps_AWLOCK,
        m_axi_ps_AWCACHE,
        m_axi_ps_AWPROT,
        m_axi_ps_AWQOS,
        m_axi_ps_AWREGION,
        m_axi_ps_AWUSER,
        m_axi_ps_WVALID,
        m_axi_ps_WREADY,
        m_axi_ps_WDATA,
        m_axi_ps_WSTRB,
        m_axi_ps_WLAST,
        m_axi_ps_WID,
        m_axi_ps_WUSER,
        m_axi_ps_ARVALID,
        m_axi_ps_ARREADY,
        m_axi_ps_ARADDR,
        m_axi_ps_ARID,
        m_axi_ps_ARLEN,
        m_axi_ps_ARSIZE,
        m_axi_ps_ARBURST,
        m_axi_ps_ARLOCK,
        m_axi_ps_ARCACHE,
        m_axi_ps_ARPROT,
        m_axi_ps_ARQOS,
        m_axi_ps_ARREGION,
        m_axi_ps_ARUSER,
        m_axi_ps_RVALID,
        m_axi_ps_RREADY,
        m_axi_ps_RDATA,
        m_axi_ps_RLAST,
        m_axi_ps_RID,
        m_axi_ps_RFIFONUM,
        m_axi_ps_RUSER,
        m_axi_ps_RRESP,
        m_axi_ps_BVALID,
        m_axi_ps_BREADY,
        m_axi_ps_BRESP,
        m_axi_ps_BID,
        m_axi_ps_BUSER,
        sext_ln32,
        tap_header_address0,
        tap_header_ce0,
        tap_header_we0,
        tap_header_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_ps_AWVALID;
input   m_axi_ps_AWREADY;
output  [63:0] m_axi_ps_AWADDR;
output  [0:0] m_axi_ps_AWID;
output  [31:0] m_axi_ps_AWLEN;
output  [2:0] m_axi_ps_AWSIZE;
output  [1:0] m_axi_ps_AWBURST;
output  [1:0] m_axi_ps_AWLOCK;
output  [3:0] m_axi_ps_AWCACHE;
output  [2:0] m_axi_ps_AWPROT;
output  [3:0] m_axi_ps_AWQOS;
output  [3:0] m_axi_ps_AWREGION;
output  [0:0] m_axi_ps_AWUSER;
output   m_axi_ps_WVALID;
input   m_axi_ps_WREADY;
output  [31:0] m_axi_ps_WDATA;
output  [3:0] m_axi_ps_WSTRB;
output   m_axi_ps_WLAST;
output  [0:0] m_axi_ps_WID;
output  [0:0] m_axi_ps_WUSER;
output   m_axi_ps_ARVALID;
input   m_axi_ps_ARREADY;
output  [63:0] m_axi_ps_ARADDR;
output  [0:0] m_axi_ps_ARID;
output  [31:0] m_axi_ps_ARLEN;
output  [2:0] m_axi_ps_ARSIZE;
output  [1:0] m_axi_ps_ARBURST;
output  [1:0] m_axi_ps_ARLOCK;
output  [3:0] m_axi_ps_ARCACHE;
output  [2:0] m_axi_ps_ARPROT;
output  [3:0] m_axi_ps_ARQOS;
output  [3:0] m_axi_ps_ARREGION;
output  [0:0] m_axi_ps_ARUSER;
input   m_axi_ps_RVALID;
output   m_axi_ps_RREADY;
input  [31:0] m_axi_ps_RDATA;
input   m_axi_ps_RLAST;
input  [0:0] m_axi_ps_RID;
input  [8:0] m_axi_ps_RFIFONUM;
input  [0:0] m_axi_ps_RUSER;
input  [1:0] m_axi_ps_RRESP;
input   m_axi_ps_BVALID;
output   m_axi_ps_BREADY;
input  [1:0] m_axi_ps_BRESP;
input  [0:0] m_axi_ps_BID;
input  [0:0] m_axi_ps_BUSER;
input  [61:0] sext_ln32;
output  [2:0] tap_header_address0;
output   tap_header_ce0;
output   tap_header_we0;
output  [31:0] tap_header_d0;

reg ap_idle;
reg m_axi_ps_RREADY;
reg tap_header_ce0;
reg tap_header_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln32_reg_134;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln32_fu_90_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ps_blk_n_R;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [2:0] i_4_reg_129;
reg   [2:0] i_4_reg_129_pp0_iter1_reg;
reg   [31:0] ps_addr_read_reg_138;
reg    ap_condition_exit_pp0_iter1_stage0;
wire   [63:0] zext_ln32_fu_113_p1;
reg   [2:0] i_fu_50;
wire   [2:0] add_ln32_fu_96_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i_4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

mac_logger_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln32_fu_90_p2 == 1'd0))) begin
            i_fu_50 <= add_ln32_fu_96_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_50 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        i_4_reg_129 <= ap_sig_allocacmp_i_4;
        i_4_reg_129_pp0_iter1_reg <= i_4_reg_129;
        icmp_ln32_reg_134 <= icmp_ln32_fu_90_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln32_reg_134 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ps_addr_read_reg_138 <= m_axi_ps_RDATA;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_fu_90_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln32_reg_134 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_4 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_4 = i_fu_50;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln32_reg_134 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_ps_RREADY = 1'b1;
    end else begin
        m_axi_ps_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln32_reg_134 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ps_blk_n_R = m_axi_ps_RVALID;
    end else begin
        ps_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tap_header_ce0 = 1'b1;
    end else begin
        tap_header_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tap_header_we0 = 1'b1;
    end else begin
        tap_header_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln32_fu_96_p2 = (ap_sig_allocacmp_i_4 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln32_reg_134 == 1'd0) & (m_axi_ps_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln32_reg_134 == 1'd0) & (m_axi_ps_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln32_reg_134 == 1'd0) & (m_axi_ps_RVALID == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln32_fu_90_p2 = ((ap_sig_allocacmp_i_4 == 3'd7) ? 1'b1 : 1'b0);

assign m_axi_ps_ARADDR = 64'd0;

assign m_axi_ps_ARBURST = 2'd0;

assign m_axi_ps_ARCACHE = 4'd0;

assign m_axi_ps_ARID = 1'd0;

assign m_axi_ps_ARLEN = 32'd0;

assign m_axi_ps_ARLOCK = 2'd0;

assign m_axi_ps_ARPROT = 3'd0;

assign m_axi_ps_ARQOS = 4'd0;

assign m_axi_ps_ARREGION = 4'd0;

assign m_axi_ps_ARSIZE = 3'd0;

assign m_axi_ps_ARUSER = 1'd0;

assign m_axi_ps_ARVALID = 1'b0;

assign m_axi_ps_AWADDR = 64'd0;

assign m_axi_ps_AWBURST = 2'd0;

assign m_axi_ps_AWCACHE = 4'd0;

assign m_axi_ps_AWID = 1'd0;

assign m_axi_ps_AWLEN = 32'd0;

assign m_axi_ps_AWLOCK = 2'd0;

assign m_axi_ps_AWPROT = 3'd0;

assign m_axi_ps_AWQOS = 4'd0;

assign m_axi_ps_AWREGION = 4'd0;

assign m_axi_ps_AWSIZE = 3'd0;

assign m_axi_ps_AWUSER = 1'd0;

assign m_axi_ps_AWVALID = 1'b0;

assign m_axi_ps_BREADY = 1'b0;

assign m_axi_ps_WDATA = 32'd0;

assign m_axi_ps_WID = 1'd0;

assign m_axi_ps_WLAST = 1'b0;

assign m_axi_ps_WSTRB = 4'd0;

assign m_axi_ps_WUSER = 1'd0;

assign m_axi_ps_WVALID = 1'b0;

assign tap_header_address0 = zext_ln32_fu_113_p1;

assign tap_header_d0 = ps_addr_read_reg_138;

assign zext_ln32_fu_113_p1 = i_4_reg_129_pp0_iter1_reg;

endmodule //mac_logger_rx_ringbuffer_header_Pipeline_VITIS_LOOP_32_2
