-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mac_logger_rx_fifo_Pipeline_VITIS_LOOP_71_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_fifo_axi_full_AWVALID : OUT STD_LOGIC;
    m_axi_fifo_axi_full_AWREADY : IN STD_LOGIC;
    m_axi_fifo_axi_full_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_fifo_axi_full_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fifo_axi_full_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fifo_axi_full_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fifo_axi_full_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fifo_axi_full_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fifo_axi_full_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fifo_axi_full_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fifo_axi_full_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fifo_axi_full_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fifo_axi_full_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fifo_axi_full_WVALID : OUT STD_LOGIC;
    m_axi_fifo_axi_full_WREADY : IN STD_LOGIC;
    m_axi_fifo_axi_full_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fifo_axi_full_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fifo_axi_full_WLAST : OUT STD_LOGIC;
    m_axi_fifo_axi_full_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fifo_axi_full_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fifo_axi_full_ARVALID : OUT STD_LOGIC;
    m_axi_fifo_axi_full_ARREADY : IN STD_LOGIC;
    m_axi_fifo_axi_full_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_fifo_axi_full_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fifo_axi_full_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fifo_axi_full_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fifo_axi_full_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fifo_axi_full_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fifo_axi_full_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fifo_axi_full_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fifo_axi_full_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fifo_axi_full_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fifo_axi_full_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fifo_axi_full_RVALID : IN STD_LOGIC;
    m_axi_fifo_axi_full_RREADY : OUT STD_LOGIC;
    m_axi_fifo_axi_full_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fifo_axi_full_RLAST : IN STD_LOGIC;
    m_axi_fifo_axi_full_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fifo_axi_full_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_fifo_axi_full_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fifo_axi_full_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fifo_axi_full_BVALID : IN STD_LOGIC;
    m_axi_fifo_axi_full_BREADY : OUT STD_LOGIC;
    m_axi_fifo_axi_full_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fifo_axi_full_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fifo_axi_full_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln73 : IN STD_LOGIC_VECTOR (61 downto 0);
    tmp_buf_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    tmp_buf_ce0 : OUT STD_LOGIC;
    tmp_buf_we0 : OUT STD_LOGIC;
    tmp_buf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of mac_logger_rx_fifo_Pipeline_VITIS_LOOP_71_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal icmp_ln71_reg_143 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln71_fu_99_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal fifo_axi_full_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal fifo_axi_full_blk_n_R : STD_LOGIC;
    signal sext_ln73_cast_fu_87_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln73_cast_reg_133 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_7_reg_138 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_7_reg_138_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_7_reg_138_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_7_reg_138_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_7_reg_138_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_7_reg_138_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_7_reg_138_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_7_reg_138_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_7_reg_138_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal rxWord_reg_153 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal i_cast_fu_122_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_52 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln71_fu_105_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_7 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component mac_logger_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component mac_logger_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln71_fu_99_p2 = ap_const_lv1_0))) then 
                    i_fu_52 <= add_ln71_fu_105_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_52 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                i_7_reg_138 <= ap_sig_allocacmp_i_7;
                i_7_reg_138_pp0_iter1_reg <= i_7_reg_138;
                icmp_ln71_reg_143 <= icmp_ln71_fu_99_p2;
                sext_ln73_cast_reg_133 <= sext_ln73_cast_fu_87_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                i_7_reg_138_pp0_iter2_reg <= i_7_reg_138_pp0_iter1_reg;
                i_7_reg_138_pp0_iter3_reg <= i_7_reg_138_pp0_iter2_reg;
                i_7_reg_138_pp0_iter4_reg <= i_7_reg_138_pp0_iter3_reg;
                i_7_reg_138_pp0_iter5_reg <= i_7_reg_138_pp0_iter4_reg;
                i_7_reg_138_pp0_iter6_reg <= i_7_reg_138_pp0_iter5_reg;
                i_7_reg_138_pp0_iter7_reg <= i_7_reg_138_pp0_iter6_reg;
                i_7_reg_138_pp0_iter8_reg <= i_7_reg_138_pp0_iter7_reg;
                rxWord_reg_153 <= m_axi_fifo_axi_full_RDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln71_fu_105_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_7) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, m_axi_fifo_axi_full_RVALID, ap_block_state2_io)
    begin
                ap_block_pp0_stage0_11001 <= (((m_axi_fifo_axi_full_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, m_axi_fifo_axi_full_RVALID, ap_block_state2_io)
    begin
                ap_block_pp0_stage0_subdone <= (((m_axi_fifo_axi_full_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_io_assign_proc : process(m_axi_fifo_axi_full_ARREADY, icmp_ln71_reg_143)
    begin
                ap_block_state2_io <= ((m_axi_fifo_axi_full_ARREADY = ap_const_logic_0) and (icmp_ln71_reg_143 = ap_const_lv1_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp0_stage0_iter8_assign_proc : process(m_axi_fifo_axi_full_RVALID)
    begin
                ap_block_state9_pp0_stage0_iter8 <= (m_axi_fifo_axi_full_RVALID = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln71_fu_99_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln71_fu_99_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln71_reg_143, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln71_reg_143 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_7_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_52, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i_7 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_7 <= i_fu_52;
        end if; 
    end process;


    fifo_axi_full_blk_n_AR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_fifo_axi_full_ARREADY, icmp_ln71_reg_143, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln71_reg_143 = ap_const_lv1_0))) then 
            fifo_axi_full_blk_n_AR <= m_axi_fifo_axi_full_ARREADY;
        else 
            fifo_axi_full_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    fifo_axi_full_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter8, m_axi_fifo_axi_full_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            fifo_axi_full_blk_n_R <= m_axi_fifo_axi_full_RVALID;
        else 
            fifo_axi_full_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    i_cast_fu_122_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_7_reg_138_pp0_iter8_reg),64));
    icmp_ln71_fu_99_p2 <= "1" when (ap_sig_allocacmp_i_7 = ap_const_lv3_4) else "0";
    m_axi_fifo_axi_full_ARADDR <= sext_ln73_cast_reg_133;
    m_axi_fifo_axi_full_ARBURST <= ap_const_lv2_0;
    m_axi_fifo_axi_full_ARCACHE <= ap_const_lv4_0;
    m_axi_fifo_axi_full_ARID <= ap_const_lv1_0;
    m_axi_fifo_axi_full_ARLEN <= ap_const_lv32_1;
    m_axi_fifo_axi_full_ARLOCK <= ap_const_lv2_0;
    m_axi_fifo_axi_full_ARPROT <= ap_const_lv3_0;
    m_axi_fifo_axi_full_ARQOS <= ap_const_lv4_0;
    m_axi_fifo_axi_full_ARREGION <= ap_const_lv4_0;
    m_axi_fifo_axi_full_ARSIZE <= ap_const_lv3_0;
    m_axi_fifo_axi_full_ARUSER <= ap_const_lv1_0;

    m_axi_fifo_axi_full_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln71_reg_143, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln71_reg_143 = ap_const_lv1_0))) then 
            m_axi_fifo_axi_full_ARVALID <= ap_const_logic_1;
        else 
            m_axi_fifo_axi_full_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_fifo_axi_full_AWADDR <= ap_const_lv64_0;
    m_axi_fifo_axi_full_AWBURST <= ap_const_lv2_0;
    m_axi_fifo_axi_full_AWCACHE <= ap_const_lv4_0;
    m_axi_fifo_axi_full_AWID <= ap_const_lv1_0;
    m_axi_fifo_axi_full_AWLEN <= ap_const_lv32_0;
    m_axi_fifo_axi_full_AWLOCK <= ap_const_lv2_0;
    m_axi_fifo_axi_full_AWPROT <= ap_const_lv3_0;
    m_axi_fifo_axi_full_AWQOS <= ap_const_lv4_0;
    m_axi_fifo_axi_full_AWREGION <= ap_const_lv4_0;
    m_axi_fifo_axi_full_AWSIZE <= ap_const_lv3_0;
    m_axi_fifo_axi_full_AWUSER <= ap_const_lv1_0;
    m_axi_fifo_axi_full_AWVALID <= ap_const_logic_0;
    m_axi_fifo_axi_full_BREADY <= ap_const_logic_0;

    m_axi_fifo_axi_full_RREADY_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_fifo_axi_full_RREADY <= ap_const_logic_1;
        else 
            m_axi_fifo_axi_full_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_fifo_axi_full_WDATA <= ap_const_lv32_0;
    m_axi_fifo_axi_full_WID <= ap_const_lv1_0;
    m_axi_fifo_axi_full_WLAST <= ap_const_logic_0;
    m_axi_fifo_axi_full_WSTRB <= ap_const_lv4_0;
    m_axi_fifo_axi_full_WUSER <= ap_const_lv1_0;
    m_axi_fifo_axi_full_WVALID <= ap_const_logic_0;
        sext_ln73_cast_fu_87_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln73),64));

    tmp_buf_address0 <= i_cast_fu_122_p1(2 - 1 downto 0);

    tmp_buf_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            tmp_buf_ce0 <= ap_const_logic_1;
        else 
            tmp_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_buf_d0 <= rxWord_reg_153;

    tmp_buf_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            tmp_buf_we0 <= ap_const_logic_1;
        else 
            tmp_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
