// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module clu_uart_data_read_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_ps_ddr_AWVALID,
        m_axi_ps_ddr_AWREADY,
        m_axi_ps_ddr_AWADDR,
        m_axi_ps_ddr_AWID,
        m_axi_ps_ddr_AWLEN,
        m_axi_ps_ddr_AWSIZE,
        m_axi_ps_ddr_AWBURST,
        m_axi_ps_ddr_AWLOCK,
        m_axi_ps_ddr_AWCACHE,
        m_axi_ps_ddr_AWPROT,
        m_axi_ps_ddr_AWQOS,
        m_axi_ps_ddr_AWREGION,
        m_axi_ps_ddr_AWUSER,
        m_axi_ps_ddr_WVALID,
        m_axi_ps_ddr_WREADY,
        m_axi_ps_ddr_WDATA,
        m_axi_ps_ddr_WSTRB,
        m_axi_ps_ddr_WLAST,
        m_axi_ps_ddr_WID,
        m_axi_ps_ddr_WUSER,
        m_axi_ps_ddr_ARVALID,
        m_axi_ps_ddr_ARREADY,
        m_axi_ps_ddr_ARADDR,
        m_axi_ps_ddr_ARID,
        m_axi_ps_ddr_ARLEN,
        m_axi_ps_ddr_ARSIZE,
        m_axi_ps_ddr_ARBURST,
        m_axi_ps_ddr_ARLOCK,
        m_axi_ps_ddr_ARCACHE,
        m_axi_ps_ddr_ARPROT,
        m_axi_ps_ddr_ARQOS,
        m_axi_ps_ddr_ARREGION,
        m_axi_ps_ddr_ARUSER,
        m_axi_ps_ddr_RVALID,
        m_axi_ps_ddr_RREADY,
        m_axi_ps_ddr_RDATA,
        m_axi_ps_ddr_RLAST,
        m_axi_ps_ddr_RID,
        m_axi_ps_ddr_RFIFONUM,
        m_axi_ps_ddr_RUSER,
        m_axi_ps_ddr_RRESP,
        m_axi_ps_ddr_BVALID,
        m_axi_ps_ddr_BREADY,
        m_axi_ps_ddr_BRESP,
        m_axi_ps_ddr_BID,
        m_axi_ps_ddr_BUSER,
        ddr,
        m_axi_clu_addr_AWVALID,
        m_axi_clu_addr_AWREADY,
        m_axi_clu_addr_AWADDR,
        m_axi_clu_addr_AWID,
        m_axi_clu_addr_AWLEN,
        m_axi_clu_addr_AWSIZE,
        m_axi_clu_addr_AWBURST,
        m_axi_clu_addr_AWLOCK,
        m_axi_clu_addr_AWCACHE,
        m_axi_clu_addr_AWPROT,
        m_axi_clu_addr_AWQOS,
        m_axi_clu_addr_AWREGION,
        m_axi_clu_addr_AWUSER,
        m_axi_clu_addr_WVALID,
        m_axi_clu_addr_WREADY,
        m_axi_clu_addr_WDATA,
        m_axi_clu_addr_WSTRB,
        m_axi_clu_addr_WLAST,
        m_axi_clu_addr_WID,
        m_axi_clu_addr_WUSER,
        m_axi_clu_addr_ARVALID,
        m_axi_clu_addr_ARREADY,
        m_axi_clu_addr_ARADDR,
        m_axi_clu_addr_ARID,
        m_axi_clu_addr_ARLEN,
        m_axi_clu_addr_ARSIZE,
        m_axi_clu_addr_ARBURST,
        m_axi_clu_addr_ARLOCK,
        m_axi_clu_addr_ARCACHE,
        m_axi_clu_addr_ARPROT,
        m_axi_clu_addr_ARQOS,
        m_axi_clu_addr_ARREGION,
        m_axi_clu_addr_ARUSER,
        m_axi_clu_addr_RVALID,
        m_axi_clu_addr_RREADY,
        m_axi_clu_addr_RDATA,
        m_axi_clu_addr_RLAST,
        m_axi_clu_addr_RID,
        m_axi_clu_addr_RFIFONUM,
        m_axi_clu_addr_RUSER,
        m_axi_clu_addr_RRESP,
        m_axi_clu_addr_BVALID,
        m_axi_clu_addr_BREADY,
        m_axi_clu_addr_BRESP,
        m_axi_clu_addr_BID,
        m_axi_clu_addr_BUSER,
        uartbase,
        ts_in,
        init_device_read,
        EN,
        received_uart,
        received_uart_ap_vld
);

parameter    ap_ST_fsm_state1 = 28'd1;
parameter    ap_ST_fsm_state2 = 28'd2;
parameter    ap_ST_fsm_state3 = 28'd4;
parameter    ap_ST_fsm_state4 = 28'd8;
parameter    ap_ST_fsm_state5 = 28'd16;
parameter    ap_ST_fsm_state6 = 28'd32;
parameter    ap_ST_fsm_state7 = 28'd64;
parameter    ap_ST_fsm_state8 = 28'd128;
parameter    ap_ST_fsm_state9 = 28'd256;
parameter    ap_ST_fsm_state10 = 28'd512;
parameter    ap_ST_fsm_state11 = 28'd1024;
parameter    ap_ST_fsm_state12 = 28'd2048;
parameter    ap_ST_fsm_state13 = 28'd4096;
parameter    ap_ST_fsm_state14 = 28'd8192;
parameter    ap_ST_fsm_state15 = 28'd16384;
parameter    ap_ST_fsm_state16 = 28'd32768;
parameter    ap_ST_fsm_state17 = 28'd65536;
parameter    ap_ST_fsm_state18 = 28'd131072;
parameter    ap_ST_fsm_state19 = 28'd262144;
parameter    ap_ST_fsm_state20 = 28'd524288;
parameter    ap_ST_fsm_state21 = 28'd1048576;
parameter    ap_ST_fsm_state22 = 28'd2097152;
parameter    ap_ST_fsm_state23 = 28'd4194304;
parameter    ap_ST_fsm_state24 = 28'd8388608;
parameter    ap_ST_fsm_state25 = 28'd16777216;
parameter    ap_ST_fsm_state26 = 28'd33554432;
parameter    ap_ST_fsm_state27 = 28'd67108864;
parameter    ap_ST_fsm_state28 = 28'd134217728;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_ps_ddr_AWVALID;
input   m_axi_ps_ddr_AWREADY;
output  [63:0] m_axi_ps_ddr_AWADDR;
output  [0:0] m_axi_ps_ddr_AWID;
output  [31:0] m_axi_ps_ddr_AWLEN;
output  [2:0] m_axi_ps_ddr_AWSIZE;
output  [1:0] m_axi_ps_ddr_AWBURST;
output  [1:0] m_axi_ps_ddr_AWLOCK;
output  [3:0] m_axi_ps_ddr_AWCACHE;
output  [2:0] m_axi_ps_ddr_AWPROT;
output  [3:0] m_axi_ps_ddr_AWQOS;
output  [3:0] m_axi_ps_ddr_AWREGION;
output  [0:0] m_axi_ps_ddr_AWUSER;
output   m_axi_ps_ddr_WVALID;
input   m_axi_ps_ddr_WREADY;
output  [7:0] m_axi_ps_ddr_WDATA;
output  [0:0] m_axi_ps_ddr_WSTRB;
output   m_axi_ps_ddr_WLAST;
output  [0:0] m_axi_ps_ddr_WID;
output  [0:0] m_axi_ps_ddr_WUSER;
output   m_axi_ps_ddr_ARVALID;
input   m_axi_ps_ddr_ARREADY;
output  [63:0] m_axi_ps_ddr_ARADDR;
output  [0:0] m_axi_ps_ddr_ARID;
output  [31:0] m_axi_ps_ddr_ARLEN;
output  [2:0] m_axi_ps_ddr_ARSIZE;
output  [1:0] m_axi_ps_ddr_ARBURST;
output  [1:0] m_axi_ps_ddr_ARLOCK;
output  [3:0] m_axi_ps_ddr_ARCACHE;
output  [2:0] m_axi_ps_ddr_ARPROT;
output  [3:0] m_axi_ps_ddr_ARQOS;
output  [3:0] m_axi_ps_ddr_ARREGION;
output  [0:0] m_axi_ps_ddr_ARUSER;
input   m_axi_ps_ddr_RVALID;
output   m_axi_ps_ddr_RREADY;
input  [7:0] m_axi_ps_ddr_RDATA;
input   m_axi_ps_ddr_RLAST;
input  [0:0] m_axi_ps_ddr_RID;
input  [10:0] m_axi_ps_ddr_RFIFONUM;
input  [0:0] m_axi_ps_ddr_RUSER;
input  [1:0] m_axi_ps_ddr_RRESP;
input   m_axi_ps_ddr_BVALID;
output   m_axi_ps_ddr_BREADY;
input  [1:0] m_axi_ps_ddr_BRESP;
input  [0:0] m_axi_ps_ddr_BID;
input  [0:0] m_axi_ps_ddr_BUSER;
input  [63:0] ddr;
output   m_axi_clu_addr_AWVALID;
input   m_axi_clu_addr_AWREADY;
output  [63:0] m_axi_clu_addr_AWADDR;
output  [0:0] m_axi_clu_addr_AWID;
output  [31:0] m_axi_clu_addr_AWLEN;
output  [2:0] m_axi_clu_addr_AWSIZE;
output  [1:0] m_axi_clu_addr_AWBURST;
output  [1:0] m_axi_clu_addr_AWLOCK;
output  [3:0] m_axi_clu_addr_AWCACHE;
output  [2:0] m_axi_clu_addr_AWPROT;
output  [3:0] m_axi_clu_addr_AWQOS;
output  [3:0] m_axi_clu_addr_AWREGION;
output  [0:0] m_axi_clu_addr_AWUSER;
output   m_axi_clu_addr_WVALID;
input   m_axi_clu_addr_WREADY;
output  [31:0] m_axi_clu_addr_WDATA;
output  [3:0] m_axi_clu_addr_WSTRB;
output   m_axi_clu_addr_WLAST;
output  [0:0] m_axi_clu_addr_WID;
output  [0:0] m_axi_clu_addr_WUSER;
output   m_axi_clu_addr_ARVALID;
input   m_axi_clu_addr_ARREADY;
output  [63:0] m_axi_clu_addr_ARADDR;
output  [0:0] m_axi_clu_addr_ARID;
output  [31:0] m_axi_clu_addr_ARLEN;
output  [2:0] m_axi_clu_addr_ARSIZE;
output  [1:0] m_axi_clu_addr_ARBURST;
output  [1:0] m_axi_clu_addr_ARLOCK;
output  [3:0] m_axi_clu_addr_ARCACHE;
output  [2:0] m_axi_clu_addr_ARPROT;
output  [3:0] m_axi_clu_addr_ARQOS;
output  [3:0] m_axi_clu_addr_ARREGION;
output  [0:0] m_axi_clu_addr_ARUSER;
input   m_axi_clu_addr_RVALID;
output   m_axi_clu_addr_RREADY;
input  [31:0] m_axi_clu_addr_RDATA;
input   m_axi_clu_addr_RLAST;
input  [0:0] m_axi_clu_addr_RID;
input  [8:0] m_axi_clu_addr_RFIFONUM;
input  [0:0] m_axi_clu_addr_RUSER;
input  [1:0] m_axi_clu_addr_RRESP;
input   m_axi_clu_addr_BVALID;
output   m_axi_clu_addr_BREADY;
input  [1:0] m_axi_clu_addr_BRESP;
input  [0:0] m_axi_clu_addr_BID;
input  [0:0] m_axi_clu_addr_BUSER;
input  [63:0] uartbase;
input  [63:0] ts_in;
input  [7:0] init_device_read;
input  [2:0] EN;
output  [31:0] received_uart;
output   received_uart_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_ps_ddr_AWVALID;
reg m_axi_ps_ddr_WVALID;
reg m_axi_ps_ddr_ARVALID;
reg m_axi_ps_ddr_RREADY;
reg m_axi_ps_ddr_BREADY;
reg m_axi_clu_addr_ARVALID;
reg[63:0] m_axi_clu_addr_ARADDR;
reg m_axi_clu_addr_RREADY;
reg received_uart_ap_vld;

(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] PL_Ctrl_fifo_index_address0;
reg    PL_Ctrl_fifo_index_ce0;
reg    PL_Ctrl_fifo_index_we0;
reg   [31:0] PL_Ctrl_fifo_index_d0;
wire   [31:0] PL_Ctrl_fifo_index_q0;
reg   [2:0] PL_Ctrl_first_time_address0;
reg    PL_Ctrl_first_time_ce0;
reg    PL_Ctrl_first_time_we0;
reg   [0:0] PL_Ctrl_first_time_d0;
wire   [0:0] PL_Ctrl_first_time_q0;
reg   [2:0] PL_Ctrl_first_timestamp_address0;
reg    PL_Ctrl_first_timestamp_ce0;
reg    PL_Ctrl_first_timestamp_we0;
reg   [63:0] PL_Ctrl_first_timestamp_d0;
wire   [63:0] PL_Ctrl_first_timestamp_q0;
reg   [10:0] uart_fifo_address0;
reg    uart_fifo_ce0;
reg    uart_fifo_we0;
reg   [7:0] uart_fifo_d0;
wire   [7:0] uart_fifo_q0;
reg   [10:0] uart_fifo_address1;
reg    uart_fifo_ce1;
reg    uart_fifo_we1;
reg   [7:0] uart_fifo_d1;
reg   [2:0] PL_Header_pkt_len_bytes_address0;
reg    PL_Header_pkt_len_bytes_ce0;
reg    PL_Header_pkt_len_bytes_we0;
reg   [15:0] PL_Header_pkt_len_bytes_d0;
wire   [15:0] PL_Header_pkt_len_bytes_q0;
reg   [31:0] internal_uart_counter;
reg    clu_addr_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    clu_addr_blk_n_R;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state23;
wire   [7:0] EN_cast8_fu_402_p1;
reg   [7:0] EN_cast8_reg_876;
wire   [0:0] icmp_ln173_fu_418_p2;
reg   [0:0] icmp_ln173_reg_881;
wire   [18:0] shl_ln_fu_424_p3;
reg   [18:0] shl_ln_reg_885;
reg   [63:0] clu_addr_addr_reg_890;
reg   [0:0] tmp_reg_896;
wire   [0:0] trunc_ln177_fu_476_p1;
reg   [0:0] trunc_ln177_reg_901;
wire   [0:0] icmp_ln177_fu_488_p2;
reg   [0:0] icmp_ln177_reg_906;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln209_fu_494_p1;
reg   [63:0] zext_ln209_reg_910;
wire   [10:0] mul_ln188_fu_502_p2;
reg   [10:0] mul_ln188_reg_917;
reg   [10:0] uart_fifo_addr_reg_922;
reg   [10:0] uart_fifo_addr_1_reg_927;
reg   [10:0] uart_fifo_addr_2_reg_932;
reg   [10:0] uart_fifo_addr_3_reg_937;
reg   [10:0] uart_fifo_addr_4_reg_942;
reg   [10:0] uart_fifo_addr_5_reg_947;
reg   [10:0] uart_fifo_addr_6_reg_952;
reg   [10:0] uart_fifo_addr_7_reg_957;
reg   [10:0] uart_fifo_addr_8_reg_962;
reg   [10:0] uart_fifo_addr_9_reg_967;
reg   [10:0] uart_fifo_addr_11_reg_972;
reg   [10:0] uart_fifo_addr_12_reg_977;
reg   [2:0] PL_Ctrl_fifo_index_addr_reg_982;
reg   [2:0] PL_Ctrl_first_time_addr_reg_987;
reg   [31:0] single_index_reg_992;
wire    ap_CS_fsm_state11;
reg   [0:0] PL_Ctrl_first_time_load_reg_998;
reg   [63:0] clu_addr_addr_1_reg_1002;
wire    ap_CS_fsm_state15;
wire   [10:0] add_ln203_fu_745_p2;
reg   [10:0] add_ln203_reg_1008;
wire   [7:0] rxData_fu_756_p1;
reg   [7:0] rxData_reg_1013;
reg   [2:0] PL_Header_pkt_len_bytes_addr_reg_1018;
wire    ap_CS_fsm_state24;
wire   [2:0] PL_Ctrl_first_timestamp_addr_1_gep_fu_374_p3;
wire    ap_CS_fsm_state25;
wire   [0:0] or_ln210_fu_822_p2;
reg   [0:0] or_ln210_reg_1028;
wire    ap_CS_fsm_state26;
wire    grp_ddr_write_1_fu_382_ap_start;
wire    grp_ddr_write_1_fu_382_ap_done;
wire    grp_ddr_write_1_fu_382_ap_idle;
wire    grp_ddr_write_1_fu_382_ap_ready;
wire    grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWVALID;
wire   [63:0] grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWADDR;
wire   [0:0] grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWID;
wire   [31:0] grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWLEN;
wire   [2:0] grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWSIZE;
wire   [1:0] grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWBURST;
wire   [1:0] grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWLOCK;
wire   [3:0] grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWCACHE;
wire   [2:0] grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWPROT;
wire   [3:0] grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWQOS;
wire   [3:0] grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWREGION;
wire   [0:0] grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWUSER;
wire    grp_ddr_write_1_fu_382_m_axi_ps_ddr_WVALID;
wire   [7:0] grp_ddr_write_1_fu_382_m_axi_ps_ddr_WDATA;
wire   [0:0] grp_ddr_write_1_fu_382_m_axi_ps_ddr_WSTRB;
wire    grp_ddr_write_1_fu_382_m_axi_ps_ddr_WLAST;
wire   [0:0] grp_ddr_write_1_fu_382_m_axi_ps_ddr_WID;
wire   [0:0] grp_ddr_write_1_fu_382_m_axi_ps_ddr_WUSER;
wire    grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARVALID;
wire   [63:0] grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARADDR;
wire   [0:0] grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARID;
wire   [31:0] grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARLEN;
wire   [2:0] grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARSIZE;
wire   [1:0] grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARBURST;
wire   [1:0] grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARLOCK;
wire   [3:0] grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARCACHE;
wire   [2:0] grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARPROT;
wire   [3:0] grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARQOS;
wire   [3:0] grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARREGION;
wire   [0:0] grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARUSER;
wire    grp_ddr_write_1_fu_382_m_axi_ps_ddr_RREADY;
wire    grp_ddr_write_1_fu_382_m_axi_ps_ddr_BREADY;
wire   [10:0] grp_ddr_write_1_fu_382_uart_fifo_address0;
wire    grp_ddr_write_1_fu_382_uart_fifo_ce0;
wire   [2:0] grp_ddr_write_1_fu_382_PL_Ctrl_fifo_index_address0;
wire    grp_ddr_write_1_fu_382_PL_Ctrl_fifo_index_ce0;
wire    grp_ddr_write_1_fu_382_PL_Ctrl_fifo_index_we0;
wire   [31:0] grp_ddr_write_1_fu_382_PL_Ctrl_fifo_index_d0;
wire   [2:0] grp_ddr_write_1_fu_382_PL_Header_pkt_len_bytes_address0;
wire    grp_ddr_write_1_fu_382_PL_Header_pkt_len_bytes_ce0;
wire    grp_ddr_write_1_fu_382_PL_Header_pkt_len_bytes_we0;
wire   [15:0] grp_ddr_write_1_fu_382_PL_Header_pkt_len_bytes_d0;
wire   [2:0] grp_ddr_write_1_fu_382_PL_Ctrl_first_time_address0;
wire    grp_ddr_write_1_fu_382_PL_Ctrl_first_time_ce0;
wire    grp_ddr_write_1_fu_382_PL_Ctrl_first_time_we0;
wire   [0:0] grp_ddr_write_1_fu_382_PL_Ctrl_first_time_d0;
wire   [2:0] grp_ddr_write_1_fu_382_PL_Ctrl_first_timestamp_address0;
wire    grp_ddr_write_1_fu_382_PL_Ctrl_first_timestamp_ce0;
wire    grp_ddr_write_1_fu_382_PL_Ctrl_first_timestamp_we0;
wire   [63:0] grp_ddr_write_1_fu_382_PL_Ctrl_first_timestamp_d0;
reg    grp_ddr_write_1_fu_382_ap_start_reg;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
reg    ap_predicate_op178_call_state28;
reg    ap_block_state28_on_subcall_done;
wire   [63:0] zext_ln188_1_fu_508_p1;
wire   [63:0] zext_ln189_fu_519_p1;
wire   [63:0] zext_ln190_fu_530_p1;
wire   [63:0] zext_ln191_fu_541_p1;
wire   [63:0] zext_ln192_fu_552_p1;
wire   [63:0] zext_ln193_fu_563_p1;
wire   [63:0] zext_ln194_fu_574_p1;
wire   [63:0] zext_ln195_fu_585_p1;
wire   [63:0] zext_ln196_fu_596_p1;
wire   [63:0] zext_ln197_fu_607_p1;
wire   [63:0] zext_ln206_fu_618_p1;
wire   [63:0] zext_ln207_fu_629_p1;
wire   [63:0] zext_ln203_fu_760_p1;
wire  signed [63:0] sext_ln176_fu_458_p1;
wire  signed [63:0] sext_ln200_fu_732_p1;
wire   [31:0] add_ln211_fu_832_p2;
wire   [31:0] add_ln204_fu_750_p2;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire   [7:0] trunc_ln195_fu_704_p1;
wire   [7:0] add_ln207_fu_786_p2;
wire   [15:0] add_ln205_fu_768_p2;
wire   [7:0] enable_fu_406_p2;
wire   [7:0] and_ln173_fu_412_p2;
wire   [18:0] or_ln176_fu_432_p2;
wire   [63:0] zext_ln176_fu_438_p1;
wire   [63:0] add_ln176_fu_442_p2;
wire   [61:0] trunc_ln_fu_448_p4;
wire   [4:0] and_ln_fu_480_p4;
wire   [2:0] mul_ln188_fu_502_p0;
wire   [8:0] mul_ln188_fu_502_p1;
wire   [10:0] or_ln189_fu_513_p2;
wire   [10:0] or_ln190_fu_524_p2;
wire   [10:0] or_ln191_fu_535_p2;
wire   [10:0] add_ln192_fu_546_p2;
wire   [10:0] add_ln193_fu_557_p2;
wire   [10:0] add_ln194_fu_568_p2;
wire   [10:0] add_ln195_fu_579_p2;
wire   [10:0] add_ln196_fu_590_p2;
wire   [10:0] add_ln197_fu_601_p2;
wire   [10:0] add_ln206_fu_612_p2;
wire   [10:0] add_ln207_1_fu_623_p2;
wire   [18:0] or_ln200_fu_708_p2;
wire   [63:0] zext_ln200_fu_713_p1;
wire   [63:0] add_ln200_fu_717_p2;
wire   [61:0] trunc_ln9_fu_722_p4;
wire   [10:0] trunc_ln203_fu_742_p1;
wire   [7:0] trunc_ln205_fu_764_p1;
wire   [63:0] sub_ln209_fu_793_p2;
wire   [0:0] icmp_ln210_1_fu_804_p2;
wire   [0:0] icmp_ln210_2_fu_810_p2;
wire   [0:0] icmp_ln210_fu_798_p2;
wire   [0:0] and_ln210_fu_816_p2;
reg   [27:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
reg    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
reg    ap_ST_fsm_state28_blk;
wire   [10:0] mul_ln188_fu_502_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 28'd1;
#0 internal_uart_counter = 32'd0;
#0 grp_ddr_write_1_fu_382_ap_start_reg = 1'b0;
end

clu_uart_data_read_1_PL_Ctrl_fifo_index_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
PL_Ctrl_fifo_index_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(PL_Ctrl_fifo_index_address0),
    .ce0(PL_Ctrl_fifo_index_ce0),
    .we0(PL_Ctrl_fifo_index_we0),
    .d0(PL_Ctrl_fifo_index_d0),
    .q0(PL_Ctrl_fifo_index_q0)
);

clu_uart_data_read_1_PL_Ctrl_first_time_RAM_AUTO_1R1W #(
    .DataWidth( 1 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
PL_Ctrl_first_time_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(PL_Ctrl_first_time_address0),
    .ce0(PL_Ctrl_first_time_ce0),
    .we0(PL_Ctrl_first_time_we0),
    .d0(PL_Ctrl_first_time_d0),
    .q0(PL_Ctrl_first_time_q0)
);

clu_uart_data_read_1_PL_Ctrl_first_timestamp_RAM_AUTO_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
PL_Ctrl_first_timestamp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(PL_Ctrl_first_timestamp_address0),
    .ce0(PL_Ctrl_first_timestamp_ce0),
    .we0(PL_Ctrl_first_timestamp_we0),
    .d0(PL_Ctrl_first_timestamp_d0),
    .q0(PL_Ctrl_first_timestamp_q0)
);

clu_uart_data_read_1_uart_fifo_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 1632 ),
    .AddressWidth( 11 ))
uart_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(uart_fifo_address0),
    .ce0(uart_fifo_ce0),
    .we0(uart_fifo_we0),
    .d0(uart_fifo_d0),
    .q0(uart_fifo_q0),
    .address1(uart_fifo_address1),
    .ce1(uart_fifo_ce1),
    .we1(uart_fifo_we1),
    .d1(uart_fifo_d1)
);

clu_uart_data_read_1_PL_Header_pkt_len_bytes_RAM_AUTO_1R1W #(
    .DataWidth( 16 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
PL_Header_pkt_len_bytes_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(PL_Header_pkt_len_bytes_address0),
    .ce0(PL_Header_pkt_len_bytes_ce0),
    .we0(PL_Header_pkt_len_bytes_we0),
    .d0(PL_Header_pkt_len_bytes_d0),
    .q0(PL_Header_pkt_len_bytes_q0)
);

clu_ddr_write_1 grp_ddr_write_1_fu_382(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_ddr_write_1_fu_382_ap_start),
    .ap_done(grp_ddr_write_1_fu_382_ap_done),
    .ap_idle(grp_ddr_write_1_fu_382_ap_idle),
    .ap_ready(grp_ddr_write_1_fu_382_ap_ready),
    .m_axi_ps_ddr_AWVALID(grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWVALID),
    .m_axi_ps_ddr_AWREADY(m_axi_ps_ddr_AWREADY),
    .m_axi_ps_ddr_AWADDR(grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWADDR),
    .m_axi_ps_ddr_AWID(grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWID),
    .m_axi_ps_ddr_AWLEN(grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWLEN),
    .m_axi_ps_ddr_AWSIZE(grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWSIZE),
    .m_axi_ps_ddr_AWBURST(grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWBURST),
    .m_axi_ps_ddr_AWLOCK(grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWLOCK),
    .m_axi_ps_ddr_AWCACHE(grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWCACHE),
    .m_axi_ps_ddr_AWPROT(grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWPROT),
    .m_axi_ps_ddr_AWQOS(grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWQOS),
    .m_axi_ps_ddr_AWREGION(grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWREGION),
    .m_axi_ps_ddr_AWUSER(grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWUSER),
    .m_axi_ps_ddr_WVALID(grp_ddr_write_1_fu_382_m_axi_ps_ddr_WVALID),
    .m_axi_ps_ddr_WREADY(m_axi_ps_ddr_WREADY),
    .m_axi_ps_ddr_WDATA(grp_ddr_write_1_fu_382_m_axi_ps_ddr_WDATA),
    .m_axi_ps_ddr_WSTRB(grp_ddr_write_1_fu_382_m_axi_ps_ddr_WSTRB),
    .m_axi_ps_ddr_WLAST(grp_ddr_write_1_fu_382_m_axi_ps_ddr_WLAST),
    .m_axi_ps_ddr_WID(grp_ddr_write_1_fu_382_m_axi_ps_ddr_WID),
    .m_axi_ps_ddr_WUSER(grp_ddr_write_1_fu_382_m_axi_ps_ddr_WUSER),
    .m_axi_ps_ddr_ARVALID(grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARVALID),
    .m_axi_ps_ddr_ARREADY(m_axi_ps_ddr_ARREADY),
    .m_axi_ps_ddr_ARADDR(grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARADDR),
    .m_axi_ps_ddr_ARID(grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARID),
    .m_axi_ps_ddr_ARLEN(grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARLEN),
    .m_axi_ps_ddr_ARSIZE(grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARSIZE),
    .m_axi_ps_ddr_ARBURST(grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARBURST),
    .m_axi_ps_ddr_ARLOCK(grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARLOCK),
    .m_axi_ps_ddr_ARCACHE(grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARCACHE),
    .m_axi_ps_ddr_ARPROT(grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARPROT),
    .m_axi_ps_ddr_ARQOS(grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARQOS),
    .m_axi_ps_ddr_ARREGION(grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARREGION),
    .m_axi_ps_ddr_ARUSER(grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARUSER),
    .m_axi_ps_ddr_RVALID(m_axi_ps_ddr_RVALID),
    .m_axi_ps_ddr_RREADY(grp_ddr_write_1_fu_382_m_axi_ps_ddr_RREADY),
    .m_axi_ps_ddr_RDATA(m_axi_ps_ddr_RDATA),
    .m_axi_ps_ddr_RLAST(m_axi_ps_ddr_RLAST),
    .m_axi_ps_ddr_RID(m_axi_ps_ddr_RID),
    .m_axi_ps_ddr_RFIFONUM(m_axi_ps_ddr_RFIFONUM),
    .m_axi_ps_ddr_RUSER(m_axi_ps_ddr_RUSER),
    .m_axi_ps_ddr_RRESP(m_axi_ps_ddr_RRESP),
    .m_axi_ps_ddr_BVALID(m_axi_ps_ddr_BVALID),
    .m_axi_ps_ddr_BREADY(grp_ddr_write_1_fu_382_m_axi_ps_ddr_BREADY),
    .m_axi_ps_ddr_BRESP(m_axi_ps_ddr_BRESP),
    .m_axi_ps_ddr_BID(m_axi_ps_ddr_BID),
    .m_axi_ps_ddr_BUSER(m_axi_ps_ddr_BUSER),
    .ddr_header(ddr),
    .device_id(EN),
    .uart_fifo_address0(grp_ddr_write_1_fu_382_uart_fifo_address0),
    .uart_fifo_ce0(grp_ddr_write_1_fu_382_uart_fifo_ce0),
    .uart_fifo_q0(uart_fifo_q0),
    .PL_Ctrl_fifo_index_address0(grp_ddr_write_1_fu_382_PL_Ctrl_fifo_index_address0),
    .PL_Ctrl_fifo_index_ce0(grp_ddr_write_1_fu_382_PL_Ctrl_fifo_index_ce0),
    .PL_Ctrl_fifo_index_we0(grp_ddr_write_1_fu_382_PL_Ctrl_fifo_index_we0),
    .PL_Ctrl_fifo_index_d0(grp_ddr_write_1_fu_382_PL_Ctrl_fifo_index_d0),
    .PL_Header_pkt_len_bytes_address0(grp_ddr_write_1_fu_382_PL_Header_pkt_len_bytes_address0),
    .PL_Header_pkt_len_bytes_ce0(grp_ddr_write_1_fu_382_PL_Header_pkt_len_bytes_ce0),
    .PL_Header_pkt_len_bytes_we0(grp_ddr_write_1_fu_382_PL_Header_pkt_len_bytes_we0),
    .PL_Header_pkt_len_bytes_d0(grp_ddr_write_1_fu_382_PL_Header_pkt_len_bytes_d0),
    .PL_Ctrl_first_time_address0(grp_ddr_write_1_fu_382_PL_Ctrl_first_time_address0),
    .PL_Ctrl_first_time_ce0(grp_ddr_write_1_fu_382_PL_Ctrl_first_time_ce0),
    .PL_Ctrl_first_time_we0(grp_ddr_write_1_fu_382_PL_Ctrl_first_time_we0),
    .PL_Ctrl_first_time_d0(grp_ddr_write_1_fu_382_PL_Ctrl_first_time_d0),
    .PL_Ctrl_first_timestamp_address0(grp_ddr_write_1_fu_382_PL_Ctrl_first_timestamp_address0),
    .PL_Ctrl_first_timestamp_ce0(grp_ddr_write_1_fu_382_PL_Ctrl_first_timestamp_ce0),
    .PL_Ctrl_first_timestamp_we0(grp_ddr_write_1_fu_382_PL_Ctrl_first_timestamp_we0),
    .PL_Ctrl_first_timestamp_d0(grp_ddr_write_1_fu_382_PL_Ctrl_first_timestamp_d0)
);

clu_mul_3ns_9ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 11 ))
mul_3ns_9ns_11_1_1_U28(
    .din0(mul_ln188_fu_502_p0),
    .din1(mul_ln188_fu_502_p1),
    .dout(mul_ln188_fu_502_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_ddr_write_1_fu_382_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state27)) begin
            grp_ddr_write_1_fu_382_ap_start_reg <= 1'b1;
        end else if ((grp_ddr_write_1_fu_382_ap_ready == 1'b1)) begin
            grp_ddr_write_1_fu_382_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        EN_cast8_reg_876[2 : 0] <= EN_cast8_fu_402_p1[2 : 0];
        icmp_ln173_reg_881 <= icmp_ln173_fu_418_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        PL_Ctrl_fifo_index_addr_reg_982 <= zext_ln209_fu_494_p1;
        icmp_ln177_reg_906 <= icmp_ln177_fu_488_p2;
        mul_ln188_reg_917 <= mul_ln188_fu_502_p2;
        uart_fifo_addr_11_reg_972 <= zext_ln206_fu_618_p1;
        uart_fifo_addr_12_reg_977 <= zext_ln207_fu_629_p1;
        uart_fifo_addr_1_reg_927[10 : 1] <= zext_ln189_fu_519_p1[10 : 1];
        uart_fifo_addr_2_reg_932[0] <= zext_ln190_fu_530_p1[0];
uart_fifo_addr_2_reg_932[10 : 2] <= zext_ln190_fu_530_p1[10 : 2];
        uart_fifo_addr_3_reg_937[10 : 2] <= zext_ln191_fu_541_p1[10 : 2];
        uart_fifo_addr_4_reg_942 <= zext_ln192_fu_552_p1;
        uart_fifo_addr_5_reg_947 <= zext_ln193_fu_563_p1;
        uart_fifo_addr_6_reg_952 <= zext_ln194_fu_574_p1;
        uart_fifo_addr_7_reg_957 <= zext_ln195_fu_585_p1;
        uart_fifo_addr_8_reg_962 <= zext_ln196_fu_596_p1;
        uart_fifo_addr_9_reg_967 <= zext_ln197_fu_607_p1;
        uart_fifo_addr_reg_922 <= zext_ln188_1_fu_508_p1;
        zext_ln209_reg_910[2 : 0] <= zext_ln209_fu_494_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln177_fu_488_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        PL_Ctrl_first_time_addr_reg_987 <= zext_ln209_fu_494_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        PL_Ctrl_first_time_load_reg_998 <= PL_Ctrl_first_time_q0;
        single_index_reg_992 <= PL_Ctrl_fifo_index_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        PL_Header_pkt_len_bytes_addr_reg_1018 <= zext_ln209_reg_910;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        add_ln203_reg_1008 <= add_ln203_fu_745_p2;
        clu_addr_addr_1_reg_1002 <= sext_ln200_fu_732_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln173_fu_418_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        clu_addr_addr_reg_890 <= sext_ln176_fu_458_p1;
        shl_ln_reg_885[18 : 16] <= shl_ln_fu_424_p3[18 : 16];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        internal_uart_counter <= add_ln211_fu_832_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        or_ln210_reg_1028 <= or_ln210_fu_822_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        rxData_reg_1013 <= rxData_fu_756_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_reg_896 <= m_axi_clu_addr_RDATA[32'd4];
        trunc_ln177_reg_901 <= trunc_ln177_fu_476_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state15))) begin
        PL_Ctrl_fifo_index_address0 = PL_Ctrl_fifo_index_addr_reg_982;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        PL_Ctrl_fifo_index_address0 = zext_ln209_fu_494_p1;
    end else if (((ap_predicate_op178_call_state28 == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        PL_Ctrl_fifo_index_address0 = grp_ddr_write_1_fu_382_PL_Ctrl_fifo_index_address0;
    end else begin
        PL_Ctrl_fifo_index_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10))) begin
        PL_Ctrl_fifo_index_ce0 = 1'b1;
    end else if (((ap_predicate_op178_call_state28 == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        PL_Ctrl_fifo_index_ce0 = grp_ddr_write_1_fu_382_PL_Ctrl_fifo_index_ce0;
    end else begin
        PL_Ctrl_fifo_index_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        PL_Ctrl_fifo_index_d0 = add_ln204_fu_750_p2;
    end else if (((ap_predicate_op178_call_state28 == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        PL_Ctrl_fifo_index_d0 = grp_ddr_write_1_fu_382_PL_Ctrl_fifo_index_d0;
    end else begin
        PL_Ctrl_fifo_index_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        PL_Ctrl_fifo_index_we0 = 1'b1;
    end else if (((ap_predicate_op178_call_state28 == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        PL_Ctrl_fifo_index_we0 = grp_ddr_write_1_fu_382_PL_Ctrl_fifo_index_we0;
    end else begin
        PL_Ctrl_fifo_index_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        PL_Ctrl_first_time_address0 = PL_Ctrl_first_time_addr_reg_987;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        PL_Ctrl_first_time_address0 = zext_ln209_fu_494_p1;
    end else if (((ap_predicate_op178_call_state28 == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        PL_Ctrl_first_time_address0 = grp_ddr_write_1_fu_382_PL_Ctrl_first_time_address0;
    end else begin
        PL_Ctrl_first_time_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        PL_Ctrl_first_time_ce0 = 1'b1;
    end else if (((ap_predicate_op178_call_state28 == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        PL_Ctrl_first_time_ce0 = grp_ddr_write_1_fu_382_PL_Ctrl_first_time_ce0;
    end else begin
        PL_Ctrl_first_time_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        PL_Ctrl_first_time_d0 = 1'd0;
    end else if (((ap_predicate_op178_call_state28 == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        PL_Ctrl_first_time_d0 = grp_ddr_write_1_fu_382_PL_Ctrl_first_time_d0;
    end else begin
        PL_Ctrl_first_time_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'd1 == PL_Ctrl_first_time_q0) & (1'b1 == ap_CS_fsm_state11))) begin
        PL_Ctrl_first_time_we0 = 1'b1;
    end else if (((ap_predicate_op178_call_state28 == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        PL_Ctrl_first_time_we0 = grp_ddr_write_1_fu_382_PL_Ctrl_first_time_we0;
    end else begin
        PL_Ctrl_first_time_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        PL_Ctrl_first_timestamp_address0 = PL_Ctrl_first_timestamp_addr_1_gep_fu_374_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        PL_Ctrl_first_timestamp_address0 = zext_ln209_reg_910;
    end else if (((ap_predicate_op178_call_state28 == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        PL_Ctrl_first_timestamp_address0 = grp_ddr_write_1_fu_382_PL_Ctrl_first_timestamp_address0;
    end else begin
        PL_Ctrl_first_timestamp_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state11))) begin
        PL_Ctrl_first_timestamp_ce0 = 1'b1;
    end else if (((ap_predicate_op178_call_state28 == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        PL_Ctrl_first_timestamp_ce0 = grp_ddr_write_1_fu_382_PL_Ctrl_first_timestamp_ce0;
    end else begin
        PL_Ctrl_first_timestamp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        PL_Ctrl_first_timestamp_d0 = ts_in;
    end else if (((ap_predicate_op178_call_state28 == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        PL_Ctrl_first_timestamp_d0 = grp_ddr_write_1_fu_382_PL_Ctrl_first_timestamp_d0;
    end else begin
        PL_Ctrl_first_timestamp_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'd1 == PL_Ctrl_first_time_q0) & (1'b1 == ap_CS_fsm_state11))) begin
        PL_Ctrl_first_timestamp_we0 = 1'b1;
    end else if (((ap_predicate_op178_call_state28 == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        PL_Ctrl_first_timestamp_we0 = grp_ddr_write_1_fu_382_PL_Ctrl_first_timestamp_we0;
    end else begin
        PL_Ctrl_first_timestamp_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        PL_Header_pkt_len_bytes_address0 = PL_Header_pkt_len_bytes_addr_reg_1018;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        PL_Header_pkt_len_bytes_address0 = zext_ln209_reg_910;
    end else if (((ap_predicate_op178_call_state28 == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        PL_Header_pkt_len_bytes_address0 = grp_ddr_write_1_fu_382_PL_Header_pkt_len_bytes_address0;
    end else begin
        PL_Header_pkt_len_bytes_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        PL_Header_pkt_len_bytes_ce0 = 1'b1;
    end else if (((ap_predicate_op178_call_state28 == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        PL_Header_pkt_len_bytes_ce0 = grp_ddr_write_1_fu_382_PL_Header_pkt_len_bytes_ce0;
    end else begin
        PL_Header_pkt_len_bytes_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        PL_Header_pkt_len_bytes_d0 = add_ln205_fu_768_p2;
    end else if (((ap_predicate_op178_call_state28 == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        PL_Header_pkt_len_bytes_d0 = grp_ddr_write_1_fu_382_PL_Header_pkt_len_bytes_d0;
    end else begin
        PL_Header_pkt_len_bytes_d0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln177_reg_906 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
        PL_Header_pkt_len_bytes_we0 = 1'b1;
    end else if (((ap_predicate_op178_call_state28 == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        PL_Header_pkt_len_bytes_we0 = grp_ddr_write_1_fu_382_PL_Header_pkt_len_bytes_we0;
    end else begin
        PL_Header_pkt_len_bytes_we0 = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

always @ (*) begin
    if ((m_axi_clu_addr_ARREADY == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

always @ (*) begin
    if ((m_axi_clu_addr_RVALID == 1'b0)) begin
        ap_ST_fsm_state23_blk = 1'b1;
    end else begin
        ap_ST_fsm_state23_blk = 1'b0;
    end
end

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state28_on_subcall_done)) begin
        ap_ST_fsm_state28_blk = 1'b1;
    end else begin
        ap_ST_fsm_state28_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_clu_addr_ARREADY == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((m_axi_clu_addr_RVALID == 1'b0)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state28_on_subcall_done) & (1'b1 == ap_CS_fsm_state28)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state28_on_subcall_done) & (1'b1 == ap_CS_fsm_state28))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state2))) begin
        clu_addr_blk_n_AR = m_axi_clu_addr_ARREADY;
    end else begin
        clu_addr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state9))) begin
        clu_addr_blk_n_R = m_axi_clu_addr_RVALID;
    end else begin
        clu_addr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((m_axi_clu_addr_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state16)) begin
            m_axi_clu_addr_ARADDR = clu_addr_addr_1_reg_1002;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            m_axi_clu_addr_ARADDR = clu_addr_addr_reg_890;
        end else begin
            m_axi_clu_addr_ARADDR = 'bx;
        end
    end else begin
        m_axi_clu_addr_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state16) & (m_axi_clu_addr_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & (m_axi_clu_addr_ARREADY == 1'b1)))) begin
        m_axi_clu_addr_ARVALID = 1'b1;
    end else begin
        m_axi_clu_addr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state23) & (m_axi_clu_addr_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & (m_axi_clu_addr_RVALID == 1'b1)))) begin
        m_axi_clu_addr_RREADY = 1'b1;
    end else begin
        m_axi_clu_addr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | ((or_ln210_reg_1028 == 1'd1) & (icmp_ln173_reg_881 == 1'd0) & (1'b1 == ap_CS_fsm_state28)))) begin
        m_axi_ps_ddr_ARVALID = grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARVALID;
    end else begin
        m_axi_ps_ddr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | ((or_ln210_reg_1028 == 1'd1) & (icmp_ln173_reg_881 == 1'd0) & (1'b1 == ap_CS_fsm_state28)))) begin
        m_axi_ps_ddr_AWVALID = grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWVALID;
    end else begin
        m_axi_ps_ddr_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | ((or_ln210_reg_1028 == 1'd1) & (icmp_ln173_reg_881 == 1'd0) & (1'b1 == ap_CS_fsm_state28)))) begin
        m_axi_ps_ddr_BREADY = grp_ddr_write_1_fu_382_m_axi_ps_ddr_BREADY;
    end else begin
        m_axi_ps_ddr_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | ((or_ln210_reg_1028 == 1'd1) & (icmp_ln173_reg_881 == 1'd0) & (1'b1 == ap_CS_fsm_state28)))) begin
        m_axi_ps_ddr_RREADY = grp_ddr_write_1_fu_382_m_axi_ps_ddr_RREADY;
    end else begin
        m_axi_ps_ddr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | ((or_ln210_reg_1028 == 1'd1) & (icmp_ln173_reg_881 == 1'd0) & (1'b1 == ap_CS_fsm_state28)))) begin
        m_axi_ps_ddr_WVALID = grp_ddr_write_1_fu_382_m_axi_ps_ddr_WVALID;
    end else begin
        m_axi_ps_ddr_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        received_uart_ap_vld = 1'b1;
    end else begin
        received_uart_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        uart_fifo_address0 = uart_fifo_addr_11_reg_972;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        uart_fifo_address0 = zext_ln203_fu_760_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        uart_fifo_address0 = uart_fifo_addr_9_reg_967;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        uart_fifo_address0 = uart_fifo_addr_7_reg_957;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        uart_fifo_address0 = uart_fifo_addr_5_reg_947;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        uart_fifo_address0 = uart_fifo_addr_3_reg_937;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        uart_fifo_address0 = uart_fifo_addr_1_reg_927;
    end else if (((ap_predicate_op178_call_state28 == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        uart_fifo_address0 = grp_ddr_write_1_fu_382_uart_fifo_address0;
    end else begin
        uart_fifo_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        uart_fifo_address1 = uart_fifo_addr_12_reg_977;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        uart_fifo_address1 = uart_fifo_addr_8_reg_962;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        uart_fifo_address1 = uart_fifo_addr_6_reg_952;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        uart_fifo_address1 = uart_fifo_addr_4_reg_942;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        uart_fifo_address1 = uart_fifo_addr_2_reg_932;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        uart_fifo_address1 = uart_fifo_addr_reg_922;
    end else begin
        uart_fifo_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11))) begin
        uart_fifo_ce0 = 1'b1;
    end else if (((ap_predicate_op178_call_state28 == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        uart_fifo_ce0 = grp_ddr_write_1_fu_382_uart_fifo_ce0;
    end else begin
        uart_fifo_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11))) begin
        uart_fifo_ce1 = 1'b1;
    end else begin
        uart_fifo_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        uart_fifo_d0 = {{add_ln205_fu_768_p2[15:8]}};
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        uart_fifo_d0 = rxData_reg_1013;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        uart_fifo_d0 = EN_cast8_reg_876;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        uart_fifo_d0 = trunc_ln195_fu_704_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        uart_fifo_d0 = {{ts_in[23:16]}};
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        uart_fifo_d0 = {{ts_in[39:32]}};
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        uart_fifo_d0 = {{ts_in[55:48]}};
    end else begin
        uart_fifo_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        uart_fifo_d1 = add_ln207_fu_786_p2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        uart_fifo_d1 = 8'd4;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        uart_fifo_d1 = {{ts_in[15:8]}};
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        uart_fifo_d1 = {{ts_in[31:24]}};
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        uart_fifo_d1 = {{ts_in[47:40]}};
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        uart_fifo_d1 = {{ts_in[63:56]}};
    end else begin
        uart_fifo_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state24) | ((icmp_ln177_reg_906 == 1'd0) & (1'b1 == ap_CS_fsm_state25)) | ((1'd1 == PL_Ctrl_first_time_load_reg_998) & (1'b1 == ap_CS_fsm_state15)) | ((1'd1 == PL_Ctrl_first_time_q0) & (1'b1 == ap_CS_fsm_state11)))) begin
        uart_fifo_we0 = 1'b1;
    end else begin
        uart_fifo_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | ((icmp_ln177_reg_906 == 1'd0) & (1'b1 == ap_CS_fsm_state25)) | ((1'd1 == PL_Ctrl_first_time_load_reg_998) & (1'b1 == ap_CS_fsm_state15)) | ((1'd1 == PL_Ctrl_first_time_q0) & (1'b1 == ap_CS_fsm_state11)))) begin
        uart_fifo_we1 = 1'b1;
    end else begin
        uart_fifo_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (icmp_ln173_fu_418_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else if (((ap_start == 1'b1) & (icmp_ln173_fu_418_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (m_axi_clu_addr_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (m_axi_clu_addr_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln177_fu_488_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (1'd0 == PL_Ctrl_first_time_q0))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (m_axi_clu_addr_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (m_axi_clu_addr_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((or_ln210_fu_822_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((1'b0 == ap_block_state28_on_subcall_done) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign EN_cast8_fu_402_p1 = EN;

assign PL_Ctrl_first_timestamp_addr_1_gep_fu_374_p3 = zext_ln209_reg_910;

assign add_ln176_fu_442_p2 = (zext_ln176_fu_438_p1 + uartbase);

assign add_ln192_fu_546_p2 = (mul_ln188_fu_502_p2 + 11'd4);

assign add_ln193_fu_557_p2 = (mul_ln188_fu_502_p2 + 11'd5);

assign add_ln194_fu_568_p2 = (mul_ln188_fu_502_p2 + 11'd6);

assign add_ln195_fu_579_p2 = (mul_ln188_fu_502_p2 + 11'd7);

assign add_ln196_fu_590_p2 = (mul_ln188_fu_502_p2 + 11'd8);

assign add_ln197_fu_601_p2 = (mul_ln188_fu_502_p2 + 11'd9);

assign add_ln200_fu_717_p2 = (zext_ln200_fu_713_p1 + uartbase);

assign add_ln203_fu_745_p2 = (mul_ln188_reg_917 + trunc_ln203_fu_742_p1);

assign add_ln204_fu_750_p2 = (single_index_reg_992 + 32'd1);

assign add_ln205_fu_768_p2 = (PL_Header_pkt_len_bytes_q0 + 16'd1);

assign add_ln206_fu_612_p2 = (mul_ln188_fu_502_p2 + 11'd10);

assign add_ln207_1_fu_623_p2 = (mul_ln188_fu_502_p2 + 11'd11);

assign add_ln207_fu_786_p2 = (trunc_ln205_fu_764_p1 + 8'd1);

assign add_ln211_fu_832_p2 = (internal_uart_counter + 32'd1);

assign and_ln173_fu_412_p2 = (init_device_read & enable_fu_406_p2);

assign and_ln210_fu_816_p2 = (icmp_ln210_2_fu_810_p2 & icmp_ln210_1_fu_804_p2);

assign and_ln_fu_480_p4 = {{{tmp_reg_896}, {3'd0}}, {trunc_ln177_reg_901}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state28_on_subcall_done = ((ap_predicate_op178_call_state28 == 1'b1) & (grp_ddr_write_1_fu_382_ap_done == 1'b0));
end

always @ (*) begin
    ap_predicate_op178_call_state28 = ((or_ln210_reg_1028 == 1'd1) & (icmp_ln173_reg_881 == 1'd0));
end

assign enable_fu_406_p2 = 8'd1 << EN_cast8_fu_402_p1;

assign grp_ddr_write_1_fu_382_ap_start = grp_ddr_write_1_fu_382_ap_start_reg;

assign icmp_ln173_fu_418_p2 = ((and_ln173_fu_412_p2 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln177_fu_488_p2 = ((and_ln_fu_480_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln210_1_fu_804_p2 = (($signed(sub_ln209_fu_793_p2) > $signed(64'd1000000)) ? 1'b1 : 1'b0);

assign icmp_ln210_2_fu_810_p2 = ((PL_Ctrl_first_timestamp_q0 != 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln210_fu_798_p2 = ((PL_Ctrl_fifo_index_q0 == 32'd204) ? 1'b1 : 1'b0);

assign m_axi_clu_addr_ARBURST = 2'd0;

assign m_axi_clu_addr_ARCACHE = 4'd0;

assign m_axi_clu_addr_ARID = 1'd0;

assign m_axi_clu_addr_ARLEN = 32'd1;

assign m_axi_clu_addr_ARLOCK = 2'd0;

assign m_axi_clu_addr_ARPROT = 3'd0;

assign m_axi_clu_addr_ARQOS = 4'd0;

assign m_axi_clu_addr_ARREGION = 4'd0;

assign m_axi_clu_addr_ARSIZE = 3'd0;

assign m_axi_clu_addr_ARUSER = 1'd0;

assign m_axi_clu_addr_AWADDR = 64'd0;

assign m_axi_clu_addr_AWBURST = 2'd0;

assign m_axi_clu_addr_AWCACHE = 4'd0;

assign m_axi_clu_addr_AWID = 1'd0;

assign m_axi_clu_addr_AWLEN = 32'd0;

assign m_axi_clu_addr_AWLOCK = 2'd0;

assign m_axi_clu_addr_AWPROT = 3'd0;

assign m_axi_clu_addr_AWQOS = 4'd0;

assign m_axi_clu_addr_AWREGION = 4'd0;

assign m_axi_clu_addr_AWSIZE = 3'd0;

assign m_axi_clu_addr_AWUSER = 1'd0;

assign m_axi_clu_addr_AWVALID = 1'b0;

assign m_axi_clu_addr_BREADY = 1'b0;

assign m_axi_clu_addr_WDATA = 32'd0;

assign m_axi_clu_addr_WID = 1'd0;

assign m_axi_clu_addr_WLAST = 1'b0;

assign m_axi_clu_addr_WSTRB = 4'd0;

assign m_axi_clu_addr_WUSER = 1'd0;

assign m_axi_clu_addr_WVALID = 1'b0;

assign m_axi_ps_ddr_ARADDR = grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARADDR;

assign m_axi_ps_ddr_ARBURST = grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARBURST;

assign m_axi_ps_ddr_ARCACHE = grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARCACHE;

assign m_axi_ps_ddr_ARID = grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARID;

assign m_axi_ps_ddr_ARLEN = grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARLEN;

assign m_axi_ps_ddr_ARLOCK = grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARLOCK;

assign m_axi_ps_ddr_ARPROT = grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARPROT;

assign m_axi_ps_ddr_ARQOS = grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARQOS;

assign m_axi_ps_ddr_ARREGION = grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARREGION;

assign m_axi_ps_ddr_ARSIZE = grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARSIZE;

assign m_axi_ps_ddr_ARUSER = grp_ddr_write_1_fu_382_m_axi_ps_ddr_ARUSER;

assign m_axi_ps_ddr_AWADDR = grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWADDR;

assign m_axi_ps_ddr_AWBURST = grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWBURST;

assign m_axi_ps_ddr_AWCACHE = grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWCACHE;

assign m_axi_ps_ddr_AWID = grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWID;

assign m_axi_ps_ddr_AWLEN = grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWLEN;

assign m_axi_ps_ddr_AWLOCK = grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWLOCK;

assign m_axi_ps_ddr_AWPROT = grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWPROT;

assign m_axi_ps_ddr_AWQOS = grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWQOS;

assign m_axi_ps_ddr_AWREGION = grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWREGION;

assign m_axi_ps_ddr_AWSIZE = grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWSIZE;

assign m_axi_ps_ddr_AWUSER = grp_ddr_write_1_fu_382_m_axi_ps_ddr_AWUSER;

assign m_axi_ps_ddr_WDATA = grp_ddr_write_1_fu_382_m_axi_ps_ddr_WDATA;

assign m_axi_ps_ddr_WID = grp_ddr_write_1_fu_382_m_axi_ps_ddr_WID;

assign m_axi_ps_ddr_WLAST = grp_ddr_write_1_fu_382_m_axi_ps_ddr_WLAST;

assign m_axi_ps_ddr_WSTRB = grp_ddr_write_1_fu_382_m_axi_ps_ddr_WSTRB;

assign m_axi_ps_ddr_WUSER = grp_ddr_write_1_fu_382_m_axi_ps_ddr_WUSER;

assign mul_ln188_fu_502_p0 = mul_ln188_fu_502_p00;

assign mul_ln188_fu_502_p00 = EN;

assign mul_ln188_fu_502_p1 = 11'd204;

assign or_ln176_fu_432_p2 = (shl_ln_fu_424_p3 | 19'd4116);

assign or_ln189_fu_513_p2 = (mul_ln188_fu_502_p2 | 11'd1);

assign or_ln190_fu_524_p2 = (mul_ln188_fu_502_p2 | 11'd2);

assign or_ln191_fu_535_p2 = (mul_ln188_fu_502_p2 | 11'd3);

assign or_ln200_fu_708_p2 = (shl_ln_reg_885 | 19'd16384);

assign or_ln210_fu_822_p2 = (icmp_ln210_fu_798_p2 | and_ln210_fu_816_p2);

assign received_uart = (internal_uart_counter + 32'd1);

assign rxData_fu_756_p1 = m_axi_clu_addr_RDATA[7:0];

assign sext_ln176_fu_458_p1 = $signed(trunc_ln_fu_448_p4);

assign sext_ln200_fu_732_p1 = $signed(trunc_ln9_fu_722_p4);

assign shl_ln_fu_424_p3 = {{EN}, {16'd0}};

assign sub_ln209_fu_793_p2 = (ts_in - PL_Ctrl_first_timestamp_q0);

assign trunc_ln177_fu_476_p1 = m_axi_clu_addr_RDATA[0:0];

assign trunc_ln195_fu_704_p1 = ts_in[7:0];

assign trunc_ln203_fu_742_p1 = single_index_reg_992[10:0];

assign trunc_ln205_fu_764_p1 = PL_Header_pkt_len_bytes_q0[7:0];

assign trunc_ln9_fu_722_p4 = {{add_ln200_fu_717_p2[63:2]}};

assign trunc_ln_fu_448_p4 = {{add_ln176_fu_442_p2[63:2]}};

assign zext_ln176_fu_438_p1 = or_ln176_fu_432_p2;

assign zext_ln188_1_fu_508_p1 = mul_ln188_fu_502_p2;

assign zext_ln189_fu_519_p1 = or_ln189_fu_513_p2;

assign zext_ln190_fu_530_p1 = or_ln190_fu_524_p2;

assign zext_ln191_fu_541_p1 = or_ln191_fu_535_p2;

assign zext_ln192_fu_552_p1 = add_ln192_fu_546_p2;

assign zext_ln193_fu_563_p1 = add_ln193_fu_557_p2;

assign zext_ln194_fu_574_p1 = add_ln194_fu_568_p2;

assign zext_ln195_fu_585_p1 = add_ln195_fu_579_p2;

assign zext_ln196_fu_596_p1 = add_ln196_fu_590_p2;

assign zext_ln197_fu_607_p1 = add_ln197_fu_601_p2;

assign zext_ln200_fu_713_p1 = or_ln200_fu_708_p2;

assign zext_ln203_fu_760_p1 = add_ln203_reg_1008;

assign zext_ln206_fu_618_p1 = add_ln206_fu_612_p2;

assign zext_ln207_fu_629_p1 = add_ln207_1_fu_623_p2;

assign zext_ln209_fu_494_p1 = EN;

always @ (posedge ap_clk) begin
    EN_cast8_reg_876[7:3] <= 5'b00000;
    shl_ln_reg_885[15:0] <= 16'b0000000000000000;
    zext_ln209_reg_910[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    uart_fifo_addr_1_reg_927[0] <= 1'b1;
    uart_fifo_addr_2_reg_932[1] <= 1'b1;
    uart_fifo_addr_3_reg_937[1:0] <= 2'b11;
end

endmodule //clu_uart_data_read_1
